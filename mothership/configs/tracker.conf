# -*- coding: latin-1 -*-
#  
#  Copyright (c) 2006  Michael Duerig  
#  Bern University of Applied Sciences
#  All Rights Reserved.
#  
#  Permission is hereby granted, free of charge, to any person obtaining a
#  copy of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom the
#  Software is furnished to do so, subject to the following conditions:
#  
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.

import sys
sys.path.append( '../server' )
from mothership import *
from crmatrix import *

client_spu = SPU( 'tilesort' )
client_spu.Conf( 'bucket_mode', 'Frustum' )     

# Create a tracker SPU instance for 3 screens listening on UDP 127.0.0.1:1234 
# for tracker data.
tracker_spu = SPU( 'tracker' )
tracker_spu.Conf( 'listen_ip', "127.0.0.1" )
tracker_spu.Conf( 'listen_port', 1234 )
tracker_spu.Conf( 'screen_count', 6 )

# The cave matrix maps from tracker coordinates to OpenGL coordinates.
w = 2.0;	 h = 2.0;  d = 2.0; 
v = CRMatrix( )
v.Load([                            # Mind column major order! 
  -0.5*w,  -0.5*h,  -0.5*d,   1.0,  # Lower left corner of center screen  
   0.5*w,  -0.5*h,  -0.5*d,   1.0,  # Lower right corner of center screen
  -0.5*w,   0.5*h,  -0.5*d,   1.0,  # Upper left corner of center screen
  -0.5*w,  -0.5*h,   0.5*d,   1.0   # Lower left corner of back screen
])

t = CRMatrix( )              
t.Load([		                        # Mind column major order! 
  0.0, 0.0, 0.0, 1.0,               # Lower left corner of center screen  
  1.0, 0.0, 0.0, 1.0,               # Lower right corner of center screen
  0.0, 1.0, 0.0, 1.0,               # Upper left corner of center screen
  0.0, 0.0, 1.0, 1.0                # Lower left corner of back screen
])

t.Invert()
v.Multiply(t.ToList())
tracker_spu.Conf( 'cave_matrix', v.ToList())


# Eye separation. This is half the distance between the left and 
# the right eye measured in OpenGL units.
eye_sep = 0.025

# Initial position in OpenGL units
tracker_spu.Conf( 'initial_pos', [0.0, 0.0, 0.0] )
# Configuration option for the screens of which the CAVE is made of

# Index of the server for the center screen left eye 
tracker_spu.Conf( 'screen_0_server_index', 0 )

# The orientation of this screen is given as an arguments to glRotate.
# Since this is the center screen, no rotation is required.
tracker_spu.Conf( 'screen_0_orientation', [0, 0, 1, 0] )

# Position of the center of this screen (in OpenGL units) 
tracker_spu.Conf( 'screen_0_origin', [0, 0, -1] )

# Width and height of this screen and near and far clipping plane positions
tracker_spu.Conf( 'screen_0_extent', [2, 2, 0.01, 10000] )

# Offset to tracker position for this screen
tracker_spu.Conf( 'screen_0_offset', [-eye_sep, 0, 0] )

tracker_spu.Conf( 'screen_0_eye', 'left' )

# Similar for screen 1: A rotation of 90° around the y-axis 
# results in the left screen left eye. 
tracker_spu.Conf( 'screen_1_server_index', 1 )
tracker_spu.Conf( 'screen_1_orientation', [90, 0, 1, 0] )
tracker_spu.Conf( 'screen_1_origin', [-1, 0, 0] )
tracker_spu.Conf( 'screen_1_extent', [2, 2, 0.01, 10000] )
tracker_spu.Conf( 'screen_1_offset', [0, 0, eye_sep] )
tracker_spu.Conf( 'screen_1_eye', 'left' )

# Similar for screen 2. A rotation of -90° around the y-axis 
# results in the right screen left eye. 
tracker_spu.Conf( 'screen_2_server_index', 2 )
tracker_spu.Conf( 'screen_2_orientation', [-90, 0, 1, 0] )
tracker_spu.Conf( 'screen_2_origin', [1, 0, 0] )
tracker_spu.Conf( 'screen_2_extent', [2, 2, 0.01, 10000] )
tracker_spu.Conf( 'screen_2_offset', [0, 0, -eye_sep] )
tracker_spu.Conf( 'screen_2_eye', 'left' )

# Center screen right eye
tracker_spu.Conf( 'screen_3_server_index', 3 )
tracker_spu.Conf( 'screen_3_orientation', [0, 0, 1, 0] )
tracker_spu.Conf( 'screen_3_origin', [0, 0, -1] )
tracker_spu.Conf( 'screen_3_extent', [2, 2, 0.01, 10000] )
tracker_spu.Conf( 'screen_3_offset', [eye_sep, 0, 0] )
tracker_spu.Conf( 'screen_3_eye', 'right' )

# Left screen right eye
tracker_spu.Conf( 'screen_4_server_index', 4 )
tracker_spu.Conf( 'screen_4_orientation', [90, 0, 1, 0] )
tracker_spu.Conf( 'screen_4_origin', [-1, 0, 0] )
tracker_spu.Conf( 'screen_4_extent', [2, 2, 0.01, 10000] )
tracker_spu.Conf( 'screen_4_offset', [0, 0, -eye_sep] )
tracker_spu.Conf( 'screen_4_eye', 'right' )

# Right screen right eye
tracker_spu.Conf( 'screen_5_server_index', 5 )
tracker_spu.Conf( 'screen_5_orientation', [-90, 0, 1, 0] )
tracker_spu.Conf( 'screen_5_origin', [1, 0, 0] )
tracker_spu.Conf( 'screen_5_extent', [2, 2, 0.01, 10000] )
tracker_spu.Conf( 'screen_5_offset', [0, 0, eye_sep] )
tracker_spu.Conf( 'screen_5_eye', 'right' )


server1_spu = SPU( 'render' )
server1_spu.Conf( 'window_geometry', [320, 400, 300, 240] )
server1_spu.Conf( 'title', 'Server 1' )
# server1_spu.Conf( 'fullscreen', 1)

server2_spu = SPU( 'render' )
server2_spu.Conf( 'window_geometry', [10, 400, 300, 240] )
server2_spu.Conf( 'title', 'Server 2' )
# server2_spu.Conf( 'fullscreen', 1)

server3_spu = SPU( 'render' )
server3_spu.Conf( 'window_geometry', [630, 400, 300, 240] )
server3_spu.Conf( 'title', 'Server 3' )
# server3_spu.Conf( 'fullscreen', 1)

server4_spu = SPU( 'render' )
server4_spu.Conf( 'window_geometry', [320, 700, 300, 240] )
server4_spu.Conf( 'title', 'Server 4' )
# server4_spu.Conf( 'fullscreen', 1)

server5_spu = SPU( 'render' )
server5_spu.Conf( 'window_geometry', [10, 700, 300, 240] )
server5_spu.Conf( 'title', 'Server 5' )
# server5_spu.Conf( 'fullscreen', 1)

server6_spu = SPU( 'render' )
server6_spu.Conf( 'window_geometry', [630, 700, 300, 240] )
server6_spu.Conf( 'title', 'Server 6' )
# server6_spu.Conf( 'fullscreen', 1)

server1_node = CRNetworkNode( )
server1_node.AddTile( 0, 0, 300, 240 )
server1_node.AddSPU( server1_spu )

server2_node = CRNetworkNode( )
server2_node.AddTile( 0, 0, 300, 240 )
server2_node.AddSPU( server2_spu )

server3_node = CRNetworkNode( )
server3_node.AddTile( 0, 0, 300, 240 )
server3_node.AddSPU( server3_spu )

server4_node = CRNetworkNode( )
server4_node.AddTile( 0, 0, 300, 240 )
server4_node.AddSPU( server4_spu )

server5_node = CRNetworkNode( )
server5_node.AddTile( 0, 0, 300, 240 )
server5_node.AddSPU( server5_spu )

server6_node = CRNetworkNode( )
server6_node.AddTile( 0, 0, 300, 240 )
server6_node.AddSPU( server6_spu )

client_node = CRApplicationNode( )
client_node.AddSPU( tracker_spu )
client_node.AddSPU( client_spu )

client_spu.AddServer( server1_node, 'tcpip', port = 7001 )
client_spu.AddServer( server2_node, 'tcpip', port = 7002 )
client_spu.AddServer( server3_node, 'tcpip', port = 7003 )
client_spu.AddServer( server4_node, 'tcpip', port = 7004 )
client_spu.AddServer( server5_node, 'tcpip', port = 7005 )
client_spu.AddServer( server6_node, 'tcpip', port = 7006 )

client_node.SetApplication( 'city' )

cr = CR()
cr.AddNode( client_node )
cr.AddNode( server1_node )
cr.AddNode( server2_node )
cr.AddNode( server3_node )
cr.AddNode( server4_node )
cr.AddNode( server5_node )
cr.AddNode( server6_node )
cr.Go()
