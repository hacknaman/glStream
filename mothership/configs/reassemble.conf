# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# This script is an example of reassembling a number of tiles into a
# downstream window.  Specifically, the client uses the tilesort SPU to
# render into N tiles.  Each tile render is actually a readback/pack SPU
# pair.  The pack SPUs all send their images to a render SPU that shows
# the assembled image.


import sys
sys.path.append( "../server" )
from mothership import *

DEMO_DIR = r'/home/sourceforge/Chromium-multi/cr/bin/Linux'
demo = sys.argv[1]

# Server(s) base hostname.  If your cluster has hosts named cr1, cr2, cr3,
# etc. you'd set ServerHost = 'cr'.  If you leave ServerHost as '' then
# all nodes will be on your local host.
ServerHost = ''

cr = CR()
cr.MTU( 1024*1024 );

TILE_COLS = 2
TILE_ROWS = 1

TILE_WIDTH = 300
TILE_HEIGHT = 300

# The application node (tilesort SPU)
client_node = CRApplicationNode( )
client_node.StartDir( DEMO_DIR )
client_node.SetApplication( demo )
tilesortspu = SPU( 'tilesort' )
client_node.AddSPU( tilesortspu )


# Final reassembly node (render SPU)
render_node = CRNetworkNode()
renderspu = SPU('render')
renderspu.Conf( 'window_geometry', 0, 0, TILE_COLS * TILE_WIDTH, TILE_ROWS * TILE_HEIGHT )
render_node.AddSPU(renderspu)

cr.AddNode( render_node )

# tile rendering nodes (readback SPU + pack SPU)
for row in range(TILE_ROWS):
	for col in range(TILE_COLS):
		index = row * TILE_COLS + col

		if ServerHost == '':
			node = CRNetworkNode( );
		else:
			node = CRNetworkNode( ServerHost + str(index + 1) )

		readbackspu = SPU( 'readback' )
		readbackspu.Conf( 'window_geometry', 1.1*col*TILE_WIDTH, 1.1*row*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT )
		readbackspu.Conf( 'drawpixels_pos', col * TILE_WIDTH, row * TILE_HEIGHT)
		node.AddSPU( readbackspu )

		node.AddTile( col*TILE_WIDTH, (TILE_ROWS-row-1)*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT );

		packspu = SPU('pack')
		node.AddSPU(packspu)

		tilesortspu.AddServer( node, protocol='tcpip', port=7001 + index )
		packspu.AddServer( render_node, protocol='tcpip' )

		cr.AddNode( node );


cr.AddNode( client_node )

cr.Go()
