# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

#
# This configuration file is meant to be used with DMX.
# When everything's set up correctly, you can just type type name of your
# OpenGL app and Chromium will work automatically on your DMX display.
# This is far nicer than manually starting crservers!
#
# Prerequisites:
#  1. Your ~/.crsite file needs to be setup (or $CRSITE or /etc/crsite)
#
#  2. Your ~/.crconfigs file needs to be setup.  Specifically, it needs a
#     line like this:
#        *  /usr/local/Chromium/cr/mothership/configs/autodmx.conf %m %p
#     This tells Chromium's libcrfaker to use the autodmx.conf config file
#     when running any application (indicated by *).  The %m is replaced by
#     a random mothership port.  The %p is replaced by the program name.
#
#  3. libGL.so and libGL.so.1 must be symlink to libcrfaker.so
#
#  4. The back-end/cluster machines must have the crserver binary in the
#     search path (typically /usr/local/bin or /usr/bin) and a properly
#     set LD_LIBRARY_PATH (you can tweak it below).
#
#  5. rsh to the back-end/cluster machines must work.
#
# How it works:
#  1. When the app starts, libcrfaker will fail to find the mothership on
#     its first try.  That'll signal it to search the .crconfigs file for
#     a mothership config to spawn.  libcrfaker will choose a random port
#     number for the mothership.
#
#  2. The mothership is spawned with autodmx.conf.  In turn, it uses rsh
#     to start up the crservers on the back-end machines.  Another random
#     port number is used for the crservers.
#
#  3. Control returns to libcrfaker where it proceeds to load the client-side
#     SPU chain (tilesort).  Then, control returns to the application.
#
# Notes:
#  1. We use random port numbers (within a reasonable range) so that multiple
#     GL apps can use DMX/Chromium simultaneously.  If we don't use random
#     numbers we'd need some sort of port broker (complicated).
#
#  2. You may need to tweak 'crdir' here:
#

crdir = "/home/sourceforge/Chromium-dmx/cr"

import random
import sys
sys.path.append( crdir + "/mothership/server" )
from mothership import *

if len(sys.argv) < 3:
	print "Chromium mothership error: no program specified to run!"
	sys.exit(1)

mothershipPort = int(sys.argv[1])
program = sys.argv[2]

cr = CR()
cr.MTU( 10*1024*1024 )


# Get the .crsite configuration information.  Try "$CRSITE" first,
# then ~/.crsite, and finally /etc/crsite
sf = 0
if os.environ.has_key("CRSITE"):
	siteFileName = os.environ["CRSITE"]
	try:
		sf = open(siteFileName, "r")
		print "Chromium autodmx.conf: using $CRSITE"
	except IOError:
		sf = 0
if not sf:
	siteFileName = os.path.expanduser("~/.crsite")
	try:
		sf = open(siteFileName, "r")
		print "Chromium autodmx.conf: using ~/.crsite"
	except IOError:
		sf = 0
if not sf:
	siteFileName = os.path.expanduser("/etc/crsite")
	try:
		sf = open(siteFileName, "r")
		print "Chromium autodmx.conf: using /etc/crsite"
	except IOError:
		sf = 0
if not sf:
	print "Chromium mothership error: unable to open ~/.crsite file!"
	sys.exit(1)
siteInfo = eval(sf.read())
sf.close()

# Get DMX display size and hostnames from the site file
TILE_COLS = siteInfo["mural_size"][0]
TILE_ROWS = siteInfo["mural_size"][1]
HOSTS = siteInfo["cluster_hosts"]

localHostname = os.uname()[1]

# choose random port for server communication
serverPort = random.randint(7000, 7100)

AUTOSTART = 1


# These values don't really matter!
TILE_WIDTH = 550
TILE_HEIGHT = 550

tilesortspu = SPU('tilesort')
tilesortspu.Conf('use_dmx', 1)
tilesortspu.Conf('retile_on_resize', 1)  # the default
tilesortspu.Conf('bucket_mode', 'Non-Uniform Grid')

clientnode = CRApplicationNode( )
#clientnode.StartDir( crbindir )
clientnode.SetApplication( program )
clientnode.AddSPU( tilesortspu )
clientnode.Conf('track_window_size', 1)
clientnode.Conf('track_window_position', 1)

for row in range(TILE_ROWS):
	for col in range(TILE_COLS):
		n = row * TILE_COLS + col

		renderspu = SPU( 'render' )
		renderspu.Conf('display_string', HOSTS[n] + ":0")
		renderspu.Conf('render_to_app_window', 1)
		renderspu.Conf( 'window_geometry', [1.1*col*TILE_WIDTH, 1.1*row*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT] )

		servernode = CRNetworkNode( HOSTS[n] )
		servernode.AddTile( col*TILE_WIDTH, (TILE_ROWS-row-1)*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT )

		servernode.AddSPU( renderspu )
		# optimize_bucket is of no use w/ DMX.
		servernode.Conf('optimize_bucket', 0)
		servernode.Conf('use_dmx', 1)
		cr.AddNode( servernode )

		if AUTOSTART:
			servernode.AutoStart( ["/usr/bin/rsh", HOSTS[n],
								   "/bin/sh -c 'DISPLAY=:0.0  LD_LIBRARY_PATH=%s  crserver -mothership %s:%d'" % (crlibdir, localHostname, mothershipPort) ] )

		tilesortspu.AddServer( servernode, protocol='tcpip', port=serverPort )


cr.AddNode( clientnode )
cr.Go( mothershipPort )
