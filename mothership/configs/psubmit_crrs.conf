# Parallel/composite with RenderServer
#
# Some number of binary swap nodes each render their part of the scene.
# The normal binary swap compositing/exchanges take place.
# The final rendering is passed to the VNC SPU which has been
# configured for "drawpixels_only" mode so that it effectively converts
# glDrawPixels() commands into RFB updates which are sent to the VNC Proxy.
#
# SPU chain for each parallel node looks like this:
#
#  +---------+--------+-------+-------+
#  | psubmit | binary |window |       |
#  |   app   |  swap  |tracker|  VNC  |
#  |         |   SPU  |  SPU  |  SPU  |
#  +---------+--------+-------+-------+
#
# A dummy/application node is started pretty much independent of this.  It
# displays the final, composited rendering in the VNCProxy and VNC Viewers.
# We give the dummy window a known title ("AppWindow") and tell the window
# tracker SPUs to track that window's size and position.  This ensures
# that the VNC SPU sends the RFB updates to the right position on the
# VNCProxy's screen.



import sys
sys.path.append( "../server" )
from mothership import *

Demo = 'psubmit'

# Can render/readback windows be dynamically resized?
Resizable = 1

# Test bounding boxes?
BBox = 0

# Use Pbuffers for off-screen rendering?
PBuffers = 1

# Image size:
Width = 400
Height = 400

# How many binaryswap nodes (must be a power of two: 2, 4, 8, etc.):
NumNodes = 2

Protocol = 'tcpip'
Hosts = ['localhost', 'localhost', 'localhost', 'localhost',
		 'localhost', 'localhost', 'localhost', 'localhost' ]
# You may optionally assign port numbers, like this:
# Hosts = ['localhost:7100', 'localhost:7102', 'localhost:7104', ... ]
# NOTE: the stride between port numbers must be at least as great as the
# number of swap stages (log2(NumNodes))!!!



# End of options.
# ======================================================================

Demo = os.path.join(crbindir, Demo)


# Build the Peers string
Peers = ''
for i in range(NumNodes):
	Peers += Protocol + '://' + Hosts[i]
	if i != NumNodes - 1:
		Peers += ','

print "Peers = " + Peers


cr = CR()
cr.MTU( 1024*1024 )


DummyAppNode = 1
if DummyAppNode:
	# dummy appnode w/ render SPU
	renderspu = SPU( 'render' )
	renderspu.Conf('resizable', Resizable)
	renderspu.Conf('render_to_app_window', 1)
	appnode = CRApplicationNode( )
	appnode.StartDir( crbindir )
	app = "./nullapp -geometry %dx%d -title AppWindow" % (Width, Height)
	appnode.SetApplication(app)
	appnode.AddSPU( renderspu )
	cr.AddNode(appnode)


appnodes = range(NumNodes)

for i in range(NumNodes):
	app = '%s -rank %d -size %d -clear -swap' % (Demo, i, NumNodes)
	if BBox:
		app += ' -bbox'
	if PBuffers:
		app += ' -pbuffer'
	print "APP: " + app
	appHost = string.split(Hosts[i], ':')[0]  # remove ':port' part if present
	appnodes[i] = CRApplicationNode( appHost )
	appnodes[i].SetApplication( app )
	appnodes[i].StartDir( crbindir )

	spu = SPU('binaryswap')
	x = i * (Width + 20)
	y = 0
	spu.Conf('window_geometry', [x, y, Width, Height])
	spu.Conf('type', 'depth')
	spu.Conf('resizable', Resizable)
	spu.Conf('peers', Peers)
	# only specifying visual to work-around ATI FireGL problem
	spu.Conf('default_visual', 'rgb, double, depth, stencil')
	spu.Conf('node_number', i)
	spu.Conf('title', 'binary-swap SPU node %d' % i)
	appnodes[i].AddSPU( spu )

	spu = SPU('windowtracker')
	spu.Conf('window_title', 'AppWindow')
	appnodes[i].AddSPU(spu)
	
	vncspu = SPU('vnc')
	vncspu.Conf('screen_size', [1280, 1024])
	vncspu.Conf('drawpixels_only', 1)
	appnodes[i].AddSPU(vncspu)

	nopspu = SPU('nop')
	appnodes[i].AddSPU(nopspu)

	cr.AddNode(appnodes[i])



cr.Go()
