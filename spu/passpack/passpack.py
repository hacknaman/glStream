# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append( "../../glapi_parser" )
import apiutil

keys = apiutil.GetDispatchedFunctions("../../glapi_parser/APIspec.txt")


apiutil.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY passpack.py SCRIPT */
#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "passpackspu.h"
#include "cr_packfunctions.h"
#include "passpackspu_proto.h"
"""

num_funcs = len(keys) - len(apiutil.AllSpecials('packspu_unimplemented'))
print 'SPUNamedFunctionTable _cr_pack_table[%d];' % (num_funcs+1)

print """
static void __fillin( int offset, char *name, SPUGenericFunction func )
{
	_cr_pack_table[offset].name = crStrdup( name );
	_cr_pack_table[offset].fn = func;
}"""

pack_specials = []

for func_name in keys:
	if ("get" in apiutil.Properties(func_name) or
	    apiutil.FindSpecial( "packspu", func_name ) or 
	    apiutil.FindSpecial( "packspu_flush", func_name ) or 
		apiutil.FindSpecial( "packspu_vertex", func_name )):
	  pack_specials.append( func_name )

print ''	  
for index in range(len(keys)):
	func_name = keys[index]
	params = apiutil.Parameters(func_name)
	if apiutil.FindSpecial( "packspu_unimplemented", func_name ):
		continue
	if func_name in pack_specials:
		print 'void PACKSPU_APIENTRY crPassPack%s( %s )' % ( func_name, apiutil.MakeDeclarationString(params) )
		print '{'
		print '\tif (*pack_spu.ImpThreadID != NO_PASS_ID)'
		print '\tpackspu_%s( %s );' % ( func_name, apiutil.MakeCallString( params ) )
		print '\tpack_spu.super.%s( %s );' % ( func_name, apiutil.MakeCallString( params ) )
		print '}'
		print ''
	else:
		print 'void PACKSPU_APIENTRY crPassPack%s( %s )' % ( func_name, apiutil.MakeDeclarationString(params) )
		print '{'
		print '\tif (pack_spu.swap)'
		print '\t{'
		print '\tif (*pack_spu.ImpThreadID != NO_PASS_ID)'
		print '\t\tcrPack%sSWAP( %s );' % ( func_name, apiutil.MakeCallString( params ) )
		print '\t}'
		print '\telse'
		print '\t{'
		print '\tif (*pack_spu.ImpThreadID != NO_PASS_ID)'
		print '\t\tcrPack%s( %s );' % ( func_name, apiutil.MakeCallString( params ) )
		print '\t}'
		print '\tpack_spu.super.%s( %s );' % ( func_name, apiutil.MakeCallString( params ) )
		print '}'
		print ''
	
print '\nvoid packspuCreateFunctions( void )'
print '{'
for index in range(len(keys)):
	func_name = keys[index]
	if apiutil.FindSpecial( "packspu_unimplemented", func_name ):
		continue
	if func_name in pack_specials:
		print '\t__fillin( %3d, "%s", (SPUGenericFunction) crPassPack%s );' % (index, func_name, func_name )
	else:
		print '\t__fillin( %3d, "%s", (SPUGenericFunction) (crPassPack%s) );' % (index, func_name, func_name )
print '\t__fillin( %3d, NULL, NULL );' % num_funcs
print '}'
