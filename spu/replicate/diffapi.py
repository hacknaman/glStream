# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys,os;
import cPickle;
import string;
import re;

parsed_file = open( "../../glapi_parser/gl_header.parsed", "rb" )
gl_mapping = cPickle.load( parsed_file )

sys.path.append( "../../opengl_stub" )

import stub_common;

stub_common.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE GENERATED BY THE diffapi.py SCRIPT */
#include "cr_spu.h"
#include "cr_packfunctions.h"
#include "replicatespu.h"

#include <stdio.h>
"""
for func_name in stub_common.AllSpecials( "../../packer/packer_pixel" ):
	(return_type, args, types) = gl_mapping[func_name]
	print 'extern %s REPLICATESPU_APIENTRY replicatespu_Diff%s%s;' % ( return_type, func_name, stub_common.ArgumentString( args, types ) )

for func_name in stub_common.AllSpecials( "../../packer/packer_pixel" ):
	(return_type, names, types) = gl_mapping[func_name]
	print '%s REPLICATESPU_APIENTRY replicatespu_Diff%s%s' % (return_type, func_name, stub_common.ArgumentString( names, types ) )
	print '{'
	print '\tGET_CONTEXT(ctx);'
	print '\tif (!ctx) return;'
	names.append( '&(ctx->State->client.unpack)' )
	print '\tif (replicate_spu.swap)'
	print '\t{'
	print '\t\tcrPack%sSWAP%s;' % (func_name, stub_common.CallString( names ) )
	print '\t}'
	print '\telse'
	print '\t{'
	print '\t\tcrPack%s%s;' % (func_name, stub_common.CallString( names ) )
	print '\t}'
	print '}'

print """
void replicatespuCreateDiffAPI( void )
{
"""

keys = gl_mapping.keys()
keys.sort();

for func_name in keys:
	(return_type, names, types) = gl_mapping[func_name]
	if stub_common.FindSpecial( "replicatespu_diff", func_name ):
		print '\treplicate_spu.diff_dispatch.%s = (%sFunc_t) crState%s;' % (func_name,func_name,func_name)
	else:
		if stub_common.FindSpecial( "../../packer/packer_pixel", func_name ):
			print '\treplicate_spu.diff_dispatch.%s = (%sFunc_t) replicatespu_Diff%s;' % (func_name,func_name,func_name)
		else:
			print '\treplicate_spu.diff_dispatch.%s = (%sFunc_t) (replicate_spu.swap ? crPack%sSWAP : crPack%s);' % (func_name, func_name,func_name,func_name)
print '\tcrStateDiffAPI( &replicate_spu.diff_dispatch );'
print '}'
