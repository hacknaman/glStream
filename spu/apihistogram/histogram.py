# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append( "../../glapi_parser" )
import apiutil


keys = apiutil.GetDispatchedFunctions("../../glapi_parser/APIspec.txt")


def EmitHeader():
	apiutil.CopyrightC()

	print """
/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY histogram.py SCRIPT */
#include <stdlib.h>
#include "cr_spu.h"
#include "apihistogramspu.h"
"""
	print '#define NUM_FUNCS ' + str(len(keys))
	print ''
	print 'struct count_index {'
	print '\tGLuint count;'
	print '\tGLuint index;'
	print '};'
	print ''
	print 'static struct count_index Histogram[NUM_FUNCS];'
	print ''
	return


def EmitFunctions():
	offset = 0
	for func_name in keys:
		retType = apiutil.ReturnType(func_name)
		params = apiutil.Parameters(func_name)
		print 'static ' + retType + ' APIHISTOGRAMSPU_APIENTRY'
		print 'histo' + func_name + '(' + apiutil.MakeDeclarationString(params)+ ')'
		print '{'
		print '\tHistogram[' + str(offset) + '].count++;'
		if retType != 'void':
			print '\treturn '
		print '\tapihistogram_spu.super.' + func_name + '(' + apiutil.MakeCallString(params) + ');'
		print '}'
		print ''
		offset += 1
	return



def EmitTable():
	#num_funcs = len(keys) - len(apiutil.AllSpecials('packspu_unimplemented'))

	print 'SPUNamedFunctionTable _cr_apihistogram_table[] = {'

	for func_name in keys:
		print '\t{ "' + func_name + '", (SPUGenericFunction) histo' + func_name + ' },'
	print '};'
	return


def EmitMiscFuncs():
	print ''
	print 'void'
	print 'apihistogramspuInitCounts(void)'
	print '{'
	print '\tint i;'
	print '\tfor (i = 0; i < NUM_FUNCS; i++) {'
	print '\t\tHistogram[i].count = 0;'
	print '\t\tHistogram[i].index = i;'
	print '\t}'
	print '}'

	print ''
	print 'static int'
	print 'compare(const void *a, const void *b)'
	print '{'
	print '\tconst struct count_index *ca = (struct count_index *) a;'
	print '\tconst struct count_index *cb = (struct count_index *) b;'
	print '\tif (ca->count < cb->count)'
	print '\t\treturn 1;'
	print '\telse if (ca->count > cb->count)'
	print '\t\treturn -1;'
	print '\telse'
	print '\t\treturn 0;'
	print '}'

	print ''
	print 'void'
	print 'apihistogramspuPrintReport(FILE *fp)'
	print '{'
	print '\tint i;'
	print '\tqsort(Histogram, NUM_FUNCS, sizeof(Histogram[0]), compare);'
	print '\tfor (i = 0; i < NUM_FUNCS && Histogram[i].count > 0; i++) {'
	print '\t\tint k = Histogram[i].index;'
	print '\t\tfprintf(fp, "%u  %s\\n", Histogram[i].count,_cr_apihistogram_table[k].name);'
	print '\t}'
	print '}'



EmitHeader()
EmitFunctions()
EmitTable()
EmitMiscFuncs()

