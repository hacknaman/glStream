/* Copyright (c) 2001, Stanford University
	All rights reserved.

	See the file LICENSE.txt for information on redistributing this software. */
	

/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY print.py SCRIPT */
#include <stdio.h>
#include "cr_error.h"
#include "cr_spu.h"
#include "catiacomposerplayerspu.h"



extern void  catiaComposerPlayerSPUReset()
{

}
extern void  resetColors()
{
   

}
extern  void getUpdatedCatiaComposerPlayerSceneSC()
{
    
}

static void PRINT_APIENTRY printAccum( GLenum op, GLfloat value )
{
	catia_composer_player_spu.super.Accum( op, value );
}

static void PRINT_APIENTRY printActiveTextureARB( GLenum texture )
{
	catia_composer_player_spu.super.ActiveTextureARB( texture );
}

static void PRINT_APIENTRY printAlphaFunc( GLenum func, GLclampf ref )
{
	catia_composer_player_spu.super.AlphaFunc( func, ref );
}

static GLboolean PRINT_APIENTRY printAreProgramsResidentNV( GLsizei n, const GLuint * ids, GLboolean * residences )
{
	return catia_composer_player_spu.super.AreProgramsResidentNV( n, ids, residences );
}

static GLboolean PRINT_APIENTRY printAreTexturesResident( GLsizei n, const GLuint * textures, GLboolean * residences )
{
	return catia_composer_player_spu.super.AreTexturesResident( n, textures, residences );
}

static void PRINT_APIENTRY printArrayElement( GLint i )
{
	catia_composer_player_spu.super.ArrayElement( i );
}

static void PRINT_APIENTRY printBarrierCreateCR( GLuint name, GLuint count )
{
	catia_composer_player_spu.super.BarrierCreateCR( name, count );
}

static void PRINT_APIENTRY printBarrierDestroyCR( GLuint name )
{
	catia_composer_player_spu.super.BarrierDestroyCR( name );
}

static void PRINT_APIENTRY printBarrierExecCR( GLuint name )
{
	catia_composer_player_spu.super.BarrierExecCR( name );
}

static void PRINT_APIENTRY printBegin( GLenum mode )
{
	catia_composer_player_spu.super.Begin( mode );
}

static void PRINT_APIENTRY printBeginQueryARB( GLenum target, GLuint id )
{
	catia_composer_player_spu.super.BeginQueryARB( target, id );
}

static void PRINT_APIENTRY printBindBufferARB( GLenum target, GLuint buffer )
{
	catia_composer_player_spu.super.BindBufferARB( target, buffer );
}

static void PRINT_APIENTRY printBindProgramARB( GLenum target, GLuint program )
{
	catia_composer_player_spu.super.BindProgramARB( target, program );
}

static void PRINT_APIENTRY printBindProgramNV( GLenum target, GLuint id )
{
	catia_composer_player_spu.super.BindProgramNV( target, id );
}

static void PRINT_APIENTRY printBindTexture( GLenum target, GLuint texture )
{
	catia_composer_player_spu.super.BindTexture( target, texture );
}

static void PRINT_APIENTRY printBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap )
{
	catia_composer_player_spu.super.Bitmap( width, height, xorig, yorig, xmove, ymove, bitmap );
}

static void PRINT_APIENTRY printBlendColorEXT( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
{
	catia_composer_player_spu.super.BlendColorEXT( red, green, blue, alpha );
}

static void PRINT_APIENTRY printBlendEquationEXT( GLenum mode )
{
	catia_composer_player_spu.super.BlendEquationEXT( mode );
}

static void PRINT_APIENTRY printBlendFunc( GLenum sfactor, GLenum dfactor )
{
	catia_composer_player_spu.super.BlendFunc( sfactor, dfactor );
}

static void PRINT_APIENTRY printBlendFuncSeparateEXT( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorA, GLenum dfactorA )
{
	catia_composer_player_spu.super.BlendFuncSeparateEXT( sfactorRGB, dfactorRGB, sfactorA, dfactorA );
}

static void PRINT_APIENTRY printBoundsInfoCR( const CRrecti * bounds, const GLbyte * payload, GLint len, GLint num_opcodes )
{
	catia_composer_player_spu.super.BoundsInfoCR( bounds, payload, len, num_opcodes );
}

static void PRINT_APIENTRY printBufferDataARB( GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage )
{
	catia_composer_player_spu.super.BufferDataARB( target, size, data, usage );
}

static void PRINT_APIENTRY printBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data )
{
	catia_composer_player_spu.super.BufferSubDataARB( target, offset, size, data );
}

static void PRINT_APIENTRY printCallList( GLuint list )
{
	catia_composer_player_spu.super.CallList( list );
}

static void PRINT_APIENTRY printCallLists( GLsizei n, GLenum type, const GLvoid * lists )
{
	catia_composer_player_spu.super.CallLists( n, type, lists );
}

static void PRINT_APIENTRY printChromiumParameterfCR( GLenum target, GLfloat value )
{
	catia_composer_player_spu.super.ChromiumParameterfCR( target, value );
}

static void PRINT_APIENTRY printChromiumParameteriCR( GLenum target, GLint value )
{
	catia_composer_player_spu.super.ChromiumParameteriCR( target, value );
}

static void PRINT_APIENTRY printChromiumParametervCR( GLenum target, GLenum type, GLsizei count, const GLvoid * values )
{
	catia_composer_player_spu.super.ChromiumParametervCR( target, type, count, values );
}

static void PRINT_APIENTRY printClear( GLbitfield mask )
{
	catia_composer_player_spu.super.Clear( mask );
}

static void PRINT_APIENTRY printClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
{
	catia_composer_player_spu.super.ClearAccum( red, green, blue, alpha );
}

static void PRINT_APIENTRY printClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
{
	catia_composer_player_spu.super.ClearColor( red, green, blue, alpha );
}

static void PRINT_APIENTRY printClearDepth( GLclampd depth )
{
	catia_composer_player_spu.super.ClearDepth( depth );
}

static void PRINT_APIENTRY printClearIndex( GLfloat c )
{
	catia_composer_player_spu.super.ClearIndex( c );
}

static void PRINT_APIENTRY printClearStencil( GLint s )
{
	catia_composer_player_spu.super.ClearStencil( s );
}

static void PRINT_APIENTRY printClientActiveTextureARB( GLenum texture )
{
	catia_composer_player_spu.super.ClientActiveTextureARB( texture );
}

static void PRINT_APIENTRY printClipPlane( GLenum plane, const GLdouble * equation )
{
	catia_composer_player_spu.super.ClipPlane( plane, equation );
}

static void PRINT_APIENTRY printColor3b( GLbyte red, GLbyte green, GLbyte blue )
{
	catia_composer_player_spu.super.Color3b( red, green, blue );
}

static void PRINT_APIENTRY printColor3bv( const GLbyte * v )
{
	catia_composer_player_spu.super.Color3bv( v );
}

static void PRINT_APIENTRY printColor3d( GLdouble red, GLdouble green, GLdouble blue )
{
	catia_composer_player_spu.super.Color3d( red, green, blue );
}

static void PRINT_APIENTRY printColor3dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Color3dv( v );
}

static void PRINT_APIENTRY printColor3f( GLfloat red, GLfloat green, GLfloat blue )
{
	catia_composer_player_spu.super.Color3f( red, green, blue );
}

static void PRINT_APIENTRY printColor3fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Color3fv( v );
}

static void PRINT_APIENTRY printColor3i( GLint red, GLint green, GLint blue )
{
	catia_composer_player_spu.super.Color3i( red, green, blue );
}

static void PRINT_APIENTRY printColor3iv( const GLint * v )
{
	catia_composer_player_spu.super.Color3iv( v );
}

static void PRINT_APIENTRY printColor3s( GLshort red, GLshort green, GLshort blue )
{
	catia_composer_player_spu.super.Color3s( red, green, blue );
}

static void PRINT_APIENTRY printColor3sv( const GLshort * v )
{
	catia_composer_player_spu.super.Color3sv( v );
}

static void PRINT_APIENTRY printColor3ub( GLubyte red, GLubyte green, GLubyte blue )
{
	catia_composer_player_spu.super.Color3ub( red, green, blue );
}

static void PRINT_APIENTRY printColor3ubv( const GLubyte * v )
{
	catia_composer_player_spu.super.Color3ubv( v );
}

static void PRINT_APIENTRY printColor3ui( GLuint red, GLuint green, GLuint blue )
{
	catia_composer_player_spu.super.Color3ui( red, green, blue );
}

static void PRINT_APIENTRY printColor3uiv( const GLuint * v )
{
	catia_composer_player_spu.super.Color3uiv( v );
}

static void PRINT_APIENTRY printColor3us( GLushort red, GLushort green, GLushort blue )
{
	catia_composer_player_spu.super.Color3us( red, green, blue );
}

static void PRINT_APIENTRY printColor3usv( const GLushort * v )
{
	catia_composer_player_spu.super.Color3usv( v );
}

static void PRINT_APIENTRY printColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha )
{
	catia_composer_player_spu.super.Color4b( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4bv( const GLbyte * v )
{
	catia_composer_player_spu.super.Color4bv( v );
}

static void PRINT_APIENTRY printColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha )
{
	catia_composer_player_spu.super.Color4d( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Color4dv( v );
}

static void PRINT_APIENTRY printColor4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
{
	catia_composer_player_spu.super.Color4f( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Color4fv( v );
}

static void PRINT_APIENTRY printColor4i( GLint red, GLint green, GLint blue, GLint alpha )
{
	catia_composer_player_spu.super.Color4i( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4iv( const GLint * v )
{
	catia_composer_player_spu.super.Color4iv( v );
}

static void PRINT_APIENTRY printColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha )
{
	catia_composer_player_spu.super.Color4s( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4sv( const GLshort * v )
{
	catia_composer_player_spu.super.Color4sv( v );
}

static void PRINT_APIENTRY printColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
{
	catia_composer_player_spu.super.Color4ub( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4ubv( const GLubyte * v )
{
	catia_composer_player_spu.super.Color4ubv( v );
}

static void PRINT_APIENTRY printColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha )
{
	catia_composer_player_spu.super.Color4ui( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4uiv( const GLuint * v )
{
	catia_composer_player_spu.super.Color4uiv( v );
}

static void PRINT_APIENTRY printColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha )
{
	catia_composer_player_spu.super.Color4us( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColor4usv( const GLushort * v )
{
	catia_composer_player_spu.super.Color4usv( v );
}

static void PRINT_APIENTRY printColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
{
	catia_composer_player_spu.super.ColorMask( red, green, blue, alpha );
}

static void PRINT_APIENTRY printColorMaterial( GLenum face, GLenum mode )
{
	catia_composer_player_spu.super.ColorMaterial( face, mode );
}

static void PRINT_APIENTRY printColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.ColorPointer( size, type, stride, pointer );
}

static void PRINT_APIENTRY printCombinerInputNV( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage )
{
	catia_composer_player_spu.super.CombinerInputNV( stage, portion, variable, input, mapping, componentUsage );
}

static void PRINT_APIENTRY printCombinerOutputNV( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum )
{
	catia_composer_player_spu.super.CombinerOutputNV( stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum );
}

static void PRINT_APIENTRY printCombinerParameterfNV( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.CombinerParameterfNV( pname, param );
}

static void PRINT_APIENTRY printCombinerParameterfvNV( GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.CombinerParameterfvNV( pname, params );
}

static void PRINT_APIENTRY printCombinerParameteriNV( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.CombinerParameteriNV( pname, param );
}

static void PRINT_APIENTRY printCombinerParameterivNV( GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.CombinerParameterivNV( pname, params );
}

static void PRINT_APIENTRY printCombinerStageParameterfvNV( GLenum stage, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.CombinerStageParameterfvNV( stage, pname, params );
}

static void PRINT_APIENTRY printCompressedTexImage1DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexImage1DARB( target, level, internalFormat, width, border, imagesize, data );
}

static void PRINT_APIENTRY printCompressedTexImage2DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexImage2DARB( target, level, internalFormat, width, height, border, imagesize, data );
}

static void PRINT_APIENTRY printCompressedTexImage3DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexImage3DARB( target, level, internalFormat, width, height, depth, border, imagesize, data );
}

static void PRINT_APIENTRY printCompressedTexSubImage1DARB( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexSubImage1DARB( target, level, xoffset, width, format, imagesize, data );
}

static void PRINT_APIENTRY printCompressedTexSubImage2DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexSubImage2DARB( target, level, xoffset, yoffset, width, height, format, imagesize, data );
}

static void PRINT_APIENTRY printCompressedTexSubImage3DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data )
{
	catia_composer_player_spu.super.CompressedTexSubImage3DARB( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imagesize, data );
}

static void PRINT_APIENTRY printCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type )
{
	catia_composer_player_spu.super.CopyPixels( x, y, width, height, type );
}

static void PRINT_APIENTRY printCopyTexImage1D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border )
{
	catia_composer_player_spu.super.CopyTexImage1D( target, level, internalFormat, x, y, width, border );
}

static void PRINT_APIENTRY printCopyTexImage2D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border )
{
	catia_composer_player_spu.super.CopyTexImage2D( target, level, internalFormat, x, y, width, height, border );
}

static void PRINT_APIENTRY printCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width )
{
	catia_composer_player_spu.super.CopyTexSubImage1D( target, level, xoffset, x, y, width );
}

static void PRINT_APIENTRY printCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height )
{
	catia_composer_player_spu.super.CopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height );
}

static void PRINT_APIENTRY printCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height )
{
	catia_composer_player_spu.super.CopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height );
}

static GLint PRINT_APIENTRY printCreateContext( const char * dpyName, GLint visual, GLint shareCtx )
{
	return catia_composer_player_spu.super.CreateContext( dpyName, visual, shareCtx );
}

static void PRINT_APIENTRY printCullFace( GLenum mode )
{
	catia_composer_player_spu.super.CullFace( mode );
}

static void PRINT_APIENTRY printDeleteBuffersARB( GLsizei n, const GLuint * buffer )
{
	catia_composer_player_spu.super.DeleteBuffersARB( n, buffer );
}

static void PRINT_APIENTRY printDeleteFencesNV( GLsizei n, const GLuint * fences )
{
	catia_composer_player_spu.super.DeleteFencesNV( n, fences );
}

static void PRINT_APIENTRY printDeleteLists( GLuint list, GLsizei range )
{
	catia_composer_player_spu.super.DeleteLists( list, range );
}

static void PRINT_APIENTRY printDeleteProgramsARB( GLsizei n, const GLuint * programs )
{
	catia_composer_player_spu.super.DeleteProgramsARB( n, programs );
}

static void PRINT_APIENTRY printDeleteQueriesARB( GLsizei n, const GLuint * ids )
{
	catia_composer_player_spu.super.DeleteQueriesARB( n, ids );
}

static void PRINT_APIENTRY printDeleteTextures( GLsizei n, const GLuint * textures )
{
	catia_composer_player_spu.super.DeleteTextures( n, textures );
}

static void PRINT_APIENTRY printDepthFunc( GLenum func )
{
	catia_composer_player_spu.super.DepthFunc( func );
}

static void PRINT_APIENTRY printDepthMask( GLboolean flag )
{
	catia_composer_player_spu.super.DepthMask( flag );
}

static void PRINT_APIENTRY printDepthRange( GLclampd zNear, GLclampd zFar )
{
	catia_composer_player_spu.super.DepthRange( zNear, zFar );
}

static void PRINT_APIENTRY printDestroyContext( GLint ctx )
{
	catia_composer_player_spu.super.DestroyContext( ctx );
}

static void PRINT_APIENTRY printDisable( GLenum cap )
{
	catia_composer_player_spu.super.Disable( cap );
}

static void PRINT_APIENTRY printDisableClientState( GLenum array )
{
	catia_composer_player_spu.super.DisableClientState( array );
}

static void PRINT_APIENTRY printDisableVertexAttribArrayARB( GLuint index )
{
	catia_composer_player_spu.super.DisableVertexAttribArrayARB( index );
}

static void PRINT_APIENTRY printDrawArrays( GLenum mode, GLint first, GLsizei count )
{
	catia_composer_player_spu.super.DrawArrays( mode, first, count );
}

static void PRINT_APIENTRY printDrawBuffer( GLenum mode )
{
	catia_composer_player_spu.super.DrawBuffer( mode );
}

static void PRINT_APIENTRY printDrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices )
{
	catia_composer_player_spu.super.DrawElements( mode, count, type, indices );
}

static void PRINT_APIENTRY printDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.DrawPixels( width, height, format, type, pixels );
}

static void PRINT_APIENTRY printDrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices )
{
	catia_composer_player_spu.super.DrawRangeElements( mode, start, end, count, type, indices );
}

static void PRINT_APIENTRY printEdgeFlag( GLboolean flag )
{
	catia_composer_player_spu.super.EdgeFlag( flag );
}

static void PRINT_APIENTRY printEdgeFlagPointer( GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.EdgeFlagPointer( stride, pointer );
}

static void PRINT_APIENTRY printEdgeFlagv( const GLboolean * flag )
{
	catia_composer_player_spu.super.EdgeFlagv( flag );
}

static void PRINT_APIENTRY printEnable( GLenum cap )
{
	catia_composer_player_spu.super.Enable( cap );
}

static void PRINT_APIENTRY printEnableClientState( GLenum array )
{
	catia_composer_player_spu.super.EnableClientState( array );
}

static void PRINT_APIENTRY printEnableVertexAttribArrayARB( GLuint index )
{
	catia_composer_player_spu.super.EnableVertexAttribArrayARB( index );
}

static void PRINT_APIENTRY printEnd( void )
{
	catia_composer_player_spu.super.End(  );
}

static void PRINT_APIENTRY printEndList( void )
{
	catia_composer_player_spu.super.EndList(  );
}

static void PRINT_APIENTRY printEndQueryARB( GLenum target )
{
	catia_composer_player_spu.super.EndQueryARB( target );
}

static void PRINT_APIENTRY printEvalCoord1d( GLdouble u )
{
	catia_composer_player_spu.super.EvalCoord1d( u );
}

static void PRINT_APIENTRY printEvalCoord1dv( const GLdouble * u )
{
	catia_composer_player_spu.super.EvalCoord1dv( u );
}

static void PRINT_APIENTRY printEvalCoord1f( GLfloat u )
{
	catia_composer_player_spu.super.EvalCoord1f( u );
}

static void PRINT_APIENTRY printEvalCoord1fv( const GLfloat * u )
{
	catia_composer_player_spu.super.EvalCoord1fv( u );
}

static void PRINT_APIENTRY printEvalCoord2d( GLdouble u, GLdouble v )
{
	catia_composer_player_spu.super.EvalCoord2d( u, v );
}

static void PRINT_APIENTRY printEvalCoord2dv( const GLdouble * u )
{
	catia_composer_player_spu.super.EvalCoord2dv( u );
}

static void PRINT_APIENTRY printEvalCoord2f( GLfloat u, GLfloat v )
{
	catia_composer_player_spu.super.EvalCoord2f( u, v );
}

static void PRINT_APIENTRY printEvalCoord2fv( const GLfloat * u )
{
	catia_composer_player_spu.super.EvalCoord2fv( u );
}

static void PRINT_APIENTRY printEvalMesh1( GLenum mode, GLint i1, GLint i2 )
{
	catia_composer_player_spu.super.EvalMesh1( mode, i1, i2 );
}

static void PRINT_APIENTRY printEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )
{
	catia_composer_player_spu.super.EvalMesh2( mode, i1, i2, j1, j2 );
}

static void PRINT_APIENTRY printEvalPoint1( GLint i )
{
	catia_composer_player_spu.super.EvalPoint1( i );
}

static void PRINT_APIENTRY printEvalPoint2( GLint i, GLint j )
{
	catia_composer_player_spu.super.EvalPoint2( i, j );
}

static void PRINT_APIENTRY printExecuteProgramNV( GLenum target, GLuint id, const GLfloat * params )
{
	catia_composer_player_spu.super.ExecuteProgramNV( target, id, params );
}

static void PRINT_APIENTRY printFeedbackBuffer( GLsizei size, GLenum type, GLfloat * buffer )
{
	catia_composer_player_spu.super.FeedbackBuffer( size, type, buffer );
}

static void PRINT_APIENTRY printFinalCombinerInputNV( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage )
{
	catia_composer_player_spu.super.FinalCombinerInputNV( variable, input, mapping, componentUsage );
}

static void PRINT_APIENTRY printFinish( void )
{
	catia_composer_player_spu.super.Finish(  );
}

static void PRINT_APIENTRY printFinishFenceNV( GLuint fence )
{
	catia_composer_player_spu.super.FinishFenceNV( fence );
}

static void PRINT_APIENTRY printFlush( void )
{
	catia_composer_player_spu.super.Flush(  );
}

static void PRINT_APIENTRY printFlushVertexArrayRangeNV( void )
{
	catia_composer_player_spu.super.FlushVertexArrayRangeNV(  );
}

static void PRINT_APIENTRY printFogCoordPointerEXT( GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.FogCoordPointerEXT( type, stride, pointer );
}

static void PRINT_APIENTRY printFogCoorddEXT( GLdouble coord )
{
	catia_composer_player_spu.super.FogCoorddEXT( coord );
}

static void PRINT_APIENTRY printFogCoorddvEXT( const GLdouble * coord )
{
	catia_composer_player_spu.super.FogCoorddvEXT( coord );
}

static void PRINT_APIENTRY printFogCoordfEXT( GLfloat coord )
{
	catia_composer_player_spu.super.FogCoordfEXT( coord );
}

static void PRINT_APIENTRY printFogCoordfvEXT( const GLfloat * coord )
{
	catia_composer_player_spu.super.FogCoordfvEXT( coord );
}

static void PRINT_APIENTRY printFogf( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.Fogf( pname, param );
}

static void PRINT_APIENTRY printFogfv( GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.Fogfv( pname, params );
}

static void PRINT_APIENTRY printFogi( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.Fogi( pname, param );
}

static void PRINT_APIENTRY printFogiv( GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.Fogiv( pname, params );
}

static void PRINT_APIENTRY printFrontFace( GLenum mode )
{
	catia_composer_player_spu.super.FrontFace( mode );
}

static void PRINT_APIENTRY printFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar )
{
	catia_composer_player_spu.super.Frustum( left, right, bottom, top, zNear, zFar );
}

static void PRINT_APIENTRY printGenBuffersARB( GLsizei n, GLuint * buffer )
{
	catia_composer_player_spu.super.GenBuffersARB( n, buffer );
}

static void PRINT_APIENTRY printGenFencesNV( GLsizei n, GLuint * fences )
{
	catia_composer_player_spu.super.GenFencesNV( n, fences );
}

static GLuint PRINT_APIENTRY printGenLists( GLsizei range )
{
	return catia_composer_player_spu.super.GenLists( range );
}

static void PRINT_APIENTRY printGenProgramsARB( GLsizei n, GLuint * programs )
{
	catia_composer_player_spu.super.GenProgramsARB( n, programs );
}

static void PRINT_APIENTRY printGenProgramsNV( GLsizei n, GLuint * ids )
{
	catia_composer_player_spu.super.GenProgramsNV( n, ids );
}

static void PRINT_APIENTRY printGenQueriesARB( GLsizei n, GLuint * ids )
{
	catia_composer_player_spu.super.GenQueriesARB( n, ids );
}

static void PRINT_APIENTRY printGenTextures( GLsizei n, GLuint * textures )
{
	catia_composer_player_spu.super.GenTextures( n, textures );
}

static void PRINT_APIENTRY printGetBooleanv( GLenum pname, GLboolean * params )
{
	catia_composer_player_spu.super.GetBooleanv( pname, params );
}

static void PRINT_APIENTRY printGetBufferParameterivARB( GLenum target, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetBufferParameterivARB( target, pname, params );
}

static void PRINT_APIENTRY printGetBufferPointervARB( GLenum target, GLenum pname, GLvoid ** params )
{
	catia_composer_player_spu.super.GetBufferPointervARB( target, pname, params );
}

static void PRINT_APIENTRY printGetBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data )
{
	catia_composer_player_spu.super.GetBufferSubDataARB( target, offset, size, data );
}

static void PRINT_APIENTRY printGetChromiumParametervCR( GLenum target, GLuint index, GLenum type, GLsizei count, GLvoid * values )
{
	catia_composer_player_spu.super.GetChromiumParametervCR( target, index, type, count, values );
}

static void PRINT_APIENTRY printGetClipPlane( GLenum plane, GLdouble * equation )
{
	catia_composer_player_spu.super.GetClipPlane( plane, equation );
}

static void PRINT_APIENTRY printGetCombinerInputParameterfvNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetCombinerInputParameterfvNV( stage, portion, variable, pname, params );
}

static void PRINT_APIENTRY printGetCombinerInputParameterivNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetCombinerInputParameterivNV( stage, portion, variable, pname, params );
}

static void PRINT_APIENTRY printGetCombinerOutputParameterfvNV( GLenum stage, GLenum portion, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetCombinerOutputParameterfvNV( stage, portion, pname, params );
}

static void PRINT_APIENTRY printGetCombinerOutputParameterivNV( GLenum stage, GLenum portion, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetCombinerOutputParameterivNV( stage, portion, pname, params );
}

static void PRINT_APIENTRY printGetCombinerStageParameterfvNV( GLenum stage, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetCombinerStageParameterfvNV( stage, pname, params );
}

static void PRINT_APIENTRY printGetCompressedTexImageARB( GLenum target, GLint level, GLvoid * img )
{
	catia_composer_player_spu.super.GetCompressedTexImageARB( target, level, img );
}

static void PRINT_APIENTRY printGetDoublev( GLenum pname, GLdouble * params )
{
	catia_composer_player_spu.super.GetDoublev( pname, params );
}

static GLenum PRINT_APIENTRY printGetError( void )
{
	return catia_composer_player_spu.super.GetError(  );
}

static void PRINT_APIENTRY printGetFenceivNV( GLuint fence, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetFenceivNV( fence, pname, params );
}

static void PRINT_APIENTRY printGetFinalCombinerInputParameterfvNV( GLenum variable, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetFinalCombinerInputParameterfvNV( variable, pname, params );
}

static void PRINT_APIENTRY printGetFinalCombinerInputParameterivNV( GLenum variable, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetFinalCombinerInputParameterivNV( variable, pname, params );
}

static void PRINT_APIENTRY printGetFloatv( GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetFloatv( pname, params );
}

static void PRINT_APIENTRY printGetIntegerv( GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetIntegerv( pname, params );
}

static void PRINT_APIENTRY printGetLightfv( GLenum light, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetLightfv( light, pname, params );
}

static void PRINT_APIENTRY printGetLightiv( GLenum light, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetLightiv( light, pname, params );
}

static void PRINT_APIENTRY printGetMapdv( GLenum target, GLenum query, GLdouble * v )
{
	catia_composer_player_spu.super.GetMapdv( target, query, v );
}

static void PRINT_APIENTRY printGetMapfv( GLenum target, GLenum query, GLfloat * v )
{
	catia_composer_player_spu.super.GetMapfv( target, query, v );
}

static void PRINT_APIENTRY printGetMapiv( GLenum target, GLenum query, GLint * v )
{
	catia_composer_player_spu.super.GetMapiv( target, query, v );
}

static void PRINT_APIENTRY printGetMaterialfv( GLenum face, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetMaterialfv( face, pname, params );
}

static void PRINT_APIENTRY printGetMaterialiv( GLenum face, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetMaterialiv( face, pname, params );
}

static void PRINT_APIENTRY printGetPixelMapfv( GLenum map, GLfloat * values )
{
	catia_composer_player_spu.super.GetPixelMapfv( map, values );
}

static void PRINT_APIENTRY printGetPixelMapuiv( GLenum map, GLuint * values )
{
	catia_composer_player_spu.super.GetPixelMapuiv( map, values );
}

static void PRINT_APIENTRY printGetPixelMapusv( GLenum map, GLushort * values )
{
	catia_composer_player_spu.super.GetPixelMapusv( map, values );
}

static void PRINT_APIENTRY printGetPointerv( GLenum pname, GLvoid ** params )
{
	catia_composer_player_spu.super.GetPointerv( pname, params );
}

static void PRINT_APIENTRY printGetPolygonStipple( GLubyte * mask )
{
	catia_composer_player_spu.super.GetPolygonStipple( mask );
}

static void PRINT_APIENTRY printGetProgramEnvParameterdvARB( GLenum target, GLuint index, GLdouble * params )
{
	catia_composer_player_spu.super.GetProgramEnvParameterdvARB( target, index, params );
}

static void PRINT_APIENTRY printGetProgramEnvParameterfvARB( GLenum target, GLuint index, GLfloat * params )
{
	catia_composer_player_spu.super.GetProgramEnvParameterfvARB( target, index, params );
}

static void PRINT_APIENTRY printGetProgramLocalParameterdvARB( GLenum target, GLuint index, GLdouble * params )
{
	catia_composer_player_spu.super.GetProgramLocalParameterdvARB( target, index, params );
}

static void PRINT_APIENTRY printGetProgramLocalParameterfvARB( GLenum target, GLuint index, GLfloat * params )
{
	catia_composer_player_spu.super.GetProgramLocalParameterfvARB( target, index, params );
}

static void PRINT_APIENTRY printGetProgramNamedParameterdvNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble * params )
{
	catia_composer_player_spu.super.GetProgramNamedParameterdvNV( id, len, name, params );
}

static void PRINT_APIENTRY printGetProgramNamedParameterfvNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat * params )
{
	catia_composer_player_spu.super.GetProgramNamedParameterfvNV( id, len, name, params );
}

static void PRINT_APIENTRY printGetProgramParameterdvNV( GLenum target, GLuint index, GLenum pname, GLdouble * params )
{
	catia_composer_player_spu.super.GetProgramParameterdvNV( target, index, pname, params );
}

static void PRINT_APIENTRY printGetProgramParameterfvNV( GLenum target, GLuint index, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetProgramParameterfvNV( target, index, pname, params );
}

static void PRINT_APIENTRY printGetProgramStringARB( GLenum target, GLenum pname, GLvoid * string )
{
	catia_composer_player_spu.super.GetProgramStringARB( target, pname, string );
}

static void PRINT_APIENTRY printGetProgramStringNV( GLuint id, GLenum pname, GLubyte * program )
{
	catia_composer_player_spu.super.GetProgramStringNV( id, pname, program );
}

static void PRINT_APIENTRY printGetProgramivARB( GLenum target, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetProgramivARB( target, pname, params );
}

static void PRINT_APIENTRY printGetProgramivNV( GLuint id, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetProgramivNV( id, pname, params );
}

static void PRINT_APIENTRY printGetQueryObjectivARB( GLuint id, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetQueryObjectivARB( id, pname, params );
}

static void PRINT_APIENTRY printGetQueryObjectuivARB( GLuint id, GLenum pname, GLuint * params )
{
	catia_composer_player_spu.super.GetQueryObjectuivARB( id, pname, params );
}

static void PRINT_APIENTRY printGetQueryivARB( GLenum target, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetQueryivARB( target, pname, params );
}

static const GLubyte * PRINT_APIENTRY printGetString( GLenum name )
{
	return catia_composer_player_spu.super.GetString( name );
}

static void PRINT_APIENTRY printGetTexEnvfv( GLenum target, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetTexEnvfv( target, pname, params );
}

static void PRINT_APIENTRY printGetTexEnviv( GLenum target, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetTexEnviv( target, pname, params );
}

static void PRINT_APIENTRY printGetTexGendv( GLenum coord, GLenum pname, GLdouble * params )
{
	catia_composer_player_spu.super.GetTexGendv( coord, pname, params );
}

static void PRINT_APIENTRY printGetTexGenfv( GLenum coord, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetTexGenfv( coord, pname, params );
}

static void PRINT_APIENTRY printGetTexGeniv( GLenum coord, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetTexGeniv( coord, pname, params );
}

static void PRINT_APIENTRY printGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels )
{
	catia_composer_player_spu.super.GetTexImage( target, level, format, type, pixels );
}

static void PRINT_APIENTRY printGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetTexLevelParameterfv( target, level, pname, params );
}

static void PRINT_APIENTRY printGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetTexLevelParameteriv( target, level, pname, params );
}

static void PRINT_APIENTRY printGetTexParameterfv( GLenum target, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetTexParameterfv( target, pname, params );
}

static void PRINT_APIENTRY printGetTexParameteriv( GLenum target, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetTexParameteriv( target, pname, params );
}

static void PRINT_APIENTRY printGetTrackMatrixivNV( GLenum target, GLuint address, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetTrackMatrixivNV( target, address, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribPointervARB( GLuint index, GLenum pname, GLvoid ** pointer )
{
	catia_composer_player_spu.super.GetVertexAttribPointervARB( index, pname, pointer );
}

static void PRINT_APIENTRY printGetVertexAttribPointervNV( GLuint index, GLenum pname, GLvoid ** pointer )
{
	catia_composer_player_spu.super.GetVertexAttribPointervNV( index, pname, pointer );
}

static void PRINT_APIENTRY printGetVertexAttribdvARB( GLuint index, GLenum pname, GLdouble * params )
{
	catia_composer_player_spu.super.GetVertexAttribdvARB( index, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribdvNV( GLuint index, GLenum pname, GLdouble * params )
{
	catia_composer_player_spu.super.GetVertexAttribdvNV( index, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribfvARB( GLuint index, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetVertexAttribfvARB( index, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribfvNV( GLuint index, GLenum pname, GLfloat * params )
{
	catia_composer_player_spu.super.GetVertexAttribfvNV( index, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribivARB( GLuint index, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetVertexAttribivARB( index, pname, params );
}

static void PRINT_APIENTRY printGetVertexAttribivNV( GLuint index, GLenum pname, GLint * params )
{
	catia_composer_player_spu.super.GetVertexAttribivNV( index, pname, params );
}

static void PRINT_APIENTRY printHint( GLenum target, GLenum mode )
{
	catia_composer_player_spu.super.Hint( target, mode );
}

static void PRINT_APIENTRY printIndexMask( GLuint mask )
{
	catia_composer_player_spu.super.IndexMask( mask );
}

static void PRINT_APIENTRY printIndexPointer( GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.IndexPointer( type, stride, pointer );
}

static void PRINT_APIENTRY printIndexd( GLdouble c )
{
	catia_composer_player_spu.super.Indexd( c );
}

static void PRINT_APIENTRY printIndexdv( const GLdouble * c )
{
	catia_composer_player_spu.super.Indexdv( c );
}

static void PRINT_APIENTRY printIndexf( GLfloat c )
{
	catia_composer_player_spu.super.Indexf( c );
}

static void PRINT_APIENTRY printIndexfv( const GLfloat * c )
{
	catia_composer_player_spu.super.Indexfv( c );
}

static void PRINT_APIENTRY printIndexi( GLint c )
{
	catia_composer_player_spu.super.Indexi( c );
}

static void PRINT_APIENTRY printIndexiv( const GLint * c )
{
	catia_composer_player_spu.super.Indexiv( c );
}

static void PRINT_APIENTRY printIndexs( GLshort c )
{
	catia_composer_player_spu.super.Indexs( c );
}

static void PRINT_APIENTRY printIndexsv( const GLshort * c )
{
	catia_composer_player_spu.super.Indexsv( c );
}

static void PRINT_APIENTRY printIndexub( GLubyte c )
{
	catia_composer_player_spu.super.Indexub( c );
}

static void PRINT_APIENTRY printIndexubv( const GLubyte * c )
{
	catia_composer_player_spu.super.Indexubv( c );
}

static void PRINT_APIENTRY printInitNames( void )
{
	catia_composer_player_spu.super.InitNames(  );
}

static void PRINT_APIENTRY printInterleavedArrays( GLenum format, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.InterleavedArrays( format, stride, pointer );
}

static GLboolean PRINT_APIENTRY printIsBufferARB( GLuint buffer )
{
	return catia_composer_player_spu.super.IsBufferARB( buffer );
}

static GLboolean PRINT_APIENTRY printIsEnabled( GLenum cap )
{
	return catia_composer_player_spu.super.IsEnabled( cap );
}

static GLboolean PRINT_APIENTRY printIsFenceNV( GLuint fence )
{
	return catia_composer_player_spu.super.IsFenceNV( fence );
}

static GLboolean PRINT_APIENTRY printIsList( GLuint list )
{
	return catia_composer_player_spu.super.IsList( list );
}

static GLboolean PRINT_APIENTRY printIsProgramARB( GLuint program )
{
	return catia_composer_player_spu.super.IsProgramARB( program );
}

static GLboolean PRINT_APIENTRY printIsQueryARB( GLuint id )
{
	return catia_composer_player_spu.super.IsQueryARB( id );
}

static GLboolean PRINT_APIENTRY printIsTexture( GLuint texture )
{
	return catia_composer_player_spu.super.IsTexture( texture );
}

static void PRINT_APIENTRY printLightModelf( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.LightModelf( pname, param );
}

static void PRINT_APIENTRY printLightModelfv( GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.LightModelfv( pname, params );
}

static void PRINT_APIENTRY printLightModeli( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.LightModeli( pname, param );
}

static void PRINT_APIENTRY printLightModeliv( GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.LightModeliv( pname, params );
}

static void PRINT_APIENTRY printLightf( GLenum light, GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.Lightf( light, pname, param );
}

static void PRINT_APIENTRY printLightfv( GLenum light, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.Lightfv( light, pname, params );
}

static void PRINT_APIENTRY printLighti( GLenum light, GLenum pname, GLint param )
{
	catia_composer_player_spu.super.Lighti( light, pname, param );
}

static void PRINT_APIENTRY printLightiv( GLenum light, GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.Lightiv( light, pname, params );
}

static void PRINT_APIENTRY printLineStipple( GLint factor, GLushort pattern )
{
	catia_composer_player_spu.super.LineStipple( factor, pattern );
}

static void PRINT_APIENTRY printLineWidth( GLfloat width )
{
	catia_composer_player_spu.super.LineWidth( width );
}

static void PRINT_APIENTRY printListBase( GLuint base )
{
	catia_composer_player_spu.super.ListBase( base );
}

static void PRINT_APIENTRY printLoadIdentity( void )
{
	catia_composer_player_spu.super.LoadIdentity(  );
}

static void PRINT_APIENTRY printLoadMatrixd( const GLdouble * m )
{
	catia_composer_player_spu.super.LoadMatrixd( m );
}

static void PRINT_APIENTRY printLoadMatrixf( const GLfloat * m )
{
	catia_composer_player_spu.super.LoadMatrixf( m );
}

static void PRINT_APIENTRY printLoadName( GLuint name )
{
	catia_composer_player_spu.super.LoadName( name );
}

static void PRINT_APIENTRY printLoadProgramNV( GLenum target, GLuint id, GLsizei len, const GLubyte * program )
{
	catia_composer_player_spu.super.LoadProgramNV( target, id, len, program );
}

static void PRINT_APIENTRY printLoadTransposeMatrixdARB( const GLdouble * m )
{
	catia_composer_player_spu.super.LoadTransposeMatrixdARB( m );
}

static void PRINT_APIENTRY printLoadTransposeMatrixfARB( const GLfloat * m )
{
	catia_composer_player_spu.super.LoadTransposeMatrixfARB( m );
}

static void PRINT_APIENTRY printLogicOp( GLenum opcode )
{
	catia_composer_player_spu.super.LogicOp( opcode );
}

static void PRINT_APIENTRY printMakeCurrent( GLint window, GLint nativeWindow, GLint ctx )
{
	catia_composer_player_spu.super.MakeCurrent( window, nativeWindow, ctx );
}

static void PRINT_APIENTRY printMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points )
{
	catia_composer_player_spu.super.Map1d( target, u1, u2, stride, order, points );
}

static void PRINT_APIENTRY printMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points )
{
	catia_composer_player_spu.super.Map1f( target, u1, u2, stride, order, points );
}

static void PRINT_APIENTRY printMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points )
{
	catia_composer_player_spu.super.Map2d( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
}

static void PRINT_APIENTRY printMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points )
{
	catia_composer_player_spu.super.Map2f( target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
}

static void * PRINT_APIENTRY printMapBufferARB( GLenum target, GLenum access )
{
	return catia_composer_player_spu.super.MapBufferARB( target, access );
}

static void PRINT_APIENTRY printMapGrid1d( GLint un, GLdouble u1, GLdouble u2 )
{
	catia_composer_player_spu.super.MapGrid1d( un, u1, u2 );
}

static void PRINT_APIENTRY printMapGrid1f( GLint un, GLfloat u1, GLfloat u2 )
{
	catia_composer_player_spu.super.MapGrid1f( un, u1, u2 );
}

static void PRINT_APIENTRY printMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 )
{
	catia_composer_player_spu.super.MapGrid2d( un, u1, u2, vn, v1, v2 );
}

static void PRINT_APIENTRY printMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 )
{
	catia_composer_player_spu.super.MapGrid2f( un, u1, u2, vn, v1, v2 );
}

static void PRINT_APIENTRY printMaterialf( GLenum face, GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.Materialf( face, pname, param );
}

static void PRINT_APIENTRY printMaterialfv( GLenum face, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.Materialfv( face, pname, params );
}

static void PRINT_APIENTRY printMateriali( GLenum face, GLenum pname, GLint param )
{
	catia_composer_player_spu.super.Materiali( face, pname, param );
}

static void PRINT_APIENTRY printMaterialiv( GLenum face, GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.Materialiv( face, pname, params );
}

static void PRINT_APIENTRY printMatrixMode( GLenum mode )
{
	catia_composer_player_spu.super.MatrixMode( mode );
}

static void PRINT_APIENTRY printMultMatrixd( const GLdouble * m )
{
	catia_composer_player_spu.super.MultMatrixd( m );
}

static void PRINT_APIENTRY printMultMatrixf( const GLfloat * m )
{
	catia_composer_player_spu.super.MultMatrixf( m );
}

static void PRINT_APIENTRY printMultTransposeMatrixdARB( const GLdouble * m )
{
	catia_composer_player_spu.super.MultTransposeMatrixdARB( m );
}

static void PRINT_APIENTRY printMultTransposeMatrixfARB( const GLfloat * m )
{
	catia_composer_player_spu.super.MultTransposeMatrixfARB( m );
}

static void PRINT_APIENTRY printMultiDrawArraysEXT( GLenum mode, GLint * first, GLsizei * count, GLsizei primcount )
{
	catia_composer_player_spu.super.MultiDrawArraysEXT( mode, first, count, primcount );
}

static void PRINT_APIENTRY printMultiDrawElementsEXT( GLenum mode, const GLsizei * count, GLenum type, const GLvoid ** indices, GLsizei primcount )
{
	catia_composer_player_spu.super.MultiDrawElementsEXT( mode, count, type, indices, primcount );
}

static void PRINT_APIENTRY printMultiTexCoord1dARB( GLenum texture, GLdouble s )
{
	catia_composer_player_spu.super.MultiTexCoord1dARB( texture, s );
}

static void PRINT_APIENTRY printMultiTexCoord1dvARB( GLenum texture, const GLdouble * t )
{
	catia_composer_player_spu.super.MultiTexCoord1dvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord1fARB( GLenum texture, GLfloat s )
{
	catia_composer_player_spu.super.MultiTexCoord1fARB( texture, s );
}

static void PRINT_APIENTRY printMultiTexCoord1fvARB( GLenum texture, const GLfloat * t )
{
	catia_composer_player_spu.super.MultiTexCoord1fvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord1iARB( GLenum texture, GLint s )
{
	catia_composer_player_spu.super.MultiTexCoord1iARB( texture, s );
}

static void PRINT_APIENTRY printMultiTexCoord1ivARB( GLenum texture, const GLint * t )
{
	catia_composer_player_spu.super.MultiTexCoord1ivARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord1sARB( GLenum texture, GLshort s )
{
	catia_composer_player_spu.super.MultiTexCoord1sARB( texture, s );
}

static void PRINT_APIENTRY printMultiTexCoord1svARB( GLenum texture, const GLshort * t )
{
	catia_composer_player_spu.super.MultiTexCoord1svARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord2dARB( GLenum texture, GLdouble s, GLdouble t )
{
	catia_composer_player_spu.super.MultiTexCoord2dARB( texture, s, t );
}

static void PRINT_APIENTRY printMultiTexCoord2dvARB( GLenum texture, const GLdouble * t )
{
	catia_composer_player_spu.super.MultiTexCoord2dvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord2fARB( GLenum texture, GLfloat s, GLfloat t )
{
	catia_composer_player_spu.super.MultiTexCoord2fARB( texture, s, t );
}

static void PRINT_APIENTRY printMultiTexCoord2fvARB( GLenum texture, const GLfloat * t )
{
	catia_composer_player_spu.super.MultiTexCoord2fvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord2iARB( GLenum texture, GLint s, GLint t )
{
	catia_composer_player_spu.super.MultiTexCoord2iARB( texture, s, t );
}

static void PRINT_APIENTRY printMultiTexCoord2ivARB( GLenum texture, const GLint * t )
{
	catia_composer_player_spu.super.MultiTexCoord2ivARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord2sARB( GLenum texture, GLshort s, GLshort t )
{
	catia_composer_player_spu.super.MultiTexCoord2sARB( texture, s, t );
}

static void PRINT_APIENTRY printMultiTexCoord2svARB( GLenum texture, const GLshort * t )
{
	catia_composer_player_spu.super.MultiTexCoord2svARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord3dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r )
{
	catia_composer_player_spu.super.MultiTexCoord3dARB( texture, s, t, r );
}

static void PRINT_APIENTRY printMultiTexCoord3dvARB( GLenum texture, const GLdouble * t )
{
	catia_composer_player_spu.super.MultiTexCoord3dvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord3fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r )
{
	catia_composer_player_spu.super.MultiTexCoord3fARB( texture, s, t, r );
}

static void PRINT_APIENTRY printMultiTexCoord3fvARB( GLenum texture, const GLfloat * t )
{
	catia_composer_player_spu.super.MultiTexCoord3fvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord3iARB( GLenum texture, GLint s, GLint t, GLint r )
{
	catia_composer_player_spu.super.MultiTexCoord3iARB( texture, s, t, r );
}

static void PRINT_APIENTRY printMultiTexCoord3ivARB( GLenum texture, const GLint * t )
{
	catia_composer_player_spu.super.MultiTexCoord3ivARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord3sARB( GLenum texture, GLshort s, GLshort t, GLshort r )
{
	catia_composer_player_spu.super.MultiTexCoord3sARB( texture, s, t, r );
}

static void PRINT_APIENTRY printMultiTexCoord3svARB( GLenum texture, const GLshort * t )
{
	catia_composer_player_spu.super.MultiTexCoord3svARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord4dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r, GLdouble q )
{
	catia_composer_player_spu.super.MultiTexCoord4dARB( texture, s, t, r, q );
}

static void PRINT_APIENTRY printMultiTexCoord4dvARB( GLenum texture, const GLdouble * t )
{
	catia_composer_player_spu.super.MultiTexCoord4dvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord4fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r, GLfloat q )
{
	catia_composer_player_spu.super.MultiTexCoord4fARB( texture, s, t, r, q );
}

static void PRINT_APIENTRY printMultiTexCoord4fvARB( GLenum texture, const GLfloat * t )
{
	catia_composer_player_spu.super.MultiTexCoord4fvARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord4iARB( GLenum texture, GLint s, GLint t, GLint r, GLint q )
{
	catia_composer_player_spu.super.MultiTexCoord4iARB( texture, s, t, r, q );
}

static void PRINT_APIENTRY printMultiTexCoord4ivARB( GLenum texture, const GLint * t )
{
	catia_composer_player_spu.super.MultiTexCoord4ivARB( texture, t );
}

static void PRINT_APIENTRY printMultiTexCoord4sARB( GLenum texture, GLshort s, GLshort t, GLshort r, GLshort q )
{
	catia_composer_player_spu.super.MultiTexCoord4sARB( texture, s, t, r, q );
}

static void PRINT_APIENTRY printMultiTexCoord4svARB( GLenum texture, const GLshort * t )
{
	catia_composer_player_spu.super.MultiTexCoord4svARB( texture, t );
}

static void PRINT_APIENTRY printNewList( GLuint list, GLenum mode )
{
	catia_composer_player_spu.super.NewList( list, mode );
}

static void PRINT_APIENTRY printNormal3b( GLbyte nx, GLbyte ny, GLbyte nz )
{
	catia_composer_player_spu.super.Normal3b( nx, ny, nz );
}

static void PRINT_APIENTRY printNormal3bv( const GLbyte * v )
{
	catia_composer_player_spu.super.Normal3bv( v );
}

static void PRINT_APIENTRY printNormal3d( GLdouble nx, GLdouble ny, GLdouble nz )
{
	catia_composer_player_spu.super.Normal3d( nx, ny, nz );
}

static void PRINT_APIENTRY printNormal3dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Normal3dv( v );
}

static void PRINT_APIENTRY printNormal3f( GLfloat nx, GLfloat ny, GLfloat nz )
{
	catia_composer_player_spu.super.Normal3f( nx, ny, nz );
}

static void PRINT_APIENTRY printNormal3fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Normal3fv( v );
}

static void PRINT_APIENTRY printNormal3i( GLint nx, GLint ny, GLint nz )
{
	catia_composer_player_spu.super.Normal3i( nx, ny, nz );
}

static void PRINT_APIENTRY printNormal3iv( const GLint * v )
{
	catia_composer_player_spu.super.Normal3iv( v );
}

static void PRINT_APIENTRY printNormal3s( GLshort nx, GLshort ny, GLshort nz )
{
	catia_composer_player_spu.super.Normal3s( nx, ny, nz );
}

static void PRINT_APIENTRY printNormal3sv( const GLshort * v )
{
	catia_composer_player_spu.super.Normal3sv( v );
}

static void PRINT_APIENTRY printNormalPointer( GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.NormalPointer( type, stride, pointer );
}

static void PRINT_APIENTRY printOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar )
{
	catia_composer_player_spu.super.Ortho( left, right, bottom, top, zNear, zFar );
}

static void PRINT_APIENTRY printPassThrough( GLfloat token )
{
	catia_composer_player_spu.super.PassThrough( token );
}

static void PRINT_APIENTRY printPixelMapfv( GLenum map, GLsizei mapsize, const GLfloat * values )
{
	catia_composer_player_spu.super.PixelMapfv( map, mapsize, values );
}

static void PRINT_APIENTRY printPixelMapuiv( GLenum map, GLsizei mapsize, const GLuint * values )
{
	catia_composer_player_spu.super.PixelMapuiv( map, mapsize, values );
}

static void PRINT_APIENTRY printPixelMapusv( GLenum map, GLsizei mapsize, const GLushort * values )
{
	catia_composer_player_spu.super.PixelMapusv( map, mapsize, values );
}

static void PRINT_APIENTRY printPixelStoref( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.PixelStoref( pname, param );
}

static void PRINT_APIENTRY printPixelStorei( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.PixelStorei( pname, param );
}

static void PRINT_APIENTRY printPixelTransferf( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.PixelTransferf( pname, param );
}

static void PRINT_APIENTRY printPixelTransferi( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.PixelTransferi( pname, param );
}

static void PRINT_APIENTRY printPixelZoom( GLfloat xfactor, GLfloat yfactor )
{
	catia_composer_player_spu.super.PixelZoom( xfactor, yfactor );
}

static void PRINT_APIENTRY printPointParameterfARB( GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.PointParameterfARB( pname, param );
}

static void PRINT_APIENTRY printPointParameterfvARB( GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.PointParameterfvARB( pname, params );
}

static void PRINT_APIENTRY printPointParameteri( GLenum pname, GLint param )
{
	catia_composer_player_spu.super.PointParameteri( pname, param );
}

static void PRINT_APIENTRY printPointParameteriv( GLenum pname, const GLint * param )
{
	catia_composer_player_spu.super.PointParameteriv( pname, param );
}

static void PRINT_APIENTRY printPointSize( GLfloat size )
{
	catia_composer_player_spu.super.PointSize( size );
}

static void PRINT_APIENTRY printPolygonMode( GLenum face, GLenum mode )
{
	catia_composer_player_spu.super.PolygonMode( face, mode );
}

static void PRINT_APIENTRY printPolygonOffset( GLfloat factor, GLfloat units )
{
	catia_composer_player_spu.super.PolygonOffset( factor, units );
}

static void PRINT_APIENTRY printPolygonStipple( const GLubyte * mask )
{
	catia_composer_player_spu.super.PolygonStipple( mask );
}

static void PRINT_APIENTRY printPopAttrib( void )
{
	catia_composer_player_spu.super.PopAttrib(  );
}

static void PRINT_APIENTRY printPopClientAttrib( void )
{
	catia_composer_player_spu.super.PopClientAttrib(  );
}

static void PRINT_APIENTRY printPopMatrix( void )
{
	catia_composer_player_spu.super.PopMatrix(  );
}

static void PRINT_APIENTRY printPopName( void )
{
	catia_composer_player_spu.super.PopName(  );
}

static void PRINT_APIENTRY printPrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities )
{
	catia_composer_player_spu.super.PrioritizeTextures( n, textures, priorities );
}

static void PRINT_APIENTRY printProgramEnvParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.ProgramEnvParameter4dARB( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramEnvParameter4dvARB( GLenum target, GLuint index, const GLdouble * params )
{
	catia_composer_player_spu.super.ProgramEnvParameter4dvARB( target, index, params );
}

static void PRINT_APIENTRY printProgramEnvParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.ProgramEnvParameter4fARB( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramEnvParameter4fvARB( GLenum target, GLuint index, const GLfloat * params )
{
	catia_composer_player_spu.super.ProgramEnvParameter4fvARB( target, index, params );
}

static void PRINT_APIENTRY printProgramLocalParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.ProgramLocalParameter4dARB( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramLocalParameter4dvARB( GLenum target, GLuint index, const GLdouble * params )
{
	catia_composer_player_spu.super.ProgramLocalParameter4dvARB( target, index, params );
}

static void PRINT_APIENTRY printProgramLocalParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.ProgramLocalParameter4fARB( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramLocalParameter4fvARB( GLenum target, GLuint index, const GLfloat * params )
{
	catia_composer_player_spu.super.ProgramLocalParameter4fvARB( target, index, params );
}

static void PRINT_APIENTRY printProgramNamedParameter4dNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.ProgramNamedParameter4dNV( id, len, name, x, y, z, w );
}

static void PRINT_APIENTRY printProgramNamedParameter4dvNV( GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v )
{
	catia_composer_player_spu.super.ProgramNamedParameter4dvNV( id, len, name, v );
}

static void PRINT_APIENTRY printProgramNamedParameter4fNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.ProgramNamedParameter4fNV( id, len, name, x, y, z, w );
}

static void PRINT_APIENTRY printProgramNamedParameter4fvNV( GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v )
{
	catia_composer_player_spu.super.ProgramNamedParameter4fvNV( id, len, name, v );
}

static void PRINT_APIENTRY printProgramParameter4dNV( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.ProgramParameter4dNV( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramParameter4dvNV( GLenum target, GLuint index, const GLdouble * params )
{
	catia_composer_player_spu.super.ProgramParameter4dvNV( target, index, params );
}

static void PRINT_APIENTRY printProgramParameter4fNV( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.ProgramParameter4fNV( target, index, x, y, z, w );
}

static void PRINT_APIENTRY printProgramParameter4fvNV( GLenum target, GLuint index, const GLfloat * params )
{
	catia_composer_player_spu.super.ProgramParameter4fvNV( target, index, params );
}

static void PRINT_APIENTRY printProgramParameters4dvNV( GLenum target, GLuint index, GLuint num, const GLdouble * params )
{
	catia_composer_player_spu.super.ProgramParameters4dvNV( target, index, num, params );
}

static void PRINT_APIENTRY printProgramParameters4fvNV( GLenum target, GLuint index, GLuint num, const GLfloat * params )
{
	catia_composer_player_spu.super.ProgramParameters4fvNV( target, index, num, params );
}

static void PRINT_APIENTRY printProgramStringARB( GLenum target, GLenum format, GLsizei len, const GLvoid * string )
{
	catia_composer_player_spu.super.ProgramStringARB( target, format, len, string );
}

static void PRINT_APIENTRY printPushAttrib( GLbitfield mask )
{
	catia_composer_player_spu.super.PushAttrib( mask );
}

static void PRINT_APIENTRY printPushClientAttrib( GLbitfield mask )
{
	catia_composer_player_spu.super.PushClientAttrib( mask );
}

static void PRINT_APIENTRY printPushMatrix( void )
{
	catia_composer_player_spu.super.PushMatrix(  );
}

static void PRINT_APIENTRY printPushName( GLuint name )
{
	catia_composer_player_spu.super.PushName( name );
}

static void PRINT_APIENTRY printRasterPos2d( GLdouble x, GLdouble y )
{
	catia_composer_player_spu.super.RasterPos2d( x, y );
}

static void PRINT_APIENTRY printRasterPos2dv( const GLdouble * v )
{
	catia_composer_player_spu.super.RasterPos2dv( v );
}

static void PRINT_APIENTRY printRasterPos2f( GLfloat x, GLfloat y )
{
	catia_composer_player_spu.super.RasterPos2f( x, y );
}

static void PRINT_APIENTRY printRasterPos2fv( const GLfloat * v )
{
	catia_composer_player_spu.super.RasterPos2fv( v );
}

static void PRINT_APIENTRY printRasterPos2i( GLint x, GLint y )
{
	catia_composer_player_spu.super.RasterPos2i( x, y );
}

static void PRINT_APIENTRY printRasterPos2iv( const GLint * v )
{
	catia_composer_player_spu.super.RasterPos2iv( v );
}

static void PRINT_APIENTRY printRasterPos2s( GLshort x, GLshort y )
{
	catia_composer_player_spu.super.RasterPos2s( x, y );
}

static void PRINT_APIENTRY printRasterPos2sv( const GLshort * v )
{
	catia_composer_player_spu.super.RasterPos2sv( v );
}

static void PRINT_APIENTRY printRasterPos3d( GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.RasterPos3d( x, y, z );
}

static void PRINT_APIENTRY printRasterPos3dv( const GLdouble * v )
{
	catia_composer_player_spu.super.RasterPos3dv( v );
}

static void PRINT_APIENTRY printRasterPos3f( GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.RasterPos3f( x, y, z );
}

static void PRINT_APIENTRY printRasterPos3fv( const GLfloat * v )
{
	catia_composer_player_spu.super.RasterPos3fv( v );
}

static void PRINT_APIENTRY printRasterPos3i( GLint x, GLint y, GLint z )
{
	catia_composer_player_spu.super.RasterPos3i( x, y, z );
}

static void PRINT_APIENTRY printRasterPos3iv( const GLint * v )
{
	catia_composer_player_spu.super.RasterPos3iv( v );
}

static void PRINT_APIENTRY printRasterPos3s( GLshort x, GLshort y, GLshort z )
{
	catia_composer_player_spu.super.RasterPos3s( x, y, z );
}

static void PRINT_APIENTRY printRasterPos3sv( const GLshort * v )
{
	catia_composer_player_spu.super.RasterPos3sv( v );
}

static void PRINT_APIENTRY printRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.RasterPos4d( x, y, z, w );
}

static void PRINT_APIENTRY printRasterPos4dv( const GLdouble * v )
{
	catia_composer_player_spu.super.RasterPos4dv( v );
}

static void PRINT_APIENTRY printRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.RasterPos4f( x, y, z, w );
}

static void PRINT_APIENTRY printRasterPos4fv( const GLfloat * v )
{
	catia_composer_player_spu.super.RasterPos4fv( v );
}

static void PRINT_APIENTRY printRasterPos4i( GLint x, GLint y, GLint z, GLint w )
{
	catia_composer_player_spu.super.RasterPos4i( x, y, z, w );
}

static void PRINT_APIENTRY printRasterPos4iv( const GLint * v )
{
	catia_composer_player_spu.super.RasterPos4iv( v );
}

static void PRINT_APIENTRY printRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w )
{
	catia_composer_player_spu.super.RasterPos4s( x, y, z, w );
}

static void PRINT_APIENTRY printRasterPos4sv( const GLshort * v )
{
	catia_composer_player_spu.super.RasterPos4sv( v );
}

static void PRINT_APIENTRY printReadBuffer( GLenum mode )
{
	catia_composer_player_spu.super.ReadBuffer( mode );
}

static void PRINT_APIENTRY printReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels )
{
	catia_composer_player_spu.super.ReadPixels( x, y, width, height, format, type, pixels );
}

static void PRINT_APIENTRY printRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 )
{
	catia_composer_player_spu.super.Rectd( x1, y1, x2, y2 );
}

static void PRINT_APIENTRY printRectdv( const GLdouble * v1, const GLdouble * v2 )
{
	catia_composer_player_spu.super.Rectdv( v1, v2 );
}

static void PRINT_APIENTRY printRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
{
	catia_composer_player_spu.super.Rectf( x1, y1, x2, y2 );
}

static void PRINT_APIENTRY printRectfv( const GLfloat * v1, const GLfloat * v2 )
{
	catia_composer_player_spu.super.Rectfv( v1, v2 );
}

static void PRINT_APIENTRY printRecti( GLint x1, GLint y1, GLint x2, GLint y2 )
{
	catia_composer_player_spu.super.Recti( x1, y1, x2, y2 );
}

static void PRINT_APIENTRY printRectiv( const GLint * v1, const GLint * v2 )
{
	catia_composer_player_spu.super.Rectiv( v1, v2 );
}

static void PRINT_APIENTRY printRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 )
{
	catia_composer_player_spu.super.Rects( x1, y1, x2, y2 );
}

static void PRINT_APIENTRY printRectsv( const GLshort * v1, const GLshort * v2 )
{
	catia_composer_player_spu.super.Rectsv( v1, v2 );
}

static GLint PRINT_APIENTRY printRenderMode( GLenum mode )
{
	return catia_composer_player_spu.super.RenderMode( mode );
}

static void PRINT_APIENTRY printRequestResidentProgramsNV( GLsizei n, const GLuint * ids )
{
	catia_composer_player_spu.super.RequestResidentProgramsNV( n, ids );
}

static void PRINT_APIENTRY printRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.Rotated( angle, x, y, z );
}

static void PRINT_APIENTRY printRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.Rotatef( angle, x, y, z );
}

static void PRINT_APIENTRY printSampleCoverageARB( GLclampf value, GLboolean invert )
{
	catia_composer_player_spu.super.SampleCoverageARB( value, invert );
}

static void PRINT_APIENTRY printScaled( GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.Scaled( x, y, z );
}

static void PRINT_APIENTRY printScalef( GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.Scalef( x, y, z );
}

static void PRINT_APIENTRY printScissor( GLint x, GLint y, GLsizei width, GLsizei height )
{
	catia_composer_player_spu.super.Scissor( x, y, width, height );
}

static void PRINT_APIENTRY printSecondaryColor3bEXT( GLbyte red, GLbyte green, GLbyte blue )
{
	catia_composer_player_spu.super.SecondaryColor3bEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3bvEXT( const GLbyte * v )
{
	catia_composer_player_spu.super.SecondaryColor3bvEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3dEXT( GLdouble red, GLdouble green, GLdouble blue )
{
	catia_composer_player_spu.super.SecondaryColor3dEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3dvEXT( const GLdouble * v )
{
	catia_composer_player_spu.super.SecondaryColor3dvEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3fEXT( GLfloat red, GLfloat green, GLfloat blue )
{
	catia_composer_player_spu.super.SecondaryColor3fEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3fvEXT( const GLfloat * v )
{
	catia_composer_player_spu.super.SecondaryColor3fvEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3iEXT( GLint red, GLint green, GLint blue )
{
	catia_composer_player_spu.super.SecondaryColor3iEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3ivEXT( const GLint * v )
{
	catia_composer_player_spu.super.SecondaryColor3ivEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3sEXT( GLshort red, GLshort green, GLshort blue )
{
	catia_composer_player_spu.super.SecondaryColor3sEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3svEXT( const GLshort * v )
{
	catia_composer_player_spu.super.SecondaryColor3svEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3ubEXT( GLubyte red, GLubyte green, GLubyte blue )
{
	catia_composer_player_spu.super.SecondaryColor3ubEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3ubvEXT( const GLubyte * v )
{
	catia_composer_player_spu.super.SecondaryColor3ubvEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3uiEXT( GLuint red, GLuint green, GLuint blue )
{
	catia_composer_player_spu.super.SecondaryColor3uiEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3uivEXT( const GLuint * v )
{
	catia_composer_player_spu.super.SecondaryColor3uivEXT( v );
}

static void PRINT_APIENTRY printSecondaryColor3usEXT( GLushort red, GLushort green, GLushort blue )
{
	catia_composer_player_spu.super.SecondaryColor3usEXT( red, green, blue );
}

static void PRINT_APIENTRY printSecondaryColor3usvEXT( const GLushort * v )
{
	catia_composer_player_spu.super.SecondaryColor3usvEXT( v );
}

static void PRINT_APIENTRY printSecondaryColorPointerEXT( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.SecondaryColorPointerEXT( size, type, stride, pointer );
}

static void PRINT_APIENTRY printSelectBuffer( GLsizei size, GLuint * buffer )
{
	catia_composer_player_spu.super.SelectBuffer( size, buffer );
}

static void PRINT_APIENTRY printSemaphoreCreateCR( GLuint name, GLuint count )
{
	catia_composer_player_spu.super.SemaphoreCreateCR( name, count );
}

static void PRINT_APIENTRY printSemaphoreDestroyCR( GLuint name )
{
	catia_composer_player_spu.super.SemaphoreDestroyCR( name );
}

static void PRINT_APIENTRY printSemaphorePCR( GLuint name )
{
	catia_composer_player_spu.super.SemaphorePCR( name );
}

static void PRINT_APIENTRY printSemaphoreVCR( GLuint name )
{
	catia_composer_player_spu.super.SemaphoreVCR( name );
}

static void PRINT_APIENTRY printSetFenceNV( GLuint fence, GLenum condition )
{
	catia_composer_player_spu.super.SetFenceNV( fence, condition );
}

static void PRINT_APIENTRY printShadeModel( GLenum mode )
{
	catia_composer_player_spu.super.ShadeModel( mode );
}

static void PRINT_APIENTRY printStencilFunc( GLenum func, GLint ref, GLuint mask )
{
	catia_composer_player_spu.super.StencilFunc( func, ref, mask );
}

static void PRINT_APIENTRY printStencilMask( GLuint mask )
{
	catia_composer_player_spu.super.StencilMask( mask );
}

static void PRINT_APIENTRY printStencilOp( GLenum fail, GLenum zfail, GLenum zpass )
{
	catia_composer_player_spu.super.StencilOp( fail, zfail, zpass );
}

static void PRINT_APIENTRY printSwapBuffers( GLint window, GLint flags )
{
	catia_composer_player_spu.super.SwapBuffers( window, flags );
}

static GLboolean PRINT_APIENTRY printTestFenceNV( GLuint fence )
{
	return catia_composer_player_spu.super.TestFenceNV( fence );
}

static void PRINT_APIENTRY printTexCoord1d( GLdouble s )
{
	catia_composer_player_spu.super.TexCoord1d( s );
}

static void PRINT_APIENTRY printTexCoord1dv( const GLdouble * v )
{
	catia_composer_player_spu.super.TexCoord1dv( v );
}

static void PRINT_APIENTRY printTexCoord1f( GLfloat s )
{
	catia_composer_player_spu.super.TexCoord1f( s );
}

static void PRINT_APIENTRY printTexCoord1fv( const GLfloat * v )
{
	catia_composer_player_spu.super.TexCoord1fv( v );
}

static void PRINT_APIENTRY printTexCoord1i( GLint s )
{
	catia_composer_player_spu.super.TexCoord1i( s );
}

static void PRINT_APIENTRY printTexCoord1iv( const GLint * v )
{
	catia_composer_player_spu.super.TexCoord1iv( v );
}

static void PRINT_APIENTRY printTexCoord1s( GLshort s )
{
	catia_composer_player_spu.super.TexCoord1s( s );
}

static void PRINT_APIENTRY printTexCoord1sv( const GLshort * v )
{
	catia_composer_player_spu.super.TexCoord1sv( v );
}

static void PRINT_APIENTRY printTexCoord2d( GLdouble s, GLdouble t )
{
	catia_composer_player_spu.super.TexCoord2d( s, t );
}

static void PRINT_APIENTRY printTexCoord2dv( const GLdouble * v )
{
	catia_composer_player_spu.super.TexCoord2dv( v );
}

static void PRINT_APIENTRY printTexCoord2f( GLfloat s, GLfloat t )
{
	catia_composer_player_spu.super.TexCoord2f( s, t );
}

static void PRINT_APIENTRY printTexCoord2fv( const GLfloat * v )
{
	catia_composer_player_spu.super.TexCoord2fv( v );
}

static void PRINT_APIENTRY printTexCoord2i( GLint s, GLint t )
{
	catia_composer_player_spu.super.TexCoord2i( s, t );
}

static void PRINT_APIENTRY printTexCoord2iv( const GLint * v )
{
	catia_composer_player_spu.super.TexCoord2iv( v );
}

static void PRINT_APIENTRY printTexCoord2s( GLshort s, GLshort t )
{
	catia_composer_player_spu.super.TexCoord2s( s, t );
}

static void PRINT_APIENTRY printTexCoord2sv( const GLshort * v )
{
	catia_composer_player_spu.super.TexCoord2sv( v );
}

static void PRINT_APIENTRY printTexCoord3d( GLdouble s, GLdouble t, GLdouble r )
{
	catia_composer_player_spu.super.TexCoord3d( s, t, r );
}

static void PRINT_APIENTRY printTexCoord3dv( const GLdouble * v )
{
	catia_composer_player_spu.super.TexCoord3dv( v );
}

static void PRINT_APIENTRY printTexCoord3f( GLfloat s, GLfloat t, GLfloat r )
{
	catia_composer_player_spu.super.TexCoord3f( s, t, r );
}

static void PRINT_APIENTRY printTexCoord3fv( const GLfloat * v )
{
	catia_composer_player_spu.super.TexCoord3fv( v );
}

static void PRINT_APIENTRY printTexCoord3i( GLint s, GLint t, GLint r )
{
	catia_composer_player_spu.super.TexCoord3i( s, t, r );
}

static void PRINT_APIENTRY printTexCoord3iv( const GLint * v )
{
	catia_composer_player_spu.super.TexCoord3iv( v );
}

static void PRINT_APIENTRY printTexCoord3s( GLshort s, GLshort t, GLshort r )
{
	catia_composer_player_spu.super.TexCoord3s( s, t, r );
}

static void PRINT_APIENTRY printTexCoord3sv( const GLshort * v )
{
	catia_composer_player_spu.super.TexCoord3sv( v );
}

static void PRINT_APIENTRY printTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
{
	catia_composer_player_spu.super.TexCoord4d( s, t, r, q );
}

static void PRINT_APIENTRY printTexCoord4dv( const GLdouble * v )
{
	catia_composer_player_spu.super.TexCoord4dv( v );
}

static void PRINT_APIENTRY printTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q )
{
	catia_composer_player_spu.super.TexCoord4f( s, t, r, q );
}

static void PRINT_APIENTRY printTexCoord4fv( const GLfloat * v )
{
	catia_composer_player_spu.super.TexCoord4fv( v );
}

static void PRINT_APIENTRY printTexCoord4i( GLint s, GLint t, GLint r, GLint q )
{
	catia_composer_player_spu.super.TexCoord4i( s, t, r, q );
}

static void PRINT_APIENTRY printTexCoord4iv( const GLint * v )
{
	catia_composer_player_spu.super.TexCoord4iv( v );
}

static void PRINT_APIENTRY printTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
{
	catia_composer_player_spu.super.TexCoord4s( s, t, r, q );
}

static void PRINT_APIENTRY printTexCoord4sv( const GLshort * v )
{
	catia_composer_player_spu.super.TexCoord4sv( v );
}

static void PRINT_APIENTRY printTexCoordPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.TexCoordPointer( size, type, stride, pointer );
}

static void PRINT_APIENTRY printTexEnvf( GLenum target, GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.TexEnvf( target, pname, param );
}

static void PRINT_APIENTRY printTexEnvfv( GLenum target, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.TexEnvfv( target, pname, params );
}

static void PRINT_APIENTRY printTexEnvi( GLenum target, GLenum pname, GLint param )
{
	catia_composer_player_spu.super.TexEnvi( target, pname, param );
}

static void PRINT_APIENTRY printTexEnviv( GLenum target, GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.TexEnviv( target, pname, params );
}

static void PRINT_APIENTRY printTexGend( GLenum coord, GLenum pname, GLdouble param )
{
	catia_composer_player_spu.super.TexGend( coord, pname, param );
}

static void PRINT_APIENTRY printTexGendv( GLenum coord, GLenum pname, const GLdouble * params )
{
	catia_composer_player_spu.super.TexGendv( coord, pname, params );
}

static void PRINT_APIENTRY printTexGenf( GLenum coord, GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.TexGenf( coord, pname, param );
}

static void PRINT_APIENTRY printTexGenfv( GLenum coord, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.TexGenfv( coord, pname, params );
}

static void PRINT_APIENTRY printTexGeni( GLenum coord, GLenum pname, GLint param )
{
	catia_composer_player_spu.super.TexGeni( coord, pname, param );
}

static void PRINT_APIENTRY printTexGeniv( GLenum coord, GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.TexGeniv( coord, pname, params );
}

static void PRINT_APIENTRY printTexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexImage1D( target, level, internalFormat, width, border, format, type, pixels );
}

static void PRINT_APIENTRY printTexImage2D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexImage2D( target, level, internalFormat, width, height, border, format, type, pixels );
}

static void PRINT_APIENTRY printTexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexImage3D( target, level, internalFormat, width, height, depth, border, format, type, pixels );
}

static void PRINT_APIENTRY printTexImage3DEXT( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexImage3DEXT( target, level, internalFormat, width, height, depth, border, format, type, pixels );
}

static void PRINT_APIENTRY printTexParameterf( GLenum target, GLenum pname, GLfloat param )
{
	catia_composer_player_spu.super.TexParameterf( target, pname, param );
}

static void PRINT_APIENTRY printTexParameterfv( GLenum target, GLenum pname, const GLfloat * params )
{
	catia_composer_player_spu.super.TexParameterfv( target, pname, params );
}

static void PRINT_APIENTRY printTexParameteri( GLenum target, GLenum pname, GLint param )
{
	catia_composer_player_spu.super.TexParameteri( target, pname, param );
}

static void PRINT_APIENTRY printTexParameteriv( GLenum target, GLenum pname, const GLint * params )
{
	catia_composer_player_spu.super.TexParameteriv( target, pname, params );
}

static void PRINT_APIENTRY printTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexSubImage1D( target, level, xoffset, width, format, type, pixels );
}

static void PRINT_APIENTRY printTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexSubImage2D( target, level, xoffset, yoffset, width, height, format, type, pixels );
}

static void PRINT_APIENTRY printTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels )
{
	catia_composer_player_spu.super.TexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
}

static void PRINT_APIENTRY printTrackMatrixNV( GLenum target, GLuint address, GLenum matrix, GLenum transform )
{
	catia_composer_player_spu.super.TrackMatrixNV( target, address, matrix, transform );
}

static void PRINT_APIENTRY printTranslated( GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.Translated( x, y, z );
}

static void PRINT_APIENTRY printTranslatef( GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.Translatef( x, y, z );
}

static GLboolean PRINT_APIENTRY printUnmapBufferARB( GLenum target )
{
	return catia_composer_player_spu.super.UnmapBufferARB( target );
}

static void PRINT_APIENTRY printVertex2d( GLdouble x, GLdouble y )
{
	catia_composer_player_spu.super.Vertex2d( x, y );
}

static void PRINT_APIENTRY printVertex2dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Vertex2dv( v );
}

static void PRINT_APIENTRY printVertex2f( GLfloat x, GLfloat y )
{
	catia_composer_player_spu.super.Vertex2f( x, y );
}

static void PRINT_APIENTRY printVertex2fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Vertex2fv( v );
}

static void PRINT_APIENTRY printVertex2i( GLint x, GLint y )
{
	catia_composer_player_spu.super.Vertex2i( x, y );
}

static void PRINT_APIENTRY printVertex2iv( const GLint * v )
{
	catia_composer_player_spu.super.Vertex2iv( v );
}

static void PRINT_APIENTRY printVertex2s( GLshort x, GLshort y )
{
	catia_composer_player_spu.super.Vertex2s( x, y );
}

static void PRINT_APIENTRY printVertex2sv( const GLshort * v )
{
	catia_composer_player_spu.super.Vertex2sv( v );
}

static void PRINT_APIENTRY printVertex3d( GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.Vertex3d( x, y, z );
}

static void PRINT_APIENTRY printVertex3dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Vertex3dv( v );
}

static void PRINT_APIENTRY printVertex3f( GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.Vertex3f( x, y, z );
}

static void PRINT_APIENTRY printVertex3fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Vertex3fv( v );
}

static void PRINT_APIENTRY printVertex3i( GLint x, GLint y, GLint z )
{
	catia_composer_player_spu.super.Vertex3i( x, y, z );
}

static void PRINT_APIENTRY printVertex3iv( const GLint * v )
{
	catia_composer_player_spu.super.Vertex3iv( v );
}

static void PRINT_APIENTRY printVertex3s( GLshort x, GLshort y, GLshort z )
{
	catia_composer_player_spu.super.Vertex3s( x, y, z );
}

static void PRINT_APIENTRY printVertex3sv( const GLshort * v )
{
	catia_composer_player_spu.super.Vertex3sv( v );
}

static void PRINT_APIENTRY printVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.Vertex4d( x, y, z, w );
}

static void PRINT_APIENTRY printVertex4dv( const GLdouble * v )
{
	catia_composer_player_spu.super.Vertex4dv( v );
}

static void PRINT_APIENTRY printVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.Vertex4f( x, y, z, w );
}

static void PRINT_APIENTRY printVertex4fv( const GLfloat * v )
{
	catia_composer_player_spu.super.Vertex4fv( v );
}

static void PRINT_APIENTRY printVertex4i( GLint x, GLint y, GLint z, GLint w )
{
	catia_composer_player_spu.super.Vertex4i( x, y, z, w );
}

static void PRINT_APIENTRY printVertex4iv( const GLint * v )
{
	catia_composer_player_spu.super.Vertex4iv( v );
}

static void PRINT_APIENTRY printVertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
{
	catia_composer_player_spu.super.Vertex4s( x, y, z, w );
}

static void PRINT_APIENTRY printVertex4sv( const GLshort * v )
{
	catia_composer_player_spu.super.Vertex4sv( v );
}

static void PRINT_APIENTRY printVertexArrayRangeNV( GLsizei length, const GLvoid * pointer )
{
	catia_composer_player_spu.super.VertexArrayRangeNV( length, pointer );
}

static void PRINT_APIENTRY printVertexAttrib1dARB( GLuint index, GLdouble x )
{
	catia_composer_player_spu.super.VertexAttrib1dARB( index, x );
}

static void PRINT_APIENTRY printVertexAttrib1dvARB( GLuint index, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttrib1dvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib1fARB( GLuint index, GLfloat x )
{
	catia_composer_player_spu.super.VertexAttrib1fARB( index, x );
}

static void PRINT_APIENTRY printVertexAttrib1fvARB( GLuint index, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttrib1fvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib1sARB( GLuint index, GLshort x )
{
	catia_composer_player_spu.super.VertexAttrib1sARB( index, x );
}

static void PRINT_APIENTRY printVertexAttrib1svARB( GLuint index, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttrib1svARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib2dARB( GLuint index, GLdouble x, GLdouble y )
{
	catia_composer_player_spu.super.VertexAttrib2dARB( index, x, y );
}

static void PRINT_APIENTRY printVertexAttrib2dvARB( GLuint index, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttrib2dvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib2fARB( GLuint index, GLfloat x, GLfloat y )
{
	catia_composer_player_spu.super.VertexAttrib2fARB( index, x, y );
}

static void PRINT_APIENTRY printVertexAttrib2fvARB( GLuint index, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttrib2fvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib2sARB( GLuint index, GLshort x, GLshort y )
{
	catia_composer_player_spu.super.VertexAttrib2sARB( index, x, y );
}

static void PRINT_APIENTRY printVertexAttrib2svARB( GLuint index, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttrib2svARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib3dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.VertexAttrib3dARB( index, x, y, z );
}

static void PRINT_APIENTRY printVertexAttrib3dvARB( GLuint index, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttrib3dvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib3fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.VertexAttrib3fARB( index, x, y, z );
}

static void PRINT_APIENTRY printVertexAttrib3fvARB( GLuint index, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttrib3fvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib3sARB( GLuint index, GLshort x, GLshort y, GLshort z )
{
	catia_composer_player_spu.super.VertexAttrib3sARB( index, x, y, z );
}

static void PRINT_APIENTRY printVertexAttrib3svARB( GLuint index, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttrib3svARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NbvARB( GLuint index, const GLbyte * v )
{
	catia_composer_player_spu.super.VertexAttrib4NbvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NivARB( GLuint index, const GLint * v )
{
	catia_composer_player_spu.super.VertexAttrib4NivARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NsvARB( GLuint index, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttrib4NsvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NubARB( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w )
{
	catia_composer_player_spu.super.VertexAttrib4NubARB( index, x, y, z, w );
}

static void PRINT_APIENTRY printVertexAttrib4NubvARB( GLuint index, const GLubyte * v )
{
	catia_composer_player_spu.super.VertexAttrib4NubvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NuivARB( GLuint index, const GLuint * v )
{
	catia_composer_player_spu.super.VertexAttrib4NuivARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4NusvARB( GLuint index, const GLushort * v )
{
	catia_composer_player_spu.super.VertexAttrib4NusvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4bvARB( GLuint index, const GLbyte * v )
{
	catia_composer_player_spu.super.VertexAttrib4bvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
	catia_composer_player_spu.super.VertexAttrib4dARB( index, x, y, z, w );
}

static void PRINT_APIENTRY printVertexAttrib4dvARB( GLuint index, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttrib4dvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
	catia_composer_player_spu.super.VertexAttrib4fARB( index, x, y, z, w );
}

static void PRINT_APIENTRY printVertexAttrib4fvARB( GLuint index, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttrib4fvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4ivARB( GLuint index, const GLint * v )
{
	catia_composer_player_spu.super.VertexAttrib4ivARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4sARB( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w )
{
	catia_composer_player_spu.super.VertexAttrib4sARB( index, x, y, z, w );
}

static void PRINT_APIENTRY printVertexAttrib4svARB( GLuint index, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttrib4svARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4ubvARB( GLuint index, const GLubyte * v )
{
	catia_composer_player_spu.super.VertexAttrib4ubvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4uivARB( GLuint index, const GLuint * v )
{
	catia_composer_player_spu.super.VertexAttrib4uivARB( index, v );
}

static void PRINT_APIENTRY printVertexAttrib4usvARB( GLuint index, const GLushort * v )
{
	catia_composer_player_spu.super.VertexAttrib4usvARB( index, v );
}

static void PRINT_APIENTRY printVertexAttribPointerARB( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.VertexAttribPointerARB( index, size, type, normalized, stride, pointer );
}

static void PRINT_APIENTRY printVertexAttribPointerNV( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.VertexAttribPointerNV( index, size, type, stride, pointer );
}

static void PRINT_APIENTRY printVertexAttribs1dvNV( GLuint index, GLsizei n, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttribs1dvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs1fvNV( GLuint index, GLsizei n, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttribs1fvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs1svNV( GLuint index, GLsizei n, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttribs1svNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs2dvNV( GLuint index, GLsizei n, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttribs2dvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs2fvNV( GLuint index, GLsizei n, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttribs2fvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs2svNV( GLuint index, GLsizei n, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttribs2svNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs3dvNV( GLuint index, GLsizei n, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttribs3dvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs3fvNV( GLuint index, GLsizei n, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttribs3fvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs3svNV( GLuint index, GLsizei n, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttribs3svNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs4dvNV( GLuint index, GLsizei n, const GLdouble * v )
{
	catia_composer_player_spu.super.VertexAttribs4dvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs4fvNV( GLuint index, GLsizei n, const GLfloat * v )
{
	catia_composer_player_spu.super.VertexAttribs4fvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs4svNV( GLuint index, GLsizei n, const GLshort * v )
{
	catia_composer_player_spu.super.VertexAttribs4svNV( index, n, v );
}

static void PRINT_APIENTRY printVertexAttribs4ubvNV( GLuint index, GLsizei n, const GLubyte * v )
{
	catia_composer_player_spu.super.VertexAttribs4ubvNV( index, n, v );
}

static void PRINT_APIENTRY printVertexPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer )
{
	catia_composer_player_spu.super.VertexPointer( size, type, stride, pointer );
}

static void PRINT_APIENTRY printViewport( GLint x, GLint y, GLsizei width, GLsizei height )
{
	catia_composer_player_spu.super.Viewport( x, y, width, height );
}

static GLint PRINT_APIENTRY printWindowCreate( const char * dpyName, GLint visBits )
{
	return catia_composer_player_spu.super.WindowCreate( dpyName, visBits );
}

static void PRINT_APIENTRY printWindowDestroy( GLint window )
{
	catia_composer_player_spu.super.WindowDestroy( window );
}

static void PRINT_APIENTRY printWindowPos2dARB( GLdouble x, GLdouble y )
{
	catia_composer_player_spu.super.WindowPos2dARB( x, y );
}

static void PRINT_APIENTRY printWindowPos2dvARB( const GLdouble * v )
{
	catia_composer_player_spu.super.WindowPos2dvARB( v );
}

static void PRINT_APIENTRY printWindowPos2fARB( GLfloat x, GLfloat y )
{
	catia_composer_player_spu.super.WindowPos2fARB( x, y );
}

static void PRINT_APIENTRY printWindowPos2fvARB( const GLfloat * v )
{
	catia_composer_player_spu.super.WindowPos2fvARB( v );
}

static void PRINT_APIENTRY printWindowPos2iARB( GLint x, GLint y )
{
	catia_composer_player_spu.super.WindowPos2iARB( x, y );
}

static void PRINT_APIENTRY printWindowPos2ivARB( const GLint * v )
{
	catia_composer_player_spu.super.WindowPos2ivARB( v );
}

static void PRINT_APIENTRY printWindowPos2sARB( GLshort x, GLshort y )
{
	catia_composer_player_spu.super.WindowPos2sARB( x, y );
}

static void PRINT_APIENTRY printWindowPos2svARB( const GLshort * v )
{
	catia_composer_player_spu.super.WindowPos2svARB( v );
}

static void PRINT_APIENTRY printWindowPos3dARB( GLdouble x, GLdouble y, GLdouble z )
{
	catia_composer_player_spu.super.WindowPos3dARB( x, y, z );
}

static void PRINT_APIENTRY printWindowPos3dvARB( const GLdouble * v )
{
	catia_composer_player_spu.super.WindowPos3dvARB( v );
}

static void PRINT_APIENTRY printWindowPos3fARB( GLfloat x, GLfloat y, GLfloat z )
{
	catia_composer_player_spu.super.WindowPos3fARB( x, y, z );
}

static void PRINT_APIENTRY printWindowPos3fvARB( const GLfloat * v )
{
	catia_composer_player_spu.super.WindowPos3fvARB( v );
}

static void PRINT_APIENTRY printWindowPos3iARB( GLint x, GLint y, GLint z )
{
	catia_composer_player_spu.super.WindowPos3iARB( x, y, z );
}

static void PRINT_APIENTRY printWindowPos3ivARB( const GLint * v )
{
	catia_composer_player_spu.super.WindowPos3ivARB( v );
}

static void PRINT_APIENTRY printWindowPos3sARB( GLshort x, GLshort y, GLshort z )
{
	catia_composer_player_spu.super.WindowPos3sARB( x, y, z );
}

static void PRINT_APIENTRY printWindowPos3svARB( const GLshort * v )
{
	catia_composer_player_spu.super.WindowPos3svARB( v );
}

static void PRINT_APIENTRY printWindowPosition( GLint window, GLint x, GLint y )
{
	catia_composer_player_spu.super.WindowPosition( window, x, y );
}

static void PRINT_APIENTRY printWindowShow( GLint window, GLint flag )
{
	catia_composer_player_spu.super.WindowShow( window, flag );
}

static void PRINT_APIENTRY printWindowSize( GLint window, GLint w, GLint h )
{
	catia_composer_player_spu.super.WindowSize( window, w, h );
}

static void PRINT_APIENTRY printWriteback( GLint * writeback )
{
	catia_composer_player_spu.super.Writeback( writeback );
}

static void PRINT_APIENTRY printZPixCR( GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels )
{
	catia_composer_player_spu.super.ZPixCR( width, height, format, type, ztype, zparm, length, pixels );
}
SPUNamedFunctionTable _cr_print_table[] = {
	{ "Accum", (SPUGenericFunction) printAccum },
	{ "ActiveTextureARB", (SPUGenericFunction) printActiveTextureARB },
	{ "AlphaFunc", (SPUGenericFunction) printAlphaFunc },
	{ "AreProgramsResidentNV", (SPUGenericFunction) printAreProgramsResidentNV },
	{ "AreTexturesResident", (SPUGenericFunction) printAreTexturesResident },
	{ "ArrayElement", (SPUGenericFunction) printArrayElement },
	{ "BarrierCreateCR", (SPUGenericFunction) printBarrierCreateCR },
	{ "BarrierDestroyCR", (SPUGenericFunction) printBarrierDestroyCR },
	{ "BarrierExecCR", (SPUGenericFunction) printBarrierExecCR },
	{ "Begin", (SPUGenericFunction) printBegin },
	{ "BeginQueryARB", (SPUGenericFunction) printBeginQueryARB },
	{ "BindBufferARB", (SPUGenericFunction) printBindBufferARB },
	{ "BindProgramARB", (SPUGenericFunction) printBindProgramARB },
	{ "BindProgramNV", (SPUGenericFunction) printBindProgramNV },
	{ "BindTexture", (SPUGenericFunction) printBindTexture },
	{ "Bitmap", (SPUGenericFunction) printBitmap },
	{ "BlendColorEXT", (SPUGenericFunction) printBlendColorEXT },
	{ "BlendEquationEXT", (SPUGenericFunction) printBlendEquationEXT },
	{ "BlendFunc", (SPUGenericFunction) printBlendFunc },
	{ "BlendFuncSeparateEXT", (SPUGenericFunction) printBlendFuncSeparateEXT },
	{ "BoundsInfoCR", (SPUGenericFunction) printBoundsInfoCR },
	{ "BufferDataARB", (SPUGenericFunction) printBufferDataARB },
	{ "BufferSubDataARB", (SPUGenericFunction) printBufferSubDataARB },
	{ "CallList", (SPUGenericFunction) printCallList },
	{ "CallLists", (SPUGenericFunction) printCallLists },
	{ "ChromiumParameterfCR", (SPUGenericFunction) printChromiumParameterfCR },
	{ "ChromiumParameteriCR", (SPUGenericFunction) printChromiumParameteriCR },
	{ "ChromiumParametervCR", (SPUGenericFunction) printChromiumParametervCR },
	{ "Clear", (SPUGenericFunction) printClear },
	{ "ClearAccum", (SPUGenericFunction) printClearAccum },
	{ "ClearColor", (SPUGenericFunction) printClearColor },
	{ "ClearDepth", (SPUGenericFunction) printClearDepth },
	{ "ClearIndex", (SPUGenericFunction) printClearIndex },
	{ "ClearStencil", (SPUGenericFunction) printClearStencil },
	{ "ClientActiveTextureARB", (SPUGenericFunction) printClientActiveTextureARB },
	{ "ClipPlane", (SPUGenericFunction) printClipPlane },
	{ "Color3b", (SPUGenericFunction) printColor3b },
	{ "Color3bv", (SPUGenericFunction) printColor3bv },
	{ "Color3d", (SPUGenericFunction) printColor3d },
	{ "Color3dv", (SPUGenericFunction) printColor3dv },
	{ "Color3f", (SPUGenericFunction) printColor3f },
	{ "Color3fv", (SPUGenericFunction) printColor3fv },
	{ "Color3i", (SPUGenericFunction) printColor3i },
	{ "Color3iv", (SPUGenericFunction) printColor3iv },
	{ "Color3s", (SPUGenericFunction) printColor3s },
	{ "Color3sv", (SPUGenericFunction) printColor3sv },
	{ "Color3ub", (SPUGenericFunction) printColor3ub },
	{ "Color3ubv", (SPUGenericFunction) printColor3ubv },
	{ "Color3ui", (SPUGenericFunction) printColor3ui },
	{ "Color3uiv", (SPUGenericFunction) printColor3uiv },
	{ "Color3us", (SPUGenericFunction) printColor3us },
	{ "Color3usv", (SPUGenericFunction) printColor3usv },
	{ "Color4b", (SPUGenericFunction) printColor4b },
	{ "Color4bv", (SPUGenericFunction) printColor4bv },
	{ "Color4d", (SPUGenericFunction) printColor4d },
	{ "Color4dv", (SPUGenericFunction) printColor4dv },
	{ "Color4f", (SPUGenericFunction) printColor4f },
	{ "Color4fv", (SPUGenericFunction) printColor4fv },
	{ "Color4i", (SPUGenericFunction) printColor4i },
	{ "Color4iv", (SPUGenericFunction) printColor4iv },
	{ "Color4s", (SPUGenericFunction) printColor4s },
	{ "Color4sv", (SPUGenericFunction) printColor4sv },
	{ "Color4ub", (SPUGenericFunction) printColor4ub },
	{ "Color4ubv", (SPUGenericFunction) printColor4ubv },
	{ "Color4ui", (SPUGenericFunction) printColor4ui },
	{ "Color4uiv", (SPUGenericFunction) printColor4uiv },
	{ "Color4us", (SPUGenericFunction) printColor4us },
	{ "Color4usv", (SPUGenericFunction) printColor4usv },
	{ "ColorMask", (SPUGenericFunction) printColorMask },
	{ "ColorMaterial", (SPUGenericFunction) printColorMaterial },
	{ "ColorPointer", (SPUGenericFunction) printColorPointer },
	{ "CombinerInputNV", (SPUGenericFunction) printCombinerInputNV },
	{ "CombinerOutputNV", (SPUGenericFunction) printCombinerOutputNV },
	{ "CombinerParameterfNV", (SPUGenericFunction) printCombinerParameterfNV },
	{ "CombinerParameterfvNV", (SPUGenericFunction) printCombinerParameterfvNV },
	{ "CombinerParameteriNV", (SPUGenericFunction) printCombinerParameteriNV },
	{ "CombinerParameterivNV", (SPUGenericFunction) printCombinerParameterivNV },
	{ "CombinerStageParameterfvNV", (SPUGenericFunction) printCombinerStageParameterfvNV },
	{ "CompressedTexImage1DARB", (SPUGenericFunction) printCompressedTexImage1DARB },
	{ "CompressedTexImage2DARB", (SPUGenericFunction) printCompressedTexImage2DARB },
	{ "CompressedTexImage3DARB", (SPUGenericFunction) printCompressedTexImage3DARB },
	{ "CompressedTexSubImage1DARB", (SPUGenericFunction) printCompressedTexSubImage1DARB },
	{ "CompressedTexSubImage2DARB", (SPUGenericFunction) printCompressedTexSubImage2DARB },
	{ "CompressedTexSubImage3DARB", (SPUGenericFunction) printCompressedTexSubImage3DARB },
	{ "CopyPixels", (SPUGenericFunction) printCopyPixels },
	{ "CopyTexImage1D", (SPUGenericFunction) printCopyTexImage1D },
	{ "CopyTexImage2D", (SPUGenericFunction) printCopyTexImage2D },
	{ "CopyTexSubImage1D", (SPUGenericFunction) printCopyTexSubImage1D },
	{ "CopyTexSubImage2D", (SPUGenericFunction) printCopyTexSubImage2D },
	{ "CopyTexSubImage3D", (SPUGenericFunction) printCopyTexSubImage3D },
	{ "CreateContext", (SPUGenericFunction) printCreateContext },
	{ "CullFace", (SPUGenericFunction) printCullFace },
	{ "DeleteBuffersARB", (SPUGenericFunction) printDeleteBuffersARB },
	{ "DeleteFencesNV", (SPUGenericFunction) printDeleteFencesNV },
	{ "DeleteLists", (SPUGenericFunction) printDeleteLists },
	{ "DeleteProgramsARB", (SPUGenericFunction) printDeleteProgramsARB },
	{ "DeleteQueriesARB", (SPUGenericFunction) printDeleteQueriesARB },
	{ "DeleteTextures", (SPUGenericFunction) printDeleteTextures },
	{ "DepthFunc", (SPUGenericFunction) printDepthFunc },
	{ "DepthMask", (SPUGenericFunction) printDepthMask },
	{ "DepthRange", (SPUGenericFunction) printDepthRange },
	{ "DestroyContext", (SPUGenericFunction) printDestroyContext },
	{ "Disable", (SPUGenericFunction) printDisable },
	{ "DisableClientState", (SPUGenericFunction) printDisableClientState },
	{ "DisableVertexAttribArrayARB", (SPUGenericFunction) printDisableVertexAttribArrayARB },
	{ "DrawArrays", (SPUGenericFunction) printDrawArrays },
	{ "DrawBuffer", (SPUGenericFunction) printDrawBuffer },
	{ "DrawElements", (SPUGenericFunction) printDrawElements },
	{ "DrawPixels", (SPUGenericFunction) printDrawPixels },
	{ "DrawRangeElements", (SPUGenericFunction) printDrawRangeElements },
	{ "EdgeFlag", (SPUGenericFunction) printEdgeFlag },
	{ "EdgeFlagPointer", (SPUGenericFunction) printEdgeFlagPointer },
	{ "EdgeFlagv", (SPUGenericFunction) printEdgeFlagv },
	{ "Enable", (SPUGenericFunction) printEnable },
	{ "EnableClientState", (SPUGenericFunction) printEnableClientState },
	{ "EnableVertexAttribArrayARB", (SPUGenericFunction) printEnableVertexAttribArrayARB },
	{ "End", (SPUGenericFunction) printEnd },
	{ "EndList", (SPUGenericFunction) printEndList },
	{ "EndQueryARB", (SPUGenericFunction) printEndQueryARB },
	{ "EvalCoord1d", (SPUGenericFunction) printEvalCoord1d },
	{ "EvalCoord1dv", (SPUGenericFunction) printEvalCoord1dv },
	{ "EvalCoord1f", (SPUGenericFunction) printEvalCoord1f },
	{ "EvalCoord1fv", (SPUGenericFunction) printEvalCoord1fv },
	{ "EvalCoord2d", (SPUGenericFunction) printEvalCoord2d },
	{ "EvalCoord2dv", (SPUGenericFunction) printEvalCoord2dv },
	{ "EvalCoord2f", (SPUGenericFunction) printEvalCoord2f },
	{ "EvalCoord2fv", (SPUGenericFunction) printEvalCoord2fv },
	{ "EvalMesh1", (SPUGenericFunction) printEvalMesh1 },
	{ "EvalMesh2", (SPUGenericFunction) printEvalMesh2 },
	{ "EvalPoint1", (SPUGenericFunction) printEvalPoint1 },
	{ "EvalPoint2", (SPUGenericFunction) printEvalPoint2 },
	{ "ExecuteProgramNV", (SPUGenericFunction) printExecuteProgramNV },
	{ "FeedbackBuffer", (SPUGenericFunction) printFeedbackBuffer },
	{ "FinalCombinerInputNV", (SPUGenericFunction) printFinalCombinerInputNV },
	{ "Finish", (SPUGenericFunction) printFinish },
	{ "FinishFenceNV", (SPUGenericFunction) printFinishFenceNV },
	{ "Flush", (SPUGenericFunction) printFlush },
	{ "FlushVertexArrayRangeNV", (SPUGenericFunction) printFlushVertexArrayRangeNV },
	{ "FogCoordPointerEXT", (SPUGenericFunction) printFogCoordPointerEXT },
	{ "FogCoorddEXT", (SPUGenericFunction) printFogCoorddEXT },
	{ "FogCoorddvEXT", (SPUGenericFunction) printFogCoorddvEXT },
	{ "FogCoordfEXT", (SPUGenericFunction) printFogCoordfEXT },
	{ "FogCoordfvEXT", (SPUGenericFunction) printFogCoordfvEXT },
	{ "Fogf", (SPUGenericFunction) printFogf },
	{ "Fogfv", (SPUGenericFunction) printFogfv },
	{ "Fogi", (SPUGenericFunction) printFogi },
	{ "Fogiv", (SPUGenericFunction) printFogiv },
	{ "FrontFace", (SPUGenericFunction) printFrontFace },
	{ "Frustum", (SPUGenericFunction) printFrustum },
	{ "GenBuffersARB", (SPUGenericFunction) printGenBuffersARB },
	{ "GenFencesNV", (SPUGenericFunction) printGenFencesNV },
	{ "GenLists", (SPUGenericFunction) printGenLists },
	{ "GenProgramsARB", (SPUGenericFunction) printGenProgramsARB },
	{ "GenProgramsNV", (SPUGenericFunction) printGenProgramsNV },
	{ "GenQueriesARB", (SPUGenericFunction) printGenQueriesARB },
	{ "GenTextures", (SPUGenericFunction) printGenTextures },
	{ "GetBooleanv", (SPUGenericFunction) printGetBooleanv },
	{ "GetBufferParameterivARB", (SPUGenericFunction) printGetBufferParameterivARB },
	{ "GetBufferPointervARB", (SPUGenericFunction) printGetBufferPointervARB },
	{ "GetBufferSubDataARB", (SPUGenericFunction) printGetBufferSubDataARB },
	{ "GetChromiumParametervCR", (SPUGenericFunction) printGetChromiumParametervCR },
	{ "GetClipPlane", (SPUGenericFunction) printGetClipPlane },
	{ "GetCombinerInputParameterfvNV", (SPUGenericFunction) printGetCombinerInputParameterfvNV },
	{ "GetCombinerInputParameterivNV", (SPUGenericFunction) printGetCombinerInputParameterivNV },
	{ "GetCombinerOutputParameterfvNV", (SPUGenericFunction) printGetCombinerOutputParameterfvNV },
	{ "GetCombinerOutputParameterivNV", (SPUGenericFunction) printGetCombinerOutputParameterivNV },
	{ "GetCombinerStageParameterfvNV", (SPUGenericFunction) printGetCombinerStageParameterfvNV },
	{ "GetCompressedTexImageARB", (SPUGenericFunction) printGetCompressedTexImageARB },
	{ "GetDoublev", (SPUGenericFunction) printGetDoublev },
	{ "GetError", (SPUGenericFunction) printGetError },
	{ "GetFenceivNV", (SPUGenericFunction) printGetFenceivNV },
	{ "GetFinalCombinerInputParameterfvNV", (SPUGenericFunction) printGetFinalCombinerInputParameterfvNV },
	{ "GetFinalCombinerInputParameterivNV", (SPUGenericFunction) printGetFinalCombinerInputParameterivNV },
	{ "GetFloatv", (SPUGenericFunction) printGetFloatv },
	{ "GetIntegerv", (SPUGenericFunction) printGetIntegerv },
	{ "GetLightfv", (SPUGenericFunction) printGetLightfv },
	{ "GetLightiv", (SPUGenericFunction) printGetLightiv },
	{ "GetMapdv", (SPUGenericFunction) printGetMapdv },
	{ "GetMapfv", (SPUGenericFunction) printGetMapfv },
	{ "GetMapiv", (SPUGenericFunction) printGetMapiv },
	{ "GetMaterialfv", (SPUGenericFunction) printGetMaterialfv },
	{ "GetMaterialiv", (SPUGenericFunction) printGetMaterialiv },
	{ "GetPixelMapfv", (SPUGenericFunction) printGetPixelMapfv },
	{ "GetPixelMapuiv", (SPUGenericFunction) printGetPixelMapuiv },
	{ "GetPixelMapusv", (SPUGenericFunction) printGetPixelMapusv },
	{ "GetPointerv", (SPUGenericFunction) printGetPointerv },
	{ "GetPolygonStipple", (SPUGenericFunction) printGetPolygonStipple },
	{ "GetProgramEnvParameterdvARB", (SPUGenericFunction) printGetProgramEnvParameterdvARB },
	{ "GetProgramEnvParameterfvARB", (SPUGenericFunction) printGetProgramEnvParameterfvARB },
	{ "GetProgramLocalParameterdvARB", (SPUGenericFunction) printGetProgramLocalParameterdvARB },
	{ "GetProgramLocalParameterfvARB", (SPUGenericFunction) printGetProgramLocalParameterfvARB },
	{ "GetProgramNamedParameterdvNV", (SPUGenericFunction) printGetProgramNamedParameterdvNV },
	{ "GetProgramNamedParameterfvNV", (SPUGenericFunction) printGetProgramNamedParameterfvNV },
	{ "GetProgramParameterdvNV", (SPUGenericFunction) printGetProgramParameterdvNV },
	{ "GetProgramParameterfvNV", (SPUGenericFunction) printGetProgramParameterfvNV },
	{ "GetProgramStringARB", (SPUGenericFunction) printGetProgramStringARB },
	{ "GetProgramStringNV", (SPUGenericFunction) printGetProgramStringNV },
	{ "GetProgramivARB", (SPUGenericFunction) printGetProgramivARB },
	{ "GetProgramivNV", (SPUGenericFunction) printGetProgramivNV },
	{ "GetQueryObjectivARB", (SPUGenericFunction) printGetQueryObjectivARB },
	{ "GetQueryObjectuivARB", (SPUGenericFunction) printGetQueryObjectuivARB },
	{ "GetQueryivARB", (SPUGenericFunction) printGetQueryivARB },
	{ "GetString", (SPUGenericFunction) printGetString },
	{ "GetTexEnvfv", (SPUGenericFunction) printGetTexEnvfv },
	{ "GetTexEnviv", (SPUGenericFunction) printGetTexEnviv },
	{ "GetTexGendv", (SPUGenericFunction) printGetTexGendv },
	{ "GetTexGenfv", (SPUGenericFunction) printGetTexGenfv },
	{ "GetTexGeniv", (SPUGenericFunction) printGetTexGeniv },
	{ "GetTexImage", (SPUGenericFunction) printGetTexImage },
	{ "GetTexLevelParameterfv", (SPUGenericFunction) printGetTexLevelParameterfv },
	{ "GetTexLevelParameteriv", (SPUGenericFunction) printGetTexLevelParameteriv },
	{ "GetTexParameterfv", (SPUGenericFunction) printGetTexParameterfv },
	{ "GetTexParameteriv", (SPUGenericFunction) printGetTexParameteriv },
	{ "GetTrackMatrixivNV", (SPUGenericFunction) printGetTrackMatrixivNV },
	{ "GetVertexAttribPointervARB", (SPUGenericFunction) printGetVertexAttribPointervARB },
	{ "GetVertexAttribPointervNV", (SPUGenericFunction) printGetVertexAttribPointervNV },
	{ "GetVertexAttribdvARB", (SPUGenericFunction) printGetVertexAttribdvARB },
	{ "GetVertexAttribdvNV", (SPUGenericFunction) printGetVertexAttribdvNV },
	{ "GetVertexAttribfvARB", (SPUGenericFunction) printGetVertexAttribfvARB },
	{ "GetVertexAttribfvNV", (SPUGenericFunction) printGetVertexAttribfvNV },
	{ "GetVertexAttribivARB", (SPUGenericFunction) printGetVertexAttribivARB },
	{ "GetVertexAttribivNV", (SPUGenericFunction) printGetVertexAttribivNV },
	{ "Hint", (SPUGenericFunction) printHint },
	{ "IndexMask", (SPUGenericFunction) printIndexMask },
	{ "IndexPointer", (SPUGenericFunction) printIndexPointer },
	{ "Indexd", (SPUGenericFunction) printIndexd },
	{ "Indexdv", (SPUGenericFunction) printIndexdv },
	{ "Indexf", (SPUGenericFunction) printIndexf },
	{ "Indexfv", (SPUGenericFunction) printIndexfv },
	{ "Indexi", (SPUGenericFunction) printIndexi },
	{ "Indexiv", (SPUGenericFunction) printIndexiv },
	{ "Indexs", (SPUGenericFunction) printIndexs },
	{ "Indexsv", (SPUGenericFunction) printIndexsv },
	{ "Indexub", (SPUGenericFunction) printIndexub },
	{ "Indexubv", (SPUGenericFunction) printIndexubv },
	{ "InitNames", (SPUGenericFunction) printInitNames },
	{ "InterleavedArrays", (SPUGenericFunction) printInterleavedArrays },
	{ "IsBufferARB", (SPUGenericFunction) printIsBufferARB },
	{ "IsEnabled", (SPUGenericFunction) printIsEnabled },
	{ "IsFenceNV", (SPUGenericFunction) printIsFenceNV },
	{ "IsList", (SPUGenericFunction) printIsList },
	{ "IsProgramARB", (SPUGenericFunction) printIsProgramARB },
	{ "IsQueryARB", (SPUGenericFunction) printIsQueryARB },
	{ "IsTexture", (SPUGenericFunction) printIsTexture },
	{ "LightModelf", (SPUGenericFunction) printLightModelf },
	{ "LightModelfv", (SPUGenericFunction) printLightModelfv },
	{ "LightModeli", (SPUGenericFunction) printLightModeli },
	{ "LightModeliv", (SPUGenericFunction) printLightModeliv },
	{ "Lightf", (SPUGenericFunction) printLightf },
	{ "Lightfv", (SPUGenericFunction) printLightfv },
	{ "Lighti", (SPUGenericFunction) printLighti },
	{ "Lightiv", (SPUGenericFunction) printLightiv },
	{ "LineStipple", (SPUGenericFunction) printLineStipple },
	{ "LineWidth", (SPUGenericFunction) printLineWidth },
	{ "ListBase", (SPUGenericFunction) printListBase },
	{ "LoadIdentity", (SPUGenericFunction) printLoadIdentity },
	{ "LoadMatrixd", (SPUGenericFunction) printLoadMatrixd },
	{ "LoadMatrixf", (SPUGenericFunction) printLoadMatrixf },
	{ "LoadName", (SPUGenericFunction) printLoadName },
	{ "LoadProgramNV", (SPUGenericFunction) printLoadProgramNV },
	{ "LoadTransposeMatrixdARB", (SPUGenericFunction) printLoadTransposeMatrixdARB },
	{ "LoadTransposeMatrixfARB", (SPUGenericFunction) printLoadTransposeMatrixfARB },
	{ "LogicOp", (SPUGenericFunction) printLogicOp },
	{ "MakeCurrent", (SPUGenericFunction) printMakeCurrent },
	{ "Map1d", (SPUGenericFunction) printMap1d },
	{ "Map1f", (SPUGenericFunction) printMap1f },
	{ "Map2d", (SPUGenericFunction) printMap2d },
	{ "Map2f", (SPUGenericFunction) printMap2f },
	{ "MapBufferARB", (SPUGenericFunction) printMapBufferARB },
	{ "MapGrid1d", (SPUGenericFunction) printMapGrid1d },
	{ "MapGrid1f", (SPUGenericFunction) printMapGrid1f },
	{ "MapGrid2d", (SPUGenericFunction) printMapGrid2d },
	{ "MapGrid2f", (SPUGenericFunction) printMapGrid2f },
	{ "Materialf", (SPUGenericFunction) printMaterialf },
	{ "Materialfv", (SPUGenericFunction) printMaterialfv },
	{ "Materiali", (SPUGenericFunction) printMateriali },
	{ "Materialiv", (SPUGenericFunction) printMaterialiv },
	{ "MatrixMode", (SPUGenericFunction) printMatrixMode },
	{ "MultMatrixd", (SPUGenericFunction) printMultMatrixd },
	{ "MultMatrixf", (SPUGenericFunction) printMultMatrixf },
	{ "MultTransposeMatrixdARB", (SPUGenericFunction) printMultTransposeMatrixdARB },
	{ "MultTransposeMatrixfARB", (SPUGenericFunction) printMultTransposeMatrixfARB },
	{ "MultiDrawArraysEXT", (SPUGenericFunction) printMultiDrawArraysEXT },
	{ "MultiDrawElementsEXT", (SPUGenericFunction) printMultiDrawElementsEXT },
	{ "MultiTexCoord1dARB", (SPUGenericFunction) printMultiTexCoord1dARB },
	{ "MultiTexCoord1dvARB", (SPUGenericFunction) printMultiTexCoord1dvARB },
	{ "MultiTexCoord1fARB", (SPUGenericFunction) printMultiTexCoord1fARB },
	{ "MultiTexCoord1fvARB", (SPUGenericFunction) printMultiTexCoord1fvARB },
	{ "MultiTexCoord1iARB", (SPUGenericFunction) printMultiTexCoord1iARB },
	{ "MultiTexCoord1ivARB", (SPUGenericFunction) printMultiTexCoord1ivARB },
	{ "MultiTexCoord1sARB", (SPUGenericFunction) printMultiTexCoord1sARB },
	{ "MultiTexCoord1svARB", (SPUGenericFunction) printMultiTexCoord1svARB },
	{ "MultiTexCoord2dARB", (SPUGenericFunction) printMultiTexCoord2dARB },
	{ "MultiTexCoord2dvARB", (SPUGenericFunction) printMultiTexCoord2dvARB },
	{ "MultiTexCoord2fARB", (SPUGenericFunction) printMultiTexCoord2fARB },
	{ "MultiTexCoord2fvARB", (SPUGenericFunction) printMultiTexCoord2fvARB },
	{ "MultiTexCoord2iARB", (SPUGenericFunction) printMultiTexCoord2iARB },
	{ "MultiTexCoord2ivARB", (SPUGenericFunction) printMultiTexCoord2ivARB },
	{ "MultiTexCoord2sARB", (SPUGenericFunction) printMultiTexCoord2sARB },
	{ "MultiTexCoord2svARB", (SPUGenericFunction) printMultiTexCoord2svARB },
	{ "MultiTexCoord3dARB", (SPUGenericFunction) printMultiTexCoord3dARB },
	{ "MultiTexCoord3dvARB", (SPUGenericFunction) printMultiTexCoord3dvARB },
	{ "MultiTexCoord3fARB", (SPUGenericFunction) printMultiTexCoord3fARB },
	{ "MultiTexCoord3fvARB", (SPUGenericFunction) printMultiTexCoord3fvARB },
	{ "MultiTexCoord3iARB", (SPUGenericFunction) printMultiTexCoord3iARB },
	{ "MultiTexCoord3ivARB", (SPUGenericFunction) printMultiTexCoord3ivARB },
	{ "MultiTexCoord3sARB", (SPUGenericFunction) printMultiTexCoord3sARB },
	{ "MultiTexCoord3svARB", (SPUGenericFunction) printMultiTexCoord3svARB },
	{ "MultiTexCoord4dARB", (SPUGenericFunction) printMultiTexCoord4dARB },
	{ "MultiTexCoord4dvARB", (SPUGenericFunction) printMultiTexCoord4dvARB },
	{ "MultiTexCoord4fARB", (SPUGenericFunction) printMultiTexCoord4fARB },
	{ "MultiTexCoord4fvARB", (SPUGenericFunction) printMultiTexCoord4fvARB },
	{ "MultiTexCoord4iARB", (SPUGenericFunction) printMultiTexCoord4iARB },
	{ "MultiTexCoord4ivARB", (SPUGenericFunction) printMultiTexCoord4ivARB },
	{ "MultiTexCoord4sARB", (SPUGenericFunction) printMultiTexCoord4sARB },
	{ "MultiTexCoord4svARB", (SPUGenericFunction) printMultiTexCoord4svARB },
	{ "NewList", (SPUGenericFunction) printNewList },
	{ "Normal3b", (SPUGenericFunction) printNormal3b },
	{ "Normal3bv", (SPUGenericFunction) printNormal3bv },
	{ "Normal3d", (SPUGenericFunction) printNormal3d },
	{ "Normal3dv", (SPUGenericFunction) printNormal3dv },
	{ "Normal3f", (SPUGenericFunction) printNormal3f },
	{ "Normal3fv", (SPUGenericFunction) printNormal3fv },
	{ "Normal3i", (SPUGenericFunction) printNormal3i },
	{ "Normal3iv", (SPUGenericFunction) printNormal3iv },
	{ "Normal3s", (SPUGenericFunction) printNormal3s },
	{ "Normal3sv", (SPUGenericFunction) printNormal3sv },
	{ "NormalPointer", (SPUGenericFunction) printNormalPointer },
	{ "Ortho", (SPUGenericFunction) printOrtho },
	{ "PassThrough", (SPUGenericFunction) printPassThrough },
	{ "PixelMapfv", (SPUGenericFunction) printPixelMapfv },
	{ "PixelMapuiv", (SPUGenericFunction) printPixelMapuiv },
	{ "PixelMapusv", (SPUGenericFunction) printPixelMapusv },
	{ "PixelStoref", (SPUGenericFunction) printPixelStoref },
	{ "PixelStorei", (SPUGenericFunction) printPixelStorei },
	{ "PixelTransferf", (SPUGenericFunction) printPixelTransferf },
	{ "PixelTransferi", (SPUGenericFunction) printPixelTransferi },
	{ "PixelZoom", (SPUGenericFunction) printPixelZoom },
	{ "PointParameterfARB", (SPUGenericFunction) printPointParameterfARB },
	{ "PointParameterfvARB", (SPUGenericFunction) printPointParameterfvARB },
	{ "PointParameteri", (SPUGenericFunction) printPointParameteri },
	{ "PointParameteriv", (SPUGenericFunction) printPointParameteriv },
	{ "PointSize", (SPUGenericFunction) printPointSize },
	{ "PolygonMode", (SPUGenericFunction) printPolygonMode },
	{ "PolygonOffset", (SPUGenericFunction) printPolygonOffset },
	{ "PolygonStipple", (SPUGenericFunction) printPolygonStipple },
	{ "PopAttrib", (SPUGenericFunction) printPopAttrib },
	{ "PopClientAttrib", (SPUGenericFunction) printPopClientAttrib },
	{ "PopMatrix", (SPUGenericFunction) printPopMatrix },
	{ "PopName", (SPUGenericFunction) printPopName },
	{ "PrioritizeTextures", (SPUGenericFunction) printPrioritizeTextures },
	{ "ProgramEnvParameter4dARB", (SPUGenericFunction) printProgramEnvParameter4dARB },
	{ "ProgramEnvParameter4dvARB", (SPUGenericFunction) printProgramEnvParameter4dvARB },
	{ "ProgramEnvParameter4fARB", (SPUGenericFunction) printProgramEnvParameter4fARB },
	{ "ProgramEnvParameter4fvARB", (SPUGenericFunction) printProgramEnvParameter4fvARB },
	{ "ProgramLocalParameter4dARB", (SPUGenericFunction) printProgramLocalParameter4dARB },
	{ "ProgramLocalParameter4dvARB", (SPUGenericFunction) printProgramLocalParameter4dvARB },
	{ "ProgramLocalParameter4fARB", (SPUGenericFunction) printProgramLocalParameter4fARB },
	{ "ProgramLocalParameter4fvARB", (SPUGenericFunction) printProgramLocalParameter4fvARB },
	{ "ProgramNamedParameter4dNV", (SPUGenericFunction) printProgramNamedParameter4dNV },
	{ "ProgramNamedParameter4dvNV", (SPUGenericFunction) printProgramNamedParameter4dvNV },
	{ "ProgramNamedParameter4fNV", (SPUGenericFunction) printProgramNamedParameter4fNV },
	{ "ProgramNamedParameter4fvNV", (SPUGenericFunction) printProgramNamedParameter4fvNV },
	{ "ProgramParameter4dNV", (SPUGenericFunction) printProgramParameter4dNV },
	{ "ProgramParameter4dvNV", (SPUGenericFunction) printProgramParameter4dvNV },
	{ "ProgramParameter4fNV", (SPUGenericFunction) printProgramParameter4fNV },
	{ "ProgramParameter4fvNV", (SPUGenericFunction) printProgramParameter4fvNV },
	{ "ProgramParameters4dvNV", (SPUGenericFunction) printProgramParameters4dvNV },
	{ "ProgramParameters4fvNV", (SPUGenericFunction) printProgramParameters4fvNV },
	{ "ProgramStringARB", (SPUGenericFunction) printProgramStringARB },
	{ "PushAttrib", (SPUGenericFunction) printPushAttrib },
	{ "PushClientAttrib", (SPUGenericFunction) printPushClientAttrib },
	{ "PushMatrix", (SPUGenericFunction) printPushMatrix },
	{ "PushName", (SPUGenericFunction) printPushName },
	{ "RasterPos2d", (SPUGenericFunction) printRasterPos2d },
	{ "RasterPos2dv", (SPUGenericFunction) printRasterPos2dv },
	{ "RasterPos2f", (SPUGenericFunction) printRasterPos2f },
	{ "RasterPos2fv", (SPUGenericFunction) printRasterPos2fv },
	{ "RasterPos2i", (SPUGenericFunction) printRasterPos2i },
	{ "RasterPos2iv", (SPUGenericFunction) printRasterPos2iv },
	{ "RasterPos2s", (SPUGenericFunction) printRasterPos2s },
	{ "RasterPos2sv", (SPUGenericFunction) printRasterPos2sv },
	{ "RasterPos3d", (SPUGenericFunction) printRasterPos3d },
	{ "RasterPos3dv", (SPUGenericFunction) printRasterPos3dv },
	{ "RasterPos3f", (SPUGenericFunction) printRasterPos3f },
	{ "RasterPos3fv", (SPUGenericFunction) printRasterPos3fv },
	{ "RasterPos3i", (SPUGenericFunction) printRasterPos3i },
	{ "RasterPos3iv", (SPUGenericFunction) printRasterPos3iv },
	{ "RasterPos3s", (SPUGenericFunction) printRasterPos3s },
	{ "RasterPos3sv", (SPUGenericFunction) printRasterPos3sv },
	{ "RasterPos4d", (SPUGenericFunction) printRasterPos4d },
	{ "RasterPos4dv", (SPUGenericFunction) printRasterPos4dv },
	{ "RasterPos4f", (SPUGenericFunction) printRasterPos4f },
	{ "RasterPos4fv", (SPUGenericFunction) printRasterPos4fv },
	{ "RasterPos4i", (SPUGenericFunction) printRasterPos4i },
	{ "RasterPos4iv", (SPUGenericFunction) printRasterPos4iv },
	{ "RasterPos4s", (SPUGenericFunction) printRasterPos4s },
	{ "RasterPos4sv", (SPUGenericFunction) printRasterPos4sv },
	{ "ReadBuffer", (SPUGenericFunction) printReadBuffer },
	{ "ReadPixels", (SPUGenericFunction) printReadPixels },
	{ "Rectd", (SPUGenericFunction) printRectd },
	{ "Rectdv", (SPUGenericFunction) printRectdv },
	{ "Rectf", (SPUGenericFunction) printRectf },
	{ "Rectfv", (SPUGenericFunction) printRectfv },
	{ "Recti", (SPUGenericFunction) printRecti },
	{ "Rectiv", (SPUGenericFunction) printRectiv },
	{ "Rects", (SPUGenericFunction) printRects },
	{ "Rectsv", (SPUGenericFunction) printRectsv },
	{ "RenderMode", (SPUGenericFunction) printRenderMode },
	{ "RequestResidentProgramsNV", (SPUGenericFunction) printRequestResidentProgramsNV },
	{ "Rotated", (SPUGenericFunction) printRotated },
	{ "Rotatef", (SPUGenericFunction) printRotatef },
	{ "SampleCoverageARB", (SPUGenericFunction) printSampleCoverageARB },
	{ "Scaled", (SPUGenericFunction) printScaled },
	{ "Scalef", (SPUGenericFunction) printScalef },
	{ "Scissor", (SPUGenericFunction) printScissor },
	{ "SecondaryColor3bEXT", (SPUGenericFunction) printSecondaryColor3bEXT },
	{ "SecondaryColor3bvEXT", (SPUGenericFunction) printSecondaryColor3bvEXT },
	{ "SecondaryColor3dEXT", (SPUGenericFunction) printSecondaryColor3dEXT },
	{ "SecondaryColor3dvEXT", (SPUGenericFunction) printSecondaryColor3dvEXT },
	{ "SecondaryColor3fEXT", (SPUGenericFunction) printSecondaryColor3fEXT },
	{ "SecondaryColor3fvEXT", (SPUGenericFunction) printSecondaryColor3fvEXT },
	{ "SecondaryColor3iEXT", (SPUGenericFunction) printSecondaryColor3iEXT },
	{ "SecondaryColor3ivEXT", (SPUGenericFunction) printSecondaryColor3ivEXT },
	{ "SecondaryColor3sEXT", (SPUGenericFunction) printSecondaryColor3sEXT },
	{ "SecondaryColor3svEXT", (SPUGenericFunction) printSecondaryColor3svEXT },
	{ "SecondaryColor3ubEXT", (SPUGenericFunction) printSecondaryColor3ubEXT },
	{ "SecondaryColor3ubvEXT", (SPUGenericFunction) printSecondaryColor3ubvEXT },
	{ "SecondaryColor3uiEXT", (SPUGenericFunction) printSecondaryColor3uiEXT },
	{ "SecondaryColor3uivEXT", (SPUGenericFunction) printSecondaryColor3uivEXT },
	{ "SecondaryColor3usEXT", (SPUGenericFunction) printSecondaryColor3usEXT },
	{ "SecondaryColor3usvEXT", (SPUGenericFunction) printSecondaryColor3usvEXT },
	{ "SecondaryColorPointerEXT", (SPUGenericFunction) printSecondaryColorPointerEXT },
	{ "SelectBuffer", (SPUGenericFunction) printSelectBuffer },
	{ "SemaphoreCreateCR", (SPUGenericFunction) printSemaphoreCreateCR },
	{ "SemaphoreDestroyCR", (SPUGenericFunction) printSemaphoreDestroyCR },
	{ "SemaphorePCR", (SPUGenericFunction) printSemaphorePCR },
	{ "SemaphoreVCR", (SPUGenericFunction) printSemaphoreVCR },
	{ "SetFenceNV", (SPUGenericFunction) printSetFenceNV },
	{ "ShadeModel", (SPUGenericFunction) printShadeModel },
	{ "StencilFunc", (SPUGenericFunction) printStencilFunc },
	{ "StencilMask", (SPUGenericFunction) printStencilMask },
	{ "StencilOp", (SPUGenericFunction) printStencilOp },
	{ "SwapBuffers", (SPUGenericFunction) printSwapBuffers },
	{ "TestFenceNV", (SPUGenericFunction) printTestFenceNV },
	{ "TexCoord1d", (SPUGenericFunction) printTexCoord1d },
	{ "TexCoord1dv", (SPUGenericFunction) printTexCoord1dv },
	{ "TexCoord1f", (SPUGenericFunction) printTexCoord1f },
	{ "TexCoord1fv", (SPUGenericFunction) printTexCoord1fv },
	{ "TexCoord1i", (SPUGenericFunction) printTexCoord1i },
	{ "TexCoord1iv", (SPUGenericFunction) printTexCoord1iv },
	{ "TexCoord1s", (SPUGenericFunction) printTexCoord1s },
	{ "TexCoord1sv", (SPUGenericFunction) printTexCoord1sv },
	{ "TexCoord2d", (SPUGenericFunction) printTexCoord2d },
	{ "TexCoord2dv", (SPUGenericFunction) printTexCoord2dv },
	{ "TexCoord2f", (SPUGenericFunction) printTexCoord2f },
	{ "TexCoord2fv", (SPUGenericFunction) printTexCoord2fv },
	{ "TexCoord2i", (SPUGenericFunction) printTexCoord2i },
	{ "TexCoord2iv", (SPUGenericFunction) printTexCoord2iv },
	{ "TexCoord2s", (SPUGenericFunction) printTexCoord2s },
	{ "TexCoord2sv", (SPUGenericFunction) printTexCoord2sv },
	{ "TexCoord3d", (SPUGenericFunction) printTexCoord3d },
	{ "TexCoord3dv", (SPUGenericFunction) printTexCoord3dv },
	{ "TexCoord3f", (SPUGenericFunction) printTexCoord3f },
	{ "TexCoord3fv", (SPUGenericFunction) printTexCoord3fv },
	{ "TexCoord3i", (SPUGenericFunction) printTexCoord3i },
	{ "TexCoord3iv", (SPUGenericFunction) printTexCoord3iv },
	{ "TexCoord3s", (SPUGenericFunction) printTexCoord3s },
	{ "TexCoord3sv", (SPUGenericFunction) printTexCoord3sv },
	{ "TexCoord4d", (SPUGenericFunction) printTexCoord4d },
	{ "TexCoord4dv", (SPUGenericFunction) printTexCoord4dv },
	{ "TexCoord4f", (SPUGenericFunction) printTexCoord4f },
	{ "TexCoord4fv", (SPUGenericFunction) printTexCoord4fv },
	{ "TexCoord4i", (SPUGenericFunction) printTexCoord4i },
	{ "TexCoord4iv", (SPUGenericFunction) printTexCoord4iv },
	{ "TexCoord4s", (SPUGenericFunction) printTexCoord4s },
	{ "TexCoord4sv", (SPUGenericFunction) printTexCoord4sv },
	{ "TexCoordPointer", (SPUGenericFunction) printTexCoordPointer },
	{ "TexEnvf", (SPUGenericFunction) printTexEnvf },
	{ "TexEnvfv", (SPUGenericFunction) printTexEnvfv },
	{ "TexEnvi", (SPUGenericFunction) printTexEnvi },
	{ "TexEnviv", (SPUGenericFunction) printTexEnviv },
	{ "TexGend", (SPUGenericFunction) printTexGend },
	{ "TexGendv", (SPUGenericFunction) printTexGendv },
	{ "TexGenf", (SPUGenericFunction) printTexGenf },
	{ "TexGenfv", (SPUGenericFunction) printTexGenfv },
	{ "TexGeni", (SPUGenericFunction) printTexGeni },
	{ "TexGeniv", (SPUGenericFunction) printTexGeniv },
	{ "TexImage1D", (SPUGenericFunction) printTexImage1D },
	{ "TexImage2D", (SPUGenericFunction) printTexImage2D },
	{ "TexImage3D", (SPUGenericFunction) printTexImage3D },
	{ "TexImage3DEXT", (SPUGenericFunction) printTexImage3DEXT },
	{ "TexParameterf", (SPUGenericFunction) printTexParameterf },
	{ "TexParameterfv", (SPUGenericFunction) printTexParameterfv },
	{ "TexParameteri", (SPUGenericFunction) printTexParameteri },
	{ "TexParameteriv", (SPUGenericFunction) printTexParameteriv },
	{ "TexSubImage1D", (SPUGenericFunction) printTexSubImage1D },
	{ "TexSubImage2D", (SPUGenericFunction) printTexSubImage2D },
	{ "TexSubImage3D", (SPUGenericFunction) printTexSubImage3D },
	{ "TrackMatrixNV", (SPUGenericFunction) printTrackMatrixNV },
	{ "Translated", (SPUGenericFunction) printTranslated },
	{ "Translatef", (SPUGenericFunction) printTranslatef },
	{ "UnmapBufferARB", (SPUGenericFunction) printUnmapBufferARB },
	{ "Vertex2d", (SPUGenericFunction) printVertex2d },
	{ "Vertex2dv", (SPUGenericFunction) printVertex2dv },
	{ "Vertex2f", (SPUGenericFunction) printVertex2f },
	{ "Vertex2fv", (SPUGenericFunction) printVertex2fv },
	{ "Vertex2i", (SPUGenericFunction) printVertex2i },
	{ "Vertex2iv", (SPUGenericFunction) printVertex2iv },
	{ "Vertex2s", (SPUGenericFunction) printVertex2s },
	{ "Vertex2sv", (SPUGenericFunction) printVertex2sv },
	{ "Vertex3d", (SPUGenericFunction) printVertex3d },
	{ "Vertex3dv", (SPUGenericFunction) printVertex3dv },
	{ "Vertex3f", (SPUGenericFunction) printVertex3f },
	{ "Vertex3fv", (SPUGenericFunction) printVertex3fv },
	{ "Vertex3i", (SPUGenericFunction) printVertex3i },
	{ "Vertex3iv", (SPUGenericFunction) printVertex3iv },
	{ "Vertex3s", (SPUGenericFunction) printVertex3s },
	{ "Vertex3sv", (SPUGenericFunction) printVertex3sv },
	{ "Vertex4d", (SPUGenericFunction) printVertex4d },
	{ "Vertex4dv", (SPUGenericFunction) printVertex4dv },
	{ "Vertex4f", (SPUGenericFunction) printVertex4f },
	{ "Vertex4fv", (SPUGenericFunction) printVertex4fv },
	{ "Vertex4i", (SPUGenericFunction) printVertex4i },
	{ "Vertex4iv", (SPUGenericFunction) printVertex4iv },
	{ "Vertex4s", (SPUGenericFunction) printVertex4s },
	{ "Vertex4sv", (SPUGenericFunction) printVertex4sv },
	{ "VertexArrayRangeNV", (SPUGenericFunction) printVertexArrayRangeNV },
	{ "VertexAttrib1dARB", (SPUGenericFunction) printVertexAttrib1dARB },
	{ "VertexAttrib1dvARB", (SPUGenericFunction) printVertexAttrib1dvARB },
	{ "VertexAttrib1fARB", (SPUGenericFunction) printVertexAttrib1fARB },
	{ "VertexAttrib1fvARB", (SPUGenericFunction) printVertexAttrib1fvARB },
	{ "VertexAttrib1sARB", (SPUGenericFunction) printVertexAttrib1sARB },
	{ "VertexAttrib1svARB", (SPUGenericFunction) printVertexAttrib1svARB },
	{ "VertexAttrib2dARB", (SPUGenericFunction) printVertexAttrib2dARB },
	{ "VertexAttrib2dvARB", (SPUGenericFunction) printVertexAttrib2dvARB },
	{ "VertexAttrib2fARB", (SPUGenericFunction) printVertexAttrib2fARB },
	{ "VertexAttrib2fvARB", (SPUGenericFunction) printVertexAttrib2fvARB },
	{ "VertexAttrib2sARB", (SPUGenericFunction) printVertexAttrib2sARB },
	{ "VertexAttrib2svARB", (SPUGenericFunction) printVertexAttrib2svARB },
	{ "VertexAttrib3dARB", (SPUGenericFunction) printVertexAttrib3dARB },
	{ "VertexAttrib3dvARB", (SPUGenericFunction) printVertexAttrib3dvARB },
	{ "VertexAttrib3fARB", (SPUGenericFunction) printVertexAttrib3fARB },
	{ "VertexAttrib3fvARB", (SPUGenericFunction) printVertexAttrib3fvARB },
	{ "VertexAttrib3sARB", (SPUGenericFunction) printVertexAttrib3sARB },
	{ "VertexAttrib3svARB", (SPUGenericFunction) printVertexAttrib3svARB },
	{ "VertexAttrib4NbvARB", (SPUGenericFunction) printVertexAttrib4NbvARB },
	{ "VertexAttrib4NivARB", (SPUGenericFunction) printVertexAttrib4NivARB },
	{ "VertexAttrib4NsvARB", (SPUGenericFunction) printVertexAttrib4NsvARB },
	{ "VertexAttrib4NubARB", (SPUGenericFunction) printVertexAttrib4NubARB },
	{ "VertexAttrib4NubvARB", (SPUGenericFunction) printVertexAttrib4NubvARB },
	{ "VertexAttrib4NuivARB", (SPUGenericFunction) printVertexAttrib4NuivARB },
	{ "VertexAttrib4NusvARB", (SPUGenericFunction) printVertexAttrib4NusvARB },
	{ "VertexAttrib4bvARB", (SPUGenericFunction) printVertexAttrib4bvARB },
	{ "VertexAttrib4dARB", (SPUGenericFunction) printVertexAttrib4dARB },
	{ "VertexAttrib4dvARB", (SPUGenericFunction) printVertexAttrib4dvARB },
	{ "VertexAttrib4fARB", (SPUGenericFunction) printVertexAttrib4fARB },
	{ "VertexAttrib4fvARB", (SPUGenericFunction) printVertexAttrib4fvARB },
	{ "VertexAttrib4ivARB", (SPUGenericFunction) printVertexAttrib4ivARB },
	{ "VertexAttrib4sARB", (SPUGenericFunction) printVertexAttrib4sARB },
	{ "VertexAttrib4svARB", (SPUGenericFunction) printVertexAttrib4svARB },
	{ "VertexAttrib4ubvARB", (SPUGenericFunction) printVertexAttrib4ubvARB },
	{ "VertexAttrib4uivARB", (SPUGenericFunction) printVertexAttrib4uivARB },
	{ "VertexAttrib4usvARB", (SPUGenericFunction) printVertexAttrib4usvARB },
	{ "VertexAttribPointerARB", (SPUGenericFunction) printVertexAttribPointerARB },
	{ "VertexAttribPointerNV", (SPUGenericFunction) printVertexAttribPointerNV },
	{ "VertexAttribs1dvNV", (SPUGenericFunction) printVertexAttribs1dvNV },
	{ "VertexAttribs1fvNV", (SPUGenericFunction) printVertexAttribs1fvNV },
	{ "VertexAttribs1svNV", (SPUGenericFunction) printVertexAttribs1svNV },
	{ "VertexAttribs2dvNV", (SPUGenericFunction) printVertexAttribs2dvNV },
	{ "VertexAttribs2fvNV", (SPUGenericFunction) printVertexAttribs2fvNV },
	{ "VertexAttribs2svNV", (SPUGenericFunction) printVertexAttribs2svNV },
	{ "VertexAttribs3dvNV", (SPUGenericFunction) printVertexAttribs3dvNV },
	{ "VertexAttribs3fvNV", (SPUGenericFunction) printVertexAttribs3fvNV },
	{ "VertexAttribs3svNV", (SPUGenericFunction) printVertexAttribs3svNV },
	{ "VertexAttribs4dvNV", (SPUGenericFunction) printVertexAttribs4dvNV },
	{ "VertexAttribs4fvNV", (SPUGenericFunction) printVertexAttribs4fvNV },
	{ "VertexAttribs4svNV", (SPUGenericFunction) printVertexAttribs4svNV },
	{ "VertexAttribs4ubvNV", (SPUGenericFunction) printVertexAttribs4ubvNV },
	{ "VertexPointer", (SPUGenericFunction) printVertexPointer },
	{ "Viewport", (SPUGenericFunction) printViewport },
	{ "WindowCreate", (SPUGenericFunction) printWindowCreate },
	{ "WindowDestroy", (SPUGenericFunction) printWindowDestroy },
	{ "WindowPos2dARB", (SPUGenericFunction) printWindowPos2dARB },
	{ "WindowPos2dvARB", (SPUGenericFunction) printWindowPos2dvARB },
	{ "WindowPos2fARB", (SPUGenericFunction) printWindowPos2fARB },
	{ "WindowPos2fvARB", (SPUGenericFunction) printWindowPos2fvARB },
	{ "WindowPos2iARB", (SPUGenericFunction) printWindowPos2iARB },
	{ "WindowPos2ivARB", (SPUGenericFunction) printWindowPos2ivARB },
	{ "WindowPos2sARB", (SPUGenericFunction) printWindowPos2sARB },
	{ "WindowPos2svARB", (SPUGenericFunction) printWindowPos2svARB },
	{ "WindowPos3dARB", (SPUGenericFunction) printWindowPos3dARB },
	{ "WindowPos3dvARB", (SPUGenericFunction) printWindowPos3dvARB },
	{ "WindowPos3fARB", (SPUGenericFunction) printWindowPos3fARB },
	{ "WindowPos3fvARB", (SPUGenericFunction) printWindowPos3fvARB },
	{ "WindowPos3iARB", (SPUGenericFunction) printWindowPos3iARB },
	{ "WindowPos3ivARB", (SPUGenericFunction) printWindowPos3ivARB },
	{ "WindowPos3sARB", (SPUGenericFunction) printWindowPos3sARB },
	{ "WindowPos3svARB", (SPUGenericFunction) printWindowPos3svARB },
	{ "WindowPosition", (SPUGenericFunction) printWindowPosition },
	{ "WindowShow", (SPUGenericFunction) printWindowShow },
	{ "WindowSize", (SPUGenericFunction) printWindowSize },
	{ "Writeback", (SPUGenericFunction) printWriteback },
	{ "ZPixCR", (SPUGenericFunction) printZPixCR },
	{ NULL, NULL }
};
