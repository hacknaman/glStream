# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

# This script generates the spu_dispatch_table.h file from gl_header.parsed

import sys,os;
import cPickle;
import string;
import re;

parsed_file = open( "../../glapi_parser/gl_header.parsed", "rb" )
gl_mapping = cPickle.load( parsed_file )

sys.path.append( "../../opengl_stub" )

import stub_common;

stub_common.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE GENERATED BY THE dispatchheader.py SCRIPT */

#ifndef CR_SPU_DISPATCH_TABLE_H
#define CR_SPU_DISPATCH_TABLE_H

#ifdef WINDOWS
#define SPU_APIENTRY __stdcall
#else
#define SPU_APIENTRY
#endif

#include "state/cr_statetypes.h"
#include "cr_glwrapper.h"
"""

keys = gl_mapping.keys()
keys.sort();

for func_name in keys:
	(return_type, names, types) = gl_mapping[func_name]
	print 'typedef %s (SPU_APIENTRY *%sFunc_t)(%s);' % (return_type, func_name, string.join(types, ', '))

print 'struct _copy_list_node;'

print 'typedef struct _spu_dispatch_table {'

for i in range(len(keys)):
	func_name = keys[i]
	(return_type, names, types) = gl_mapping[func_name]

	print "\t%sFunc_t %s; " % ( func_name, func_name )

print """
    struct _copy_list_node *copyList;
    struct _spu_dispatch_table *copy_of;
    struct _spu_dispatch_table *chain_parent;
} SPUDispatchTable;

struct _copy_list_node {
    SPUDispatchTable *copy;
    struct _copy_list_node *next;
};


#endif /* CR_SPU_DISPATCH_TABLE_H */
"""
