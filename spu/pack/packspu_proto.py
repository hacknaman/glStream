# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys,os;
import cPickle;
import string;
import re;

sys.path.append( "../../opengl_stub" )
parsed_file = open( "../../glapi_parser/gl_header.parsed", "rb" )
gl_mapping = cPickle.load( parsed_file )

import stub_common;

keys = gl_mapping.keys()
keys.sort();



stub_common.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY packspu_proto.py SCRIPT */

#ifndef PACKSPU_FUNCTIONS_H
#define PACKSPU_FUNCTIONS_H 1

#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "packspu.h"
#include "cr_packfunctions.h"
"""


pack_specials = []

for func_name in keys:
	(return_type, args, types) = gl_mapping[func_name]
	if (return_type != 'void' or 
	    stub_common.FindSpecial( "packspu", func_name ) or 
	    stub_common.FindSpecial( "packspu_pixel", func_name ) or 
	    stub_common.FindSpecial( "packspu_flush", func_name ) or 
	    stub_common.FindSpecial( "packspu_client", func_name ) or 
	    stub_common.FindSpecial( "packspu_vertex", func_name ) or 
	    stub_common.FindSpecial( "../../packer/packer_get", func_name )):
	  pack_specials.append( func_name )

for func_name in keys:
	(return_type, args, types) = gl_mapping[func_name]
	if stub_common.FindSpecial( "packspu_unimplemented", func_name ):
		continue
	if func_name in pack_specials:
		print 'extern %s PACKSPU_APIENTRY packspu_%s%s;' % ( return_type, func_name, stub_common.ArgumentString( args, types ) )


print """
#endif
"""
