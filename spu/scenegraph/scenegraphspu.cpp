/* Copyright (c) 2001, Stanford University
    All rights reserved.

    See the file LICENSE.txt for information on redistributing this software. */


/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY print.py SCRIPT */
#include <stdio.h>
#include "cr_error.h"
#include "cr_spu.h"
#include "scenegraphspu.h"
#include <osg/Group>
#include <osg/Geode>
#include <osg/Node>
#include <osg/Geometry>
#include <osg/PositionAttitudeTransform>
#include <OpenThreads/Mutex>
//#include <osgViewer/Viewer>

#define PRINT_UNUSED(x) ((void)x)

osg::Vec3Array* vertexArray;
osg::Vec3Array* normalArray;
osg::Vec4Array* colorArray;
osg::Geometry* geom;
osg::Geode* geode;

osg::PositionAttitudeTransform* listPat;
bool groupAdded = false;
//osgViewer::Viewer* viewer;

osg::Group* group = new osg::Group;

// update translation Values
osg::Vec3f translateData;

// updated Rotation Values
osg::Quat rotateData;

// update the Pat at the index
int patIndexToChange = -1;

// flag to check if the translation is to be done or not
bool dirtyTranslation = false;

// flag to check if the translation is to be done or not
bool dirtyRotation = false;

int normalBindMode = -1;

int materialBindMode = -1;

int geometryMode = -1;

OpenThreads::Mutex _mutex;

OpenThreads::Block transformationLock;

// flag to check if the transformation is being read
bool startReading = false;
bool newContextCreated = false;

void reset(){
    patIndexToChange = -1;
    dirtyTranslation = false;

    dirtyRotation = false;

    normalBindMode = -1;

    materialBindMode = -1;

    geometryMode = -1;
    groupAdded = false;

    group = new osg::Group;
}

extern osg::Group* appUpdate(){
    if (startReading){
        transformationLock.block();
    }

    if (patIndexToChange != -1){
        
        if (dirtyTranslation){
            osg::PositionAttitudeTransform* pat = dynamic_cast<osg::PositionAttitudeTransform*>(group->getChild(patIndexToChange-1));
            if (pat){
                pat->setPosition(osg::Vec3(translateData[0], translateData[2], translateData[1]));
            }
        }
        if (dirtyRotation){
            osg::PositionAttitudeTransform* pat = dynamic_cast<osg::PositionAttitudeTransform*>(group->getChild(patIndexToChange-1));

            if (pat){
                double angle = osg::DegreesToRadians(rotateData[0]);
                pat->setAttitude(osg::Quat(angle, rotateData[1], -rotateData[3], rotateData[2]));
            }
        }

        transformationLock.release();
    }
    if (dirtyTranslation && patIndexToChange ==-1){
        transformationLock.release();
        dirtyTranslation = false;
    }

    if (dirtyRotation && patIndexToChange == -1){
        transformationLock.release();
        dirtyRotation= false;
    }

    if (group != NULL && group->getNumChildren() > 2 && !groupAdded){
        groupAdded = true;

        return group;
    }
    return NULL;
}

extern bool refreshGroup(){
    if (newContextCreated){
        newContextCreated = false;
        return true;
    }
    return false;
}

static void PRINT_APIENTRY printAccum(GLenum op, GLfloat value)
{
    fprintf(print_spu.fp, "Accum( %s, %f )\n", printspuEnumToStr(op), (float)value);
    fflush(print_spu.fp);
    print_spu.passthrough.Accum(op, value);
}

static void PRINT_APIENTRY printActiveTextureARB(GLenum texture)
{
    fprintf(print_spu.fp, "ActiveTextureARB( %s )\n", printspuEnumToStr(texture));
    fflush(print_spu.fp);
    print_spu.passthrough.ActiveTextureARB(texture);
}

static void PRINT_APIENTRY printAlphaFunc(GLenum func, GLclampf ref)
{
    fprintf(print_spu.fp, "AlphaFunc( %s, %f )\n", printspuEnumToStr(func), (float)ref);
    fflush(print_spu.fp);
    print_spu.passthrough.AlphaFunc(func, ref);
}

static GLboolean PRINT_APIENTRY printAreProgramsResidentNV(GLsizei n, const GLuint * ids, GLboolean * residences)
{
    fprintf(print_spu.fp, "AreProgramsResidentNV( %u, %p, %p )\n", (unsigned)n, (void *)ids, (void *)residences);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.AreProgramsResidentNV(n, ids, residences);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences)
{
    fprintf(print_spu.fp, "AreTexturesResident( %u, %p, %p )\n", (unsigned)n, (void *)textures, (void *)residences);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.AreTexturesResident(n, textures, residences);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printArrayElement(GLint i)
{
    fprintf(print_spu.fp, "ArrayElement( %d )\n", (int)i);
    fflush(print_spu.fp);
    print_spu.passthrough.ArrayElement(i);
}

static void PRINT_APIENTRY printBarrierCreateCR(GLuint name, GLuint count)
{
    fprintf(print_spu.fp, "BarrierCreateCR( %u, %u )\n", (unsigned)name, (unsigned)count);
    fflush(print_spu.fp);
    print_spu.passthrough.BarrierCreateCR(name, count);
}

static void PRINT_APIENTRY printBarrierDestroyCR(GLuint name)
{
    fprintf(print_spu.fp, "BarrierDestroyCR( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.BarrierDestroyCR(name);
}

static void PRINT_APIENTRY printBarrierExecCR(GLuint name)
{
    fprintf(print_spu.fp, "BarrierExecCR( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.BarrierExecCR(name);
}

static void PRINT_APIENTRY printBegin(GLenum mode)
{
    fprintf(print_spu.fp, "Begin( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.Begin(mode);

    geometryMode = mode;

    /*if (normalArray->size() > 0){
        normalBindMode = osg::Array::BIND_OVERALL;
        }
        else{
        normalArray = new osg::Vec3Array();
        }
        if (colorArray->size() > 0){
        materialBindMode = osg::Array::BIND_OVERALL;
        }
        else{
        colorArray = new osg::Vec4Array();
        }*/
    if (colorArray->size() > 0){
        materialBindMode = osg::Array::BIND_OVERALL;
        }
        else{
        colorArray = new osg::Vec4Array();
        }
    vertexArray = new osg::Vec3Array();
    groupAdded = false;
}

static void PRINT_APIENTRY printBeginQueryARB(GLenum target, GLuint id)
{
    fprintf(print_spu.fp, "BeginQueryARB( %s, %u )\n", printspuEnumToStr(target), (unsigned)id);
    fflush(print_spu.fp);
    print_spu.passthrough.BeginQueryARB(target, id);
}

static void PRINT_APIENTRY printBindBufferARB(GLenum target, GLuint buffer)
{
    fprintf(print_spu.fp, "BindBufferARB( %s, %u )\n", printspuEnumToStr(target), (unsigned)buffer);
    fflush(print_spu.fp);
    print_spu.passthrough.BindBufferARB(target, buffer);
}

static void PRINT_APIENTRY printBindProgramARB(GLenum target, GLuint program)
{
    fprintf(print_spu.fp, "BindProgramARB( %s, %u )\n", printspuEnumToStr(target), (unsigned)program);
    fflush(print_spu.fp);
    print_spu.passthrough.BindProgramARB(target, program);
}

static void PRINT_APIENTRY printBindProgramNV(GLenum target, GLuint id)
{
    fprintf(print_spu.fp, "BindProgramNV( %s, %u )\n", printspuEnumToStr(target), (unsigned)id);
    fflush(print_spu.fp);
    print_spu.passthrough.BindProgramNV(target, id);
}

static void PRINT_APIENTRY printBindTexture(GLenum target, GLuint texture)
{
    fprintf(print_spu.fp, "BindTexture( %s, %u )\n", printspuEnumToStr(target), (unsigned)texture);
    fflush(print_spu.fp);
    print_spu.passthrough.BindTexture(target, texture);
}

static void PRINT_APIENTRY printBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap)
{
    fprintf(print_spu.fp, "Bitmap( %u, %u, %f, %f, %f, %f, %p )\n", (unsigned)width, (unsigned)height, (float)xorig, (float)yorig, (float)xmove, (float)ymove, (void *)bitmap);
    fflush(print_spu.fp);
    print_spu.passthrough.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

static void PRINT_APIENTRY printBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    fprintf(print_spu.fp, "BlendColorEXT( %f, %f, %f, %f )\n", (float)red, (float)green, (float)blue, (float)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.BlendColorEXT(red, green, blue, alpha);
}

static void PRINT_APIENTRY printBlendEquationEXT(GLenum mode)
{
    fprintf(print_spu.fp, "BlendEquationEXT( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.BlendEquationEXT(mode);
}

static void PRINT_APIENTRY printBlendFunc(GLenum sfactor, GLenum dfactor)
{
    fprintf(print_spu.fp, "BlendFunc( %s, %s )\n", printspuEnumToStr(sfactor), printspuEnumToStr(dfactor));
    fflush(print_spu.fp);
    print_spu.passthrough.BlendFunc(sfactor, dfactor);
}

static void PRINT_APIENTRY printBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorA, GLenum dfactorA)
{
    fprintf(print_spu.fp, "BlendFuncSeparateEXT( %s, %s, %s, %s )\n", printspuEnumToStr(sfactorRGB), printspuEnumToStr(dfactorRGB), printspuEnumToStr(sfactorA), printspuEnumToStr(dfactorA));
    fflush(print_spu.fp);
    print_spu.passthrough.BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorA, dfactorA);
}

static void PRINT_APIENTRY printBoundsInfoCR(const CRrecti * bounds, const GLbyte * payload, GLint len, GLint num_opcodes)
{
    fprintf(print_spu.fp, "BoundsInfoCR( %p, %p, %d, %d )\n", (void *)bounds, (void *)payload, (int)len, (int)num_opcodes);
    fflush(print_spu.fp);
    print_spu.passthrough.BoundsInfoCR(bounds, payload, len, num_opcodes);
}

static void PRINT_APIENTRY printBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage)
{
    fprintf(print_spu.fp, "BufferDataARB( %s, %p, %p, %s )\n", printspuEnumToStr(target), (void *)size, (void *)data, printspuEnumToStr(usage));
    fflush(print_spu.fp);
    print_spu.passthrough.BufferDataARB(target, size, data, usage);
}

static void PRINT_APIENTRY printBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data)
{
    fprintf(print_spu.fp, "BufferSubDataARB( %s, %p, %p, %p )\n", printspuEnumToStr(target), (void *)offset, (void *)size, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.BufferSubDataARB(target, offset, size, data);
}

static void PRINT_APIENTRY printCallList(GLuint list)
{
    fprintf(print_spu.fp, "CallList( %u )\n", (unsigned)list);
    fflush(print_spu.fp);
    print_spu.passthrough.CallList(list);
    // store the pat number to be updated

    patIndexToChange = list;
}

static void PRINT_APIENTRY printChromiumParameterfCR(GLenum target, GLfloat value)
{
    fprintf(print_spu.fp, "ChromiumParameterfCR( %s, %f )\n", printspuEnumToStr(target), (float)value);
    fflush(print_spu.fp);
    print_spu.passthrough.ChromiumParameterfCR(target, value);
}

static void PRINT_APIENTRY printClear(GLbitfield mask)
{
    fprintf(print_spu.fp, "Clear( 0x%x )\n", (int)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.Clear(mask);
}

static void PRINT_APIENTRY printClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    fprintf(print_spu.fp, "ClearAccum( %f, %f, %f, %f )\n", (float)red, (float)green, (float)blue, (float)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.ClearAccum(red, green, blue, alpha);
}

static void PRINT_APIENTRY printClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    fprintf(print_spu.fp, "ClearColor( %f, %f, %f, %f )\n", (float)red, (float)green, (float)blue, (float)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.ClearColor(red, green, blue, alpha);
}

static void PRINT_APIENTRY printClearDepth(GLclampd depth)
{
    fprintf(print_spu.fp, "ClearDepth( %f )\n", (float)depth);
    fflush(print_spu.fp);
    print_spu.passthrough.ClearDepth(depth);
}

static void PRINT_APIENTRY printClearIndex(GLfloat c)
{
    fprintf(print_spu.fp, "ClearIndex( %f )\n", (float)c);
    fflush(print_spu.fp);
    print_spu.passthrough.ClearIndex(c);
}

static void PRINT_APIENTRY printClearStencil(GLint s)
{
    fprintf(print_spu.fp, "ClearStencil( %d )\n", (int)s);
    fflush(print_spu.fp);
    print_spu.passthrough.ClearStencil(s);
}

static void PRINT_APIENTRY printClientActiveTextureARB(GLenum texture)
{
    fprintf(print_spu.fp, "ClientActiveTextureARB( %s )\n", printspuEnumToStr(texture));
    fflush(print_spu.fp);
    print_spu.passthrough.ClientActiveTextureARB(texture);
}

static void PRINT_APIENTRY printClipPlane(GLenum plane, const GLdouble * equation)
{
    fprintf(print_spu.fp, "ClipPlane( %s, [%f, %f, %f, %f] )\n", printspuEnumToStr(plane), (float)equation[0], (float)equation[1], (float)equation[2], (float)equation[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ClipPlane(plane, equation);
}

static void PRINT_APIENTRY printColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    fprintf(print_spu.fp, "Color3b( %d, %d, %d )\n", (int)red, (int)green, (int)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3b(red, green, blue);
}

static void PRINT_APIENTRY printColor3bv(const GLbyte * v)
{
    fprintf(print_spu.fp, "Color3bv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3bv(v);
}

static void PRINT_APIENTRY printColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    fprintf(print_spu.fp, "Color3d( %f, %f, %f )\n", (float)red, (float)green, (float)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3d(red, green, blue);
}

static void PRINT_APIENTRY printColor3dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Color3dv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3dv(v);
}

static void PRINT_APIENTRY printColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    fprintf(print_spu.fp, "Color3f( %f, %f, %f )\n", (float)red, (float)green, (float)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3f(red, green, blue);
}

static void PRINT_APIENTRY printColor3fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Color3fv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3fv(v);
}

static void PRINT_APIENTRY printColor3i(GLint red, GLint green, GLint blue)
{
    fprintf(print_spu.fp, "Color3i( %d, %d, %d )\n", (int)red, (int)green, (int)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3i(red, green, blue);
}

static void PRINT_APIENTRY printColor3iv(const GLint * v)
{
    fprintf(print_spu.fp, "Color3iv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3iv(v);
}

static void PRINT_APIENTRY printColor3s(GLshort red, GLshort green, GLshort blue)
{
    fprintf(print_spu.fp, "Color3s( %hd, %hd, %hd )\n", (short)red, (short)green, (short)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3s(red, green, blue);
}

static void PRINT_APIENTRY printColor3sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Color3sv( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3sv(v);
}

static void PRINT_APIENTRY printColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    fprintf(print_spu.fp, "Color3ub( %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3ub(red, green, blue);
}

static void PRINT_APIENTRY printColor3ubv(const GLubyte * v)
{
    fprintf(print_spu.fp, "Color3ubv( [%u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3ubv(v);
}

static void PRINT_APIENTRY printColor3ui(GLuint red, GLuint green, GLuint blue)
{
    fprintf(print_spu.fp, "Color3ui( %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3ui(red, green, blue);
}

static void PRINT_APIENTRY printColor3uiv(const GLuint * v)
{
    fprintf(print_spu.fp, "Color3uiv( [%u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3uiv(v);
}

static void PRINT_APIENTRY printColor3us(GLushort red, GLushort green, GLushort blue)
{
    fprintf(print_spu.fp, "Color3us( %hu, %hu, %hu )\n", (unsigned short)red, (unsigned short)green, (unsigned short)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3us(red, green, blue);
}

static void PRINT_APIENTRY printColor3usv(const GLushort * v)
{
    fprintf(print_spu.fp, "Color3usv( [%hu, %hu, %hu] )\n", (unsigned short)v[0], (unsigned short)v[1], (unsigned short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color3usv(v);
}

static void PRINT_APIENTRY printColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
    fprintf(print_spu.fp, "Color4b( %d, %d, %d, %d )\n", (int)red, (int)green, (int)blue, (int)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4b(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4bv(const GLbyte * v)
{
    fprintf(print_spu.fp, "Color4bv( [%d, %d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4bv(v);
}

static void PRINT_APIENTRY printColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
    fprintf(print_spu.fp, "Color4d( %f, %f, %f, %f )\n", (float)red, (float)green, (float)blue, (float)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4d(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Color4dv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4dv(v);
}

static void PRINT_APIENTRY printColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    fprintf(print_spu.fp, "Color4f( %f, %f, %f, %f )\n", (float)red, (float)green, (float)blue, (float)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4f(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Color4fv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4fv(v);
}

static void PRINT_APIENTRY printColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
    fprintf(print_spu.fp, "Color4i( %d, %d, %d, %d )\n", (int)red, (int)green, (int)blue, (int)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4i(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4iv(const GLint * v)
{
    fprintf(print_spu.fp, "Color4iv( [%d, %d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4iv(v);
}

static void PRINT_APIENTRY printColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
    fprintf(print_spu.fp, "Color4s( %hd, %hd, %hd, %hd )\n", (short)red, (short)green, (short)blue, (short)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4s(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Color4sv( [%hd, %hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4sv(v);
}

static void PRINT_APIENTRY printColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    fprintf(print_spu.fp, "Color4ub( %u, %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue, (unsigned)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4ub(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4ubv(const GLubyte * v)
{
    fprintf(print_spu.fp, "Color4ubv( [%u, %u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4ubv(v);
}

static void PRINT_APIENTRY printColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    fprintf(print_spu.fp, "Color4ui( %u, %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue, (unsigned)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4ui(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4uiv(const GLuint * v)
{
    fprintf(print_spu.fp, "Color4uiv( [%u, %u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4uiv(v);
}

static void PRINT_APIENTRY printColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
    fprintf(print_spu.fp, "Color4us( %hu, %hu, %hu, %hu )\n", (unsigned short)red, (unsigned short)green, (unsigned short)blue, (unsigned short)alpha);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4us(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColor4usv(const GLushort * v)
{
    fprintf(print_spu.fp, "Color4usv( [%hu, %hu, %hu, %hu] )\n", (unsigned short)v[0], (unsigned short)v[1], (unsigned short)v[2], (unsigned short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Color4usv(v);
}

static void PRINT_APIENTRY printColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    fprintf(print_spu.fp, "ColorMask( %s, %s, %s, %s )\n", red ? "GL_TRUE" : "GL_FALSE", green ? "GL_TRUE" : "GL_FALSE", blue ? "GL_TRUE" : "GL_FALSE", alpha ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.ColorMask(red, green, blue, alpha);
}

static void PRINT_APIENTRY printColorMaterial(GLenum face, GLenum mode)
{
    fprintf(print_spu.fp, "ColorMaterial( %s, %s )\n", printspuEnumToStr(face), printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.ColorMaterial(face, mode);
}

static void PRINT_APIENTRY printColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "ColorPointer( %d, %s, %u, %p )\n", (int)size, printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.ColorPointer(size, type, stride, pointer);
}

static void PRINT_APIENTRY printCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    fprintf(print_spu.fp, "CombinerInputNV( %s, %s, %s, %s, %s, %s )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(variable), printspuEnumToStr(input), printspuEnumToStr(mapping), printspuEnumToStr(componentUsage));
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

static void PRINT_APIENTRY printCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
    fprintf(print_spu.fp, "CombinerOutputNV( %s, %s, %s, %s, %s, %s, %s, %s, %s, %s )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(abOutput), printspuEnumToStr(cdOutput), printspuEnumToStr(sumOutput), printspuEnumToStr(scale), printspuEnumToStr(bias), abDotProduct ? "GL_TRUE" : "GL_FALSE", cdDotProduct ? "GL_TRUE" : "GL_FALSE", muxSum ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

static void PRINT_APIENTRY printCombinerParameterfNV(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "CombinerParameterfNV( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerParameterfNV(pname, param);
}

static void PRINT_APIENTRY printCombinerParameterfvNV(GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "CombinerParameterfvNV( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerParameterfvNV(pname, params);
}

static void PRINT_APIENTRY printCombinerParameteriNV(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "CombinerParameteriNV( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerParameteriNV(pname, param);
}

static void PRINT_APIENTRY printCombinerParameterivNV(GLenum pname, const GLint * params)
{
    fprintf(print_spu.fp, "CombinerParameterivNV( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerParameterivNV(pname, params);
}

static void PRINT_APIENTRY printCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "CombinerStageParameterfvNV( %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.CombinerStageParameterfvNV(stage, pname, params);
}

static void PRINT_APIENTRY printCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexImage1DARB( %s, %d, %s, %u, %d, %u, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (unsigned)width, (int)border, (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexImage1DARB(target, level, internalFormat, width, border, imagesize, data);
}

static void PRINT_APIENTRY printCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexImage2DARB( %s, %d, %s, %u, %u, %d, %u, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (unsigned)width, (unsigned)height, (int)border, (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexImage2DARB(target, level, internalFormat, width, height, border, imagesize, data);
}

static void PRINT_APIENTRY printCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexImage3DARB( %s, %d, %s, %u, %u, %u, %d, %u, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (unsigned)width, (unsigned)height, (unsigned)depth, (int)border, (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexImage3DARB(target, level, internalFormat, width, height, depth, border, imagesize, data);
}

static void PRINT_APIENTRY printCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexSubImage1DARB( %s, %d, %d, %u, %s, %u, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (unsigned)width, printspuEnumToStr(format), (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexSubImage1DARB(target, level, xoffset, width, format, imagesize, data);
}

static void PRINT_APIENTRY printCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexSubImage2DARB( %s, %d, %d, %d, %u, %u, %s, %u, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (unsigned)width, (unsigned)height, printspuEnumToStr(format), (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imagesize, data);
}

static void PRINT_APIENTRY printCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data)
{
    fprintf(print_spu.fp, "CompressedTexSubImage3DARB( %s, %d, %d, %d, %d, %u, %u, %u, %s, %u, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (int)zoffset, (unsigned)width, (unsigned)height, (unsigned)depth, printspuEnumToStr(format), (unsigned)imagesize, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imagesize, data);
}

static void PRINT_APIENTRY printCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
    fprintf(print_spu.fp, "CopyPixels( %d, %d, %u, %u, %s )\n", (int)x, (int)y, (unsigned)width, (unsigned)height, printspuEnumToStr(type));
    fflush(print_spu.fp);
    print_spu.passthrough.CopyPixels(x, y, width, height, type);
}

static void PRINT_APIENTRY printCopyTexImage1D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border)
{
    fprintf(print_spu.fp, "CopyTexImage1D( %s, %d, %s, %d, %d, %u, %d )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (int)x, (int)y, (unsigned)width, (int)border);
    fflush(print_spu.fp);
    print_spu.passthrough.CopyTexImage1D(target, level, internalFormat, x, y, width, border);
}

static void PRINT_APIENTRY printCopyTexImage2D(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    fprintf(print_spu.fp, "CopyTexImage2D( %s, %d, %s, %d, %d, %u, %u, %d )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (int)x, (int)y, (unsigned)width, (unsigned)height, (int)border);
    fflush(print_spu.fp);
    print_spu.passthrough.CopyTexImage2D(target, level, internalFormat, x, y, width, height, border);
}

static void PRINT_APIENTRY printCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    fprintf(print_spu.fp, "CopyTexSubImage1D( %s, %d, %d, %d, %d, %u )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)x, (int)y, (unsigned)width);
    fflush(print_spu.fp);
    print_spu.passthrough.CopyTexSubImage1D(target, level, xoffset, x, y, width);
}

static void PRINT_APIENTRY printCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    fprintf(print_spu.fp, "CopyTexSubImage2D( %s, %d, %d, %d, %d, %d, %u, %u )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (int)x, (int)y, (unsigned)width, (unsigned)height);
    fflush(print_spu.fp);
    print_spu.passthrough.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

static void PRINT_APIENTRY printCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    fprintf(print_spu.fp, "CopyTexSubImage3D( %s, %d, %d, %d, %d, %d, %d, %u, %u )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (int)zoffset, (int)x, (int)y, (unsigned)width, (unsigned)height);
    fflush(print_spu.fp);
    print_spu.passthrough.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static GLint PRINT_APIENTRY printCreateContext(const char * dpyName, GLint visual, GLint shareCtx)
{
    fprintf(print_spu.fp, "CreateContext( %p, %d, %d )\n", (void *)dpyName, (int)visual, (int)shareCtx);
    newContextCreated = true;
    reset();
    fflush(print_spu.fp);
    {
        int res = print_spu.passthrough.CreateContext(dpyName, visual, shareCtx);
        fprintf(print_spu.fp, "= %d\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printCullFace(GLenum mode)
{
    fprintf(print_spu.fp, "CullFace( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.CullFace(mode);
}

static void PRINT_APIENTRY printDeleteBuffersARB(GLsizei n, const GLuint * buffer)
{
    fprintf(print_spu.fp, "DeleteBuffersARB( %u, %p )\n", (unsigned)n, (void *)buffer);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteBuffersARB(n, buffer);
}

static void PRINT_APIENTRY printDeleteFencesNV(GLsizei n, const GLuint * fences)
{
    fprintf(print_spu.fp, "DeleteFencesNV( %u, %p )\n", (unsigned)n, (void *)fences);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteFencesNV(n, fences);
}

static void PRINT_APIENTRY printDeleteLists(GLuint list, GLsizei range)
{
    fprintf(print_spu.fp, "DeleteLists( %u, %u )\n", (unsigned)list, (unsigned)range);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteLists(list, range);
}

static void PRINT_APIENTRY printDeleteProgramsARB(GLsizei n, const GLuint * programs)
{
    fprintf(print_spu.fp, "DeleteProgramsARB( %u, %p )\n", (unsigned)n, (void *)programs);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteProgramsARB(n, programs);
}

static void PRINT_APIENTRY printDeleteQueriesARB(GLsizei n, const GLuint * ids)
{
    fprintf(print_spu.fp, "DeleteQueriesARB( %u, %p )\n", (unsigned)n, (void *)ids);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteQueriesARB(n, ids);
}

static void PRINT_APIENTRY printDeleteTextures(GLsizei n, const GLuint * textures)
{
    fprintf(print_spu.fp, "DeleteTextures( %u, %p )\n", (unsigned)n, (void *)textures);
    fflush(print_spu.fp);
    print_spu.passthrough.DeleteTextures(n, textures);
}

static void PRINT_APIENTRY printDepthFunc(GLenum func)
{
    fprintf(print_spu.fp, "DepthFunc( %s )\n", printspuEnumToStr(func));
    fflush(print_spu.fp);
    print_spu.passthrough.DepthFunc(func);
}

static void PRINT_APIENTRY printDepthMask(GLboolean flag)
{
    fprintf(print_spu.fp, "DepthMask( %s )\n", flag ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.DepthMask(flag);
}

static void PRINT_APIENTRY printDepthRange(GLclampd zNear, GLclampd zFar)
{
    fprintf(print_spu.fp, "DepthRange( %f, %f )\n", (float)zNear, (float)zFar);
    fflush(print_spu.fp);
    print_spu.passthrough.DepthRange(zNear, zFar);
}

static void PRINT_APIENTRY printDestroyContext(GLint ctx)
{
    fprintf(print_spu.fp, "DestroyContext( %d )\n", (int)ctx);
    fflush(print_spu.fp);
    print_spu.passthrough.DestroyContext(ctx);
}

static void PRINT_APIENTRY printDisable(GLenum cap)
{
    fprintf(print_spu.fp, "Disable( %s )\n", printspuEnumToStr(cap));
    fflush(print_spu.fp);
    print_spu.passthrough.Disable(cap);
}

static void PRINT_APIENTRY printDisableClientState(GLenum array)
{
    fprintf(print_spu.fp, "DisableClientState( %s )\n", printspuEnumToStr(array));
    fflush(print_spu.fp);
    print_spu.passthrough.DisableClientState(array);
}

static void PRINT_APIENTRY printDisableVertexAttribArrayARB(GLuint index)
{
    fprintf(print_spu.fp, "DisableVertexAttribArrayARB( %u )\n", (unsigned)index);
    fflush(print_spu.fp);
    print_spu.passthrough.DisableVertexAttribArrayARB(index);
}

static void PRINT_APIENTRY printDrawArrays(GLenum mode, GLint first, GLsizei count)
{
    fprintf(print_spu.fp, "DrawArrays( %s, %d, %u )\n", printspuEnumToStr(mode), (int)first, (unsigned)count);
    fflush(print_spu.fp);
    print_spu.passthrough.DrawArrays(mode, first, count);
}

static void PRINT_APIENTRY printDrawBuffer(GLenum mode)
{
    fprintf(print_spu.fp, "DrawBuffer( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.DrawBuffer(mode);
}

static void PRINT_APIENTRY printDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices)
{
    fprintf(print_spu.fp, "DrawElements( %s, %u, %s, %p )\n", printspuEnumToStr(mode), (unsigned)count, printspuEnumToStr(type), (void *)indices);
    fflush(print_spu.fp);
    print_spu.passthrough.DrawElements(mode, count, type, indices);
}

static void PRINT_APIENTRY printDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "DrawPixels( %u, %u, %s, %s, %p )\n", (unsigned)width, (unsigned)height, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.DrawPixels(width, height, format, type, pixels);
}

static void PRINT_APIENTRY printDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices)
{
    fprintf(print_spu.fp, "DrawRangeElements( %s, %u, %u, %u, %s, %p )\n", printspuEnumToStr(mode), (unsigned)start, (unsigned)end, (unsigned)count, printspuEnumToStr(type), (void *)indices);
    fflush(print_spu.fp);
    print_spu.passthrough.DrawRangeElements(mode, start, end, count, type, indices);
}

static void PRINT_APIENTRY printEdgeFlag(GLboolean flag)
{
    fprintf(print_spu.fp, "EdgeFlag( %s )\n", flag ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.EdgeFlag(flag);
}

static void PRINT_APIENTRY printEdgeFlagPointer(GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "EdgeFlagPointer( %u, %p )\n", (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.EdgeFlagPointer(stride, pointer);
}

static void PRINT_APIENTRY printEdgeFlagv(const GLboolean * flag)
{
    fprintf(print_spu.fp, "EdgeFlagv( [%s] )\n", flag[0] ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.EdgeFlagv(flag);
}

static void PRINT_APIENTRY printEnable(GLenum cap)
{
    fprintf(print_spu.fp, "Enable( %s )\n", printspuEnumToStr(cap));
    fflush(print_spu.fp);
    print_spu.passthrough.Enable(cap);
}

static void PRINT_APIENTRY printEnableClientState(GLenum array)
{
    fprintf(print_spu.fp, "EnableClientState( %s )\n", printspuEnumToStr(array));
    fflush(print_spu.fp);
    print_spu.passthrough.EnableClientState(array);
}

static void PRINT_APIENTRY printEnableVertexAttribArrayARB(GLuint index)
{
    fprintf(print_spu.fp, "EnableVertexAttribArrayARB( %u )\n", (unsigned)index);
    fflush(print_spu.fp);
    print_spu.passthrough.EnableVertexAttribArrayARB(index);
}

// 
static void PRINT_APIENTRY printEnd(void)
{
    fprintf(print_spu.fp, "End(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.End();

    geom = new osg::Geometry();
    // create a geode and add it to the pat
    if (vertexArray->size() > 0){
        geom->setVertexArray(vertexArray);

        //// set normal Array if valid
        //if (normalArray->size() > 0){
        //    if (normalBindMode != -1){
        //        geom->setNormalArray(normalArray, osg::Array::BIND_OVERALL);
        //    }
        //    else{
        //        geom->setNormalArray(normalArray, osg::Array::BIND_PER_VERTEX);
        //    }
        //}
        //// set color array if valid
        //if (colorArray->size() > 0){
        //    if (materialBindMode != -1){
        //        geom->setColorArray(colorArray, osg::Array::BIND_OVERALL);
        //    }
        //    else{
        //        geom->setColorArray(colorArray, osg::Array::BIND_PER_VERTEX);
        //    }
        //}
        // set color array if valid
        if (colorArray->size() > 0){
            geom->setColorArray(colorArray, osg::Array::BIND_OVERALL);

        }
        geom->addPrimitiveSet(new osg::DrawArrays(geometryMode, 0, vertexArray->size()));

        geode->addDrawable(geom);
    }
    /*normalArray->clear();
    vertexArray->clear();
    colorArray->clear();*/
}

static void PRINT_APIENTRY printEndList(void)
{


    fprintf(print_spu.fp, "EndList(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.EndList();
    // create Pat and add geode to the pat.
    OpenThreads::ScopedLock<OpenThreads::Mutex> lock(_mutex);
    listPat = new osg::PositionAttitudeTransform();

    // add geode to pat if valid
    if (geode){
        if (geode->getNumChildren() > 0){
            listPat->addChild(geode);
        }
    }
    if (listPat){
        //_groupLock.block();
        listPat->setScale(osg::Vec3(1000.0, 1000.0, 1000.0));
        group->addChild(listPat);
    }
}

static void PRINT_APIENTRY printEndQueryARB(GLenum target)
{
    fprintf(print_spu.fp, "EndQueryARB( %s )\n", printspuEnumToStr(target));
    fflush(print_spu.fp);
    print_spu.passthrough.EndQueryARB(target);
}

static void PRINT_APIENTRY printEvalCoord1d(GLdouble u)
{
    fprintf(print_spu.fp, "EvalCoord1d( %f )\n", (float)u);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord1d(u);
}

static void PRINT_APIENTRY printEvalCoord1dv(const GLdouble * u)
{
    fprintf(print_spu.fp, "EvalCoord1dv( [%f] )\n", (float)u[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord1dv(u);
}

static void PRINT_APIENTRY printEvalCoord1f(GLfloat u)
{
    fprintf(print_spu.fp, "EvalCoord1f( %f )\n", (float)u);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord1f(u);
}

static void PRINT_APIENTRY printEvalCoord1fv(const GLfloat * u)
{
    fprintf(print_spu.fp, "EvalCoord1fv( [%f] )\n", (float)u[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord1fv(u);
}

static void PRINT_APIENTRY printEvalCoord2d(GLdouble u, GLdouble v)
{
    fprintf(print_spu.fp, "EvalCoord2d( %f, %f )\n", (float)u, (float)v);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord2d(u, v);
}

static void PRINT_APIENTRY printEvalCoord2dv(const GLdouble * u)
{
    fprintf(print_spu.fp, "EvalCoord2dv( [%f, %f] )\n", (float)u[0], (float)u[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord2dv(u);
}

static void PRINT_APIENTRY printEvalCoord2f(GLfloat u, GLfloat v)
{
    fprintf(print_spu.fp, "EvalCoord2f( %f, %f )\n", (float)u, (float)v);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord2f(u, v);
}

static void PRINT_APIENTRY printEvalCoord2fv(const GLfloat * u)
{
    fprintf(print_spu.fp, "EvalCoord2fv( [%f, %f] )\n", (float)u[0], (float)u[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalCoord2fv(u);
}

static void PRINT_APIENTRY printEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
    fprintf(print_spu.fp, "EvalMesh1( %s, %d, %d )\n", printspuEnumToStr(mode), (int)i1, (int)i2);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalMesh1(mode, i1, i2);
}

static void PRINT_APIENTRY printEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
    fprintf(print_spu.fp, "EvalMesh2( %s, %d, %d, %d, %d )\n", printspuEnumToStr(mode), (int)i1, (int)i2, (int)j1, (int)j2);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalMesh2(mode, i1, i2, j1, j2);
}

static void PRINT_APIENTRY printEvalPoint1(GLint i)
{
    fprintf(print_spu.fp, "EvalPoint1( %d )\n", (int)i);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalPoint1(i);
}

static void PRINT_APIENTRY printEvalPoint2(GLint i, GLint j)
{
    fprintf(print_spu.fp, "EvalPoint2( %d, %d )\n", (int)i, (int)j);
    fflush(print_spu.fp);
    print_spu.passthrough.EvalPoint2(i, j);
}

static void PRINT_APIENTRY printExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params)
{
    fprintf(print_spu.fp, "ExecuteProgramNV( %s, %u, %p )\n", printspuEnumToStr(target), (unsigned)id, (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.ExecuteProgramNV(target, id, params);
}

static void PRINT_APIENTRY printFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer)
{
    fprintf(print_spu.fp, "FeedbackBuffer( %u, %s, %p )\n", (unsigned)size, printspuEnumToStr(type), (void *)buffer);
    fflush(print_spu.fp);
    print_spu.passthrough.FeedbackBuffer(size, type, buffer);
}

static void PRINT_APIENTRY printFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    fprintf(print_spu.fp, "FinalCombinerInputNV( %s, %s, %s, %s )\n", printspuEnumToStr(variable), printspuEnumToStr(input), printspuEnumToStr(mapping), printspuEnumToStr(componentUsage));
    fflush(print_spu.fp);
    print_spu.passthrough.FinalCombinerInputNV(variable, input, mapping, componentUsage);
}

static void PRINT_APIENTRY printFinish(void)
{
    fprintf(print_spu.fp, "Finish(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.Finish();
}

static void PRINT_APIENTRY printFinishFenceNV(GLuint fence)
{
    fprintf(print_spu.fp, "FinishFenceNV( %u )\n", (unsigned)fence);
    fflush(print_spu.fp);
    print_spu.passthrough.FinishFenceNV(fence);
}

static void PRINT_APIENTRY printFlush(void)
{
    fprintf(print_spu.fp, "Flush(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.Flush();
}

static void PRINT_APIENTRY printFlushVertexArrayRangeNV(void)
{
    fprintf(print_spu.fp, "FlushVertexArrayRangeNV(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.FlushVertexArrayRangeNV();
}

static void PRINT_APIENTRY printFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "FogCoordPointerEXT( %s, %u, %p )\n", printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.FogCoordPointerEXT(type, stride, pointer);
}

static void PRINT_APIENTRY printFogCoorddEXT(GLdouble coord)
{
    fprintf(print_spu.fp, "FogCoorddEXT( %f )\n", (float)coord);
    fflush(print_spu.fp);
    print_spu.passthrough.FogCoorddEXT(coord);
}

static void PRINT_APIENTRY printFogCoorddvEXT(const GLdouble * coord)
{
    fprintf(print_spu.fp, "FogCoorddvEXT( [%f] )\n", (float)coord[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.FogCoorddvEXT(coord);
}

static void PRINT_APIENTRY printFogCoordfEXT(GLfloat coord)
{
    fprintf(print_spu.fp, "FogCoordfEXT( %f )\n", (float)coord);
    fflush(print_spu.fp);
    print_spu.passthrough.FogCoordfEXT(coord);
}

static void PRINT_APIENTRY printFogCoordfvEXT(const GLfloat * coord)
{
    fprintf(print_spu.fp, "FogCoordfvEXT( [%f] )\n", (float)coord[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.FogCoordfvEXT(coord);
}

static void PRINT_APIENTRY printFogf(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "Fogf( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Fogf(pname, param);
}

static void PRINT_APIENTRY printFogfv(GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "Fogfv( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.Fogfv(pname, params);
}

static void PRINT_APIENTRY printFogi(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "Fogi( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Fogi(pname, param);
}

static void PRINT_APIENTRY printFogiv(GLenum pname, const GLint * params)
{
    fprintf(print_spu.fp, "Fogiv( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.Fogiv(pname, params);
}

static void PRINT_APIENTRY printFrontFace(GLenum mode)
{
    fprintf(print_spu.fp, "FrontFace( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.FrontFace(mode);
}

static void PRINT_APIENTRY printFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    fprintf(print_spu.fp, "Frustum( %f, %f, %f, %f, %f, %f )\n", (float)left, (float)right, (float)bottom, (float)top, (float)zNear, (float)zFar);
    fflush(print_spu.fp);
    print_spu.passthrough.Frustum(left, right, bottom, top, zNear, zFar);
}

static void PRINT_APIENTRY printGenBuffersARB(GLsizei n, GLuint * buffer)
{
    fprintf(print_spu.fp, "GenBuffersARB( %u, %p )\n", (unsigned)n, (void *)buffer);
    fflush(print_spu.fp);
    print_spu.passthrough.GenBuffersARB(n, buffer);
}

static void PRINT_APIENTRY printGenFencesNV(GLsizei n, GLuint * fences)
{
    fprintf(print_spu.fp, "GenFencesNV( %u, %p )\n", (unsigned)n, (void *)fences);
    fflush(print_spu.fp);
    print_spu.passthrough.GenFencesNV(n, fences);
}

static GLuint PRINT_APIENTRY printGenLists(GLsizei range)
{
    fprintf(print_spu.fp, "GenLists( %u )\n", (unsigned)range);
    fflush(print_spu.fp);
    {
        unsigned res = print_spu.passthrough.GenLists(range);
        fprintf(print_spu.fp, "= %u\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printGenProgramsARB(GLsizei n, GLuint * programs)
{
    fprintf(print_spu.fp, "GenProgramsARB( %u, %p )\n", (unsigned)n, (void *)programs);
    fflush(print_spu.fp);
    print_spu.passthrough.GenProgramsARB(n, programs);
}

static void PRINT_APIENTRY printGenProgramsNV(GLsizei n, GLuint * ids)
{
    fprintf(print_spu.fp, "GenProgramsNV( %u, %p )\n", (unsigned)n, (void *)ids);
    fflush(print_spu.fp);
    print_spu.passthrough.GenProgramsNV(n, ids);
}

static void PRINT_APIENTRY printGenQueriesARB(GLsizei n, GLuint * ids)
{
    fprintf(print_spu.fp, "GenQueriesARB( %u, %p )\n", (unsigned)n, (void *)ids);
    fflush(print_spu.fp);
    print_spu.passthrough.GenQueriesARB(n, ids);
}

static void PRINT_APIENTRY printGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetBufferParameterivARB( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetBufferParameterivARB(target, pname, params);
}

static void PRINT_APIENTRY printGetBufferPointervARB(GLenum target, GLenum pname, GLvoid ** params)
{
    fprintf(print_spu.fp, "GetBufferPointervARB( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetBufferPointervARB(target, pname, params);
}

static void PRINT_APIENTRY printGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data)
{
    fprintf(print_spu.fp, "GetBufferSubDataARB( %s, %p, %p, %p )\n", printspuEnumToStr(target), (void *)offset, (void *)size, (void *)data);
    fflush(print_spu.fp);
    print_spu.passthrough.GetBufferSubDataARB(target, offset, size, data);
}

static void PRINT_APIENTRY printGetChromiumParametervCR(GLenum target, GLuint index, GLenum type, GLsizei count, GLvoid * values)
{
    fprintf(print_spu.fp, "GetChromiumParametervCR( %s, %u, %s, %u, %p )\n", printspuEnumToStr(target), (unsigned)index, printspuEnumToStr(type), (unsigned)count, (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.GetChromiumParametervCR(target, index, type, count, values);
}

static void PRINT_APIENTRY printGetClipPlane(GLenum plane, GLdouble * equation)
{
    fprintf(print_spu.fp, "GetClipPlane( %s, [%f, %f, %f, %f] )\n", printspuEnumToStr(plane), (float)equation[0], (float)equation[1], (float)equation[2], (float)equation[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetClipPlane(plane, equation);
}

static void PRINT_APIENTRY printGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetCombinerInputParameterfvNV( %s, %s, %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(variable), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

static void PRINT_APIENTRY printGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetCombinerInputParameterivNV( %s, %s, %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(variable), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

static void PRINT_APIENTRY printGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetCombinerOutputParameterfvNV( %s, %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

static void PRINT_APIENTRY printGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetCombinerOutputParameterivNV( %s, %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(portion), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCombinerOutputParameterivNV(stage, portion, pname, params);
}

static void PRINT_APIENTRY printGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetCombinerStageParameterfvNV( %s, %s, %p )\n", printspuEnumToStr(stage), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCombinerStageParameterfvNV(stage, pname, params);
}

static void PRINT_APIENTRY printGetCompressedTexImageARB(GLenum target, GLint level, GLvoid * img)
{
    fprintf(print_spu.fp, "GetCompressedTexImageARB( %s, %d, %p )\n", printspuEnumToStr(target), (int)level, (void *)img);
    fflush(print_spu.fp);
    print_spu.passthrough.GetCompressedTexImageARB(target, level, img);
}

static GLenum PRINT_APIENTRY printGetError(void)
{
    fprintf(print_spu.fp, "GetError(  )\n");
    fflush(print_spu.fp);
    return print_spu.passthrough.GetError();
}

static void PRINT_APIENTRY printGetFenceivNV(GLuint fence, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetFenceivNV( %u, %s, %p )\n", (unsigned)fence, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetFenceivNV(fence, pname, params);
}

static void PRINT_APIENTRY printGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetFinalCombinerInputParameterfvNV( %s, %s, %p )\n", printspuEnumToStr(variable), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetFinalCombinerInputParameterfvNV(variable, pname, params);
}

static void PRINT_APIENTRY printGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetFinalCombinerInputParameterivNV( %s, %s, %p )\n", printspuEnumToStr(variable), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetFinalCombinerInputParameterivNV(variable, pname, params);
}

static void PRINT_APIENTRY printGetLightfv(GLenum light, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetLightfv( %s, %s, %p )\n", printspuEnumToStr(light), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetLightfv(light, pname, params);
}

static void PRINT_APIENTRY printGetLightiv(GLenum light, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetLightiv( %s, %s, %p )\n", printspuEnumToStr(light), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetLightiv(light, pname, params);
}

static void PRINT_APIENTRY printGetMapdv(GLenum target, GLenum query, GLdouble * v)
{
    fprintf(print_spu.fp, "GetMapdv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(query), (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.GetMapdv(target, query, v);
}

static void PRINT_APIENTRY printGetMapfv(GLenum target, GLenum query, GLfloat * v)
{
    fprintf(print_spu.fp, "GetMapfv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(query), (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.GetMapfv(target, query, v);
}

static void PRINT_APIENTRY printGetMapiv(GLenum target, GLenum query, GLint * v)
{
    fprintf(print_spu.fp, "GetMapiv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(query), (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.GetMapiv(target, query, v);
}

static void PRINT_APIENTRY printGetMaterialfv(GLenum face, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetMaterialfv( %s, %s, %p )\n", printspuEnumToStr(face), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetMaterialfv(face, pname, params);
}

static void PRINT_APIENTRY printGetMaterialiv(GLenum face, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetMaterialiv( %s, %s, %p )\n", printspuEnumToStr(face), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetMaterialiv(face, pname, params);
}

static void PRINT_APIENTRY printGetPixelMapfv(GLenum map, GLfloat * values)
{
    fprintf(print_spu.fp, "GetPixelMapfv( %s, %p )\n", printspuEnumToStr(map), (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.GetPixelMapfv(map, values);
}

static void PRINT_APIENTRY printGetPixelMapuiv(GLenum map, GLuint * values)
{
    fprintf(print_spu.fp, "GetPixelMapuiv( %s, %p )\n", printspuEnumToStr(map), (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.GetPixelMapuiv(map, values);
}

static void PRINT_APIENTRY printGetPixelMapusv(GLenum map, GLushort * values)
{
    fprintf(print_spu.fp, "GetPixelMapusv( %s, %p )\n", printspuEnumToStr(map), (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.GetPixelMapusv(map, values);
}

static void PRINT_APIENTRY printGetPointerv(GLenum pname, GLvoid ** params)
{
    fprintf(print_spu.fp, "GetPointerv( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetPointerv(pname, params);
}

static void PRINT_APIENTRY printGetPolygonStipple(GLubyte * mask)
{
    fprintf(print_spu.fp, "GetPolygonStipple( %p )\n", (void *)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.GetPolygonStipple(mask);
}

static void PRINT_APIENTRY printGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params)
{
    fprintf(print_spu.fp, "GetProgramEnvParameterdvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramEnvParameterdvARB(target, index, params);
}

static void PRINT_APIENTRY printGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params)
{
    fprintf(print_spu.fp, "GetProgramEnvParameterfvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramEnvParameterfvARB(target, index, params);
}

static void PRINT_APIENTRY printGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params)
{
    fprintf(print_spu.fp, "GetProgramLocalParameterdvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramLocalParameterdvARB(target, index, params);
}

static void PRINT_APIENTRY printGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params)
{
    fprintf(print_spu.fp, "GetProgramLocalParameterfvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramLocalParameterfvARB(target, index, params);
}

static void PRINT_APIENTRY printGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params)
{
    fprintf(print_spu.fp, "GetProgramNamedParameterdvNV( %u, %u, %p, [%f, %f, %f, %f] )\n", (unsigned)id, (unsigned)len, (void *)name, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramNamedParameterdvNV(id, len, name, params);
}

static void PRINT_APIENTRY printGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params)
{
    fprintf(print_spu.fp, "GetProgramNamedParameterfvNV( %u, %u, %p, [%f, %f, %f, %f] )\n", (unsigned)id, (unsigned)len, (void *)name, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramNamedParameterfvNV(id, len, name, params);
}

static void PRINT_APIENTRY printGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params)
{
    fprintf(print_spu.fp, "GetProgramParameterdvNV( %s, %u, %s, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, printspuEnumToStr(pname), (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramParameterdvNV(target, index, pname, params);
}

static void PRINT_APIENTRY printGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetProgramParameterfvNV( %s, %u, %s, %p )\n", printspuEnumToStr(target), (unsigned)index, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramParameterfvNV(target, index, pname, params);
}

static void PRINT_APIENTRY printGetProgramStringARB(GLenum target, GLenum pname, GLvoid * string)
{
    fprintf(print_spu.fp, "GetProgramStringARB( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)string);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramStringARB(target, pname, string);
}

static void PRINT_APIENTRY printGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program)
{
    fprintf(print_spu.fp, "GetProgramStringNV( %u, %s, %p )\n", (unsigned)id, printspuEnumToStr(pname), (void *)program);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramStringNV(id, pname, program);
}

static void PRINT_APIENTRY printGetProgramivARB(GLenum target, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetProgramivARB( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramivARB(target, pname, params);
}

static void PRINT_APIENTRY printGetProgramivNV(GLuint id, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetProgramivNV( %u, %s, %p )\n", (unsigned)id, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetProgramivNV(id, pname, params);
}

static void PRINT_APIENTRY printGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetQueryObjectivARB( %u, %s, %p )\n", (unsigned)id, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetQueryObjectivARB(id, pname, params);
}

static void PRINT_APIENTRY printGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params)
{
    fprintf(print_spu.fp, "GetQueryObjectuivARB( %u, %s, %p )\n", (unsigned)id, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetQueryObjectuivARB(id, pname, params);
}

static void PRINT_APIENTRY printGetQueryivARB(GLenum target, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetQueryivARB( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetQueryivARB(target, pname, params);
}

static const GLubyte * PRINT_APIENTRY printGetString(GLenum name)
{
    fprintf(print_spu.fp, "GetString( %s )\n", printspuEnumToStr(name));
    fflush(print_spu.fp);
    return print_spu.passthrough.GetString(name);
}

static void PRINT_APIENTRY printGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetTexEnvfv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexEnvfv(target, pname, params);
}

static void PRINT_APIENTRY printGetTexEnviv(GLenum target, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetTexEnviv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexEnviv(target, pname, params);
}

static void PRINT_APIENTRY printGetTexGendv(GLenum coord, GLenum pname, GLdouble * params)
{
    fprintf(print_spu.fp, "GetTexGendv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexGendv(coord, pname, params);
}

static void PRINT_APIENTRY printGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetTexGenfv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexGenfv(coord, pname, params);
}

static void PRINT_APIENTRY printGetTexGeniv(GLenum coord, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetTexGeniv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexGeniv(coord, pname, params);
}

static void PRINT_APIENTRY printGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels)
{
    fprintf(print_spu.fp, "GetTexImage( %s, %d, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexImage(target, level, format, type, pixels);
}

static void PRINT_APIENTRY printGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetTexLevelParameterfv( %s, %d, %s, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexLevelParameterfv(target, level, pname, params);
}

static void PRINT_APIENTRY printGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetTexLevelParameteriv( %s, %d, %s, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexLevelParameteriv(target, level, pname, params);
}

static void PRINT_APIENTRY printGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetTexParameterfv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexParameterfv(target, pname, params);
}

static void PRINT_APIENTRY printGetTexParameteriv(GLenum target, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetTexParameteriv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTexParameteriv(target, pname, params);
}

static void PRINT_APIENTRY printGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetTrackMatrixivNV( %s, %u, %s, %p )\n", printspuEnumToStr(target), (unsigned)address, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetTrackMatrixivNV(target, address, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid ** pointer)
{
    fprintf(print_spu.fp, "GetVertexAttribPointervARB( %u, %s, %p )\n", (unsigned)index, printspuEnumToStr(pname), (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribPointervARB(index, pname, pointer);
}

static void PRINT_APIENTRY printGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid ** pointer)
{
    fprintf(print_spu.fp, "GetVertexAttribPointervNV( %u, %s, %p )\n", (unsigned)index, printspuEnumToStr(pname), (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribPointervNV(index, pname, pointer);
}

static void PRINT_APIENTRY printGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params)
{
    fprintf(print_spu.fp, "GetVertexAttribdvARB( %u, %s, [%f, %f, %f, %f] )\n", (unsigned)index, printspuEnumToStr(pname), (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribdvARB(index, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params)
{
    fprintf(print_spu.fp, "GetVertexAttribdvNV( %u, %s, %p )\n", (unsigned)index, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribdvNV(index, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetVertexAttribfvARB( %u, %s, [%f, %f, %f, %f] )\n", (unsigned)index, printspuEnumToStr(pname), (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribfvARB(index, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params)
{
    fprintf(print_spu.fp, "GetVertexAttribfvNV( %u, %s, %p )\n", (unsigned)index, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribfvNV(index, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetVertexAttribivARB( %u, %s, [%d, %d, %d, %d] )\n", (unsigned)index, printspuEnumToStr(pname), (int)params[0], (int)params[1], (int)params[2], (int)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribivARB(index, pname, params);
}

static void PRINT_APIENTRY printGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params)
{
    fprintf(print_spu.fp, "GetVertexAttribivNV( %u, %s, %p )\n", (unsigned)index, printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.GetVertexAttribivNV(index, pname, params);
}

static void PRINT_APIENTRY printHint(GLenum target, GLenum mode)
{
    fprintf(print_spu.fp, "Hint( %s, %s )\n", printspuEnumToStr(target), printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.Hint(target, mode);
}

static void PRINT_APIENTRY printIndexMask(GLuint mask)
{
    fprintf(print_spu.fp, "IndexMask( %u )\n", (unsigned)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.IndexMask(mask);
}

static void PRINT_APIENTRY printIndexPointer(GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "IndexPointer( %s, %u, %p )\n", printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.IndexPointer(type, stride, pointer);
}

static void PRINT_APIENTRY printIndexd(GLdouble c)
{
    fprintf(print_spu.fp, "Indexd( %f )\n", (float)c);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexd(c);
}

static void PRINT_APIENTRY printIndexdv(const GLdouble * c)
{
    fprintf(print_spu.fp, "Indexdv( [%f] )\n", (float)c[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexdv(c);
}

static void PRINT_APIENTRY printIndexf(GLfloat c)
{
    fprintf(print_spu.fp, "Indexf( %f )\n", (float)c);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexf(c);
}

static void PRINT_APIENTRY printIndexfv(const GLfloat * c)
{
    fprintf(print_spu.fp, "Indexfv( [%f] )\n", (float)c[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexfv(c);
}

static void PRINT_APIENTRY printIndexi(GLint c)
{
    fprintf(print_spu.fp, "Indexi( %d )\n", (int)c);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexi(c);
}

static void PRINT_APIENTRY printIndexiv(const GLint * c)
{
    fprintf(print_spu.fp, "Indexiv( [%d] )\n", (int)c[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexiv(c);
}

static void PRINT_APIENTRY printIndexs(GLshort c)
{
    fprintf(print_spu.fp, "Indexs( %hd )\n", (short)c);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexs(c);
}

static void PRINT_APIENTRY printIndexsv(const GLshort * c)
{
    fprintf(print_spu.fp, "Indexsv( [%hd] )\n", (short)c[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexsv(c);
}

static void PRINT_APIENTRY printIndexub(GLubyte c)
{
    fprintf(print_spu.fp, "Indexub( %u )\n", (unsigned)c);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexub(c);
}

static void PRINT_APIENTRY printIndexubv(const GLubyte * c)
{
    fprintf(print_spu.fp, "Indexubv( [%u] )\n", (unsigned)c[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.Indexubv(c);
}

static void PRINT_APIENTRY printInitNames(void)
{
    fprintf(print_spu.fp, "InitNames(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.InitNames();
}

static void PRINT_APIENTRY printInterleavedArrays(GLenum format, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "InterleavedArrays( %s, %u, %p )\n", printspuEnumToStr(format), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.InterleavedArrays(format, stride, pointer);
}

static GLboolean PRINT_APIENTRY printIsBufferARB(GLuint buffer)
{
    fprintf(print_spu.fp, "IsBufferARB( %u )\n", (unsigned)buffer);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsBufferARB(buffer);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsEnabled(GLenum cap)
{
    fprintf(print_spu.fp, "IsEnabled( %s )\n", printspuEnumToStr(cap));
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsEnabled(cap);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsFenceNV(GLuint fence)
{
    fprintf(print_spu.fp, "IsFenceNV( %u )\n", (unsigned)fence);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsFenceNV(fence);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsList(GLuint list)
{
    fprintf(print_spu.fp, "IsList( %u )\n", (unsigned)list);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsList(list);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsProgramARB(GLuint program)
{
    fprintf(print_spu.fp, "IsProgramARB( %u )\n", (unsigned)program);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsProgramARB(program);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsQueryARB(GLuint id)
{
    fprintf(print_spu.fp, "IsQueryARB( %u )\n", (unsigned)id);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsQueryARB(id);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static GLboolean PRINT_APIENTRY printIsTexture(GLuint texture)
{
    fprintf(print_spu.fp, "IsTexture( %u )\n", (unsigned)texture);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.IsTexture(texture);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printLightModelf(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "LightModelf( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.LightModelf(pname, param);
}

static void PRINT_APIENTRY printLightModelfv(GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "LightModelfv( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.LightModelfv(pname, params);
}

static void PRINT_APIENTRY printLightModeli(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "LightModeli( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.LightModeli(pname, param);
}

static void PRINT_APIENTRY printLightModeliv(GLenum pname, const GLint * params)
{
    fprintf(print_spu.fp, "LightModeliv( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.LightModeliv(pname, params);
}

static void PRINT_APIENTRY printLightf(GLenum light, GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "Lightf( %s, %s, %f )\n", printspuEnumToStr(light), printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Lightf(light, pname, param);
}

static void PRINT_APIENTRY printLighti(GLenum light, GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "Lighti( %s, %s, %d )\n", printspuEnumToStr(light), printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Lighti(light, pname, param);
}

static void PRINT_APIENTRY printLineStipple(GLint factor, GLushort pattern)
{
    fprintf(print_spu.fp, "LineStipple( %d, %hu )\n", (int)factor, (unsigned short)pattern);
    fflush(print_spu.fp);
    print_spu.passthrough.LineStipple(factor, pattern);
}

static void PRINT_APIENTRY printLineWidth(GLfloat width)
{
    fprintf(print_spu.fp, "LineWidth( %f )\n", (float)width);
    fflush(print_spu.fp);
    print_spu.passthrough.LineWidth(width);
}

static void PRINT_APIENTRY printListBase(GLuint base)
{
    fprintf(print_spu.fp, "ListBase( %u )\n", (unsigned)base);
    fflush(print_spu.fp);
    print_spu.passthrough.ListBase(base);
}

static void PRINT_APIENTRY printLoadIdentity(void)
{
    fprintf(print_spu.fp, "LoadIdentity(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.LoadIdentity();
}

static void PRINT_APIENTRY printLoadName(GLuint name)
{
    fprintf(print_spu.fp, "LoadName( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.LoadName(name);
}

static void PRINT_APIENTRY printLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program)
{
    fprintf(print_spu.fp, "LoadProgramNV( %s, %u, %u, %p )\n", printspuEnumToStr(target), (unsigned)id, (unsigned)len, (void *)program);
    fflush(print_spu.fp);
    print_spu.passthrough.LoadProgramNV(target, id, len, program);
}

static void PRINT_APIENTRY printLoadTransposeMatrixdARB(const GLdouble * m)
{
    fprintf(print_spu.fp, "LoadTransposeMatrixdARB( [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f] )\n", (float)m[0], (float)m[1], (float)m[2], (float)m[3], (float)m[4], (float)m[5], (float)m[6], (float)m[7], (float)m[8], (float)m[9], (float)m[10], (float)m[11], (float)m[12], (float)m[13], (float)m[14], (float)m[15]);
    fflush(print_spu.fp);
    print_spu.passthrough.LoadTransposeMatrixdARB(m);
}

static void PRINT_APIENTRY printLoadTransposeMatrixfARB(const GLfloat * m)
{
    fprintf(print_spu.fp, "LoadTransposeMatrixfARB( [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f] )\n", (float)m[0], (float)m[1], (float)m[2], (float)m[3], (float)m[4], (float)m[5], (float)m[6], (float)m[7], (float)m[8], (float)m[9], (float)m[10], (float)m[11], (float)m[12], (float)m[13], (float)m[14], (float)m[15]);
    fflush(print_spu.fp);
    print_spu.passthrough.LoadTransposeMatrixfARB(m);
}

static void PRINT_APIENTRY printLogicOp(GLenum opcode)
{
    fprintf(print_spu.fp, "LogicOp( %s )\n", printspuEnumToStr(opcode));
    fflush(print_spu.fp);
    print_spu.passthrough.LogicOp(opcode);
}

static void PRINT_APIENTRY printMakeCurrent(GLint window, GLint nativeWindow, GLint ctx)
{
    fprintf(print_spu.fp, "MakeCurrent( %d, %d, %d )\n", (int)window, (int)nativeWindow, (int)ctx);
    fflush(print_spu.fp);
    print_spu.passthrough.MakeCurrent(window, nativeWindow, ctx);
}

static void PRINT_APIENTRY printMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points)
{
    fprintf(print_spu.fp, "Map1d( %s, %f, %f, %d, %d, %p )\n", printspuEnumToStr(target), (float)u1, (float)u2, (int)stride, (int)order, (void *)points);
    fflush(print_spu.fp);
    print_spu.passthrough.Map1d(target, u1, u2, stride, order, points);
}

static void PRINT_APIENTRY printMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points)
{
    fprintf(print_spu.fp, "Map1f( %s, %f, %f, %d, %d, %p )\n", printspuEnumToStr(target), (float)u1, (float)u2, (int)stride, (int)order, (void *)points);
    fflush(print_spu.fp);
    print_spu.passthrough.Map1f(target, u1, u2, stride, order, points);
}

static void PRINT_APIENTRY printMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points)
{
    fprintf(print_spu.fp, "Map2d( %s, %f, %f, %d, %d, %f, %f, %d, %d, %p )\n", printspuEnumToStr(target), (float)u1, (float)u2, (int)ustride, (int)uorder, (float)v1, (float)v2, (int)vstride, (int)vorder, (void *)points);
    fflush(print_spu.fp);
    print_spu.passthrough.Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void PRINT_APIENTRY printMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points)
{
    fprintf(print_spu.fp, "Map2f( %s, %f, %f, %d, %d, %f, %f, %d, %d, %p )\n", printspuEnumToStr(target), (float)u1, (float)u2, (int)ustride, (int)uorder, (float)v1, (float)v2, (int)vstride, (int)vorder, (void *)points);
    fflush(print_spu.fp);
    print_spu.passthrough.Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void * PRINT_APIENTRY printMapBufferARB(GLenum target, GLenum access)
{
    fprintf(print_spu.fp, "MapBufferARB( %s, %s )\n", printspuEnumToStr(target), printspuEnumToStr(access));
    fflush(print_spu.fp);
    return print_spu.passthrough.MapBufferARB(target, access);
}

static void PRINT_APIENTRY printMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
    fprintf(print_spu.fp, "MapGrid1d( %d, %f, %f )\n", (int)un, (float)u1, (float)u2);
    fflush(print_spu.fp);
    print_spu.passthrough.MapGrid1d(un, u1, u2);
}

static void PRINT_APIENTRY printMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
    fprintf(print_spu.fp, "MapGrid1f( %d, %f, %f )\n", (int)un, (float)u1, (float)u2);
    fflush(print_spu.fp);
    print_spu.passthrough.MapGrid1f(un, u1, u2);
}

static void PRINT_APIENTRY printMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
    fprintf(print_spu.fp, "MapGrid2d( %d, %f, %f, %d, %f, %f )\n", (int)un, (float)u1, (float)u2, (int)vn, (float)v1, (float)v2);
    fflush(print_spu.fp);
    print_spu.passthrough.MapGrid2d(un, u1, u2, vn, v1, v2);
}

static void PRINT_APIENTRY printMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
    fprintf(print_spu.fp, "MapGrid2f( %d, %f, %f, %d, %f, %f )\n", (int)un, (float)u1, (float)u2, (int)vn, (float)v1, (float)v2);
    fflush(print_spu.fp);
    print_spu.passthrough.MapGrid2f(un, u1, u2, vn, v1, v2);
}

static void PRINT_APIENTRY printMaterialf(GLenum face, GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "Materialf( %s, %s, %f )\n", printspuEnumToStr(face), printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Materialf(face, pname, param);
}

static void PRINT_APIENTRY printMateriali(GLenum face, GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "Materiali( %s, %s, %d )\n", printspuEnumToStr(face), printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.Materiali(face, pname, param);
}

static void PRINT_APIENTRY printMatrixMode(GLenum mode)
{
    fprintf(print_spu.fp, "MatrixMode( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.MatrixMode(mode);
}

static void PRINT_APIENTRY printMultTransposeMatrixdARB(const GLdouble * m)
{
    fprintf(print_spu.fp, "MultTransposeMatrixdARB( [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f] )\n", (float)m[0], (float)m[1], (float)m[2], (float)m[3], (float)m[4], (float)m[5], (float)m[6], (float)m[7], (float)m[8], (float)m[9], (float)m[10], (float)m[11], (float)m[12], (float)m[13], (float)m[14], (float)m[15]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultTransposeMatrixdARB(m);
}

static void PRINT_APIENTRY printMultTransposeMatrixfARB(const GLfloat * m)
{
    fprintf(print_spu.fp, "MultTransposeMatrixfARB( [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f] )\n", (float)m[0], (float)m[1], (float)m[2], (float)m[3], (float)m[4], (float)m[5], (float)m[6], (float)m[7], (float)m[8], (float)m[9], (float)m[10], (float)m[11], (float)m[12], (float)m[13], (float)m[14], (float)m[15]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultTransposeMatrixfARB(m);
}

static void PRINT_APIENTRY printMultiDrawArraysEXT(GLenum mode, GLint * first, GLsizei * count, GLsizei primcount)
{
    fprintf(print_spu.fp, "MultiDrawArraysEXT( %s, %p, %p, %u )\n", printspuEnumToStr(mode), (void *)first, (void *)count, (unsigned)primcount);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiDrawArraysEXT(mode, first, count, primcount);
}

static void PRINT_APIENTRY printMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const GLvoid ** indices, GLsizei primcount)
{
    fprintf(print_spu.fp, "MultiDrawElementsEXT( %s, %p, %s, %p, %u )\n", printspuEnumToStr(mode), (void *)count, printspuEnumToStr(type), (void *)indices, (unsigned)primcount);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiDrawElementsEXT(mode, count, type, indices, primcount);
}

static void PRINT_APIENTRY printMultiTexCoord1dARB(GLenum texture, GLdouble s)
{
    fprintf(print_spu.fp, "MultiTexCoord1dARB( %s, %f )\n", printspuEnumToStr(texture), (float)s);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1dARB(texture, s);
}

static void PRINT_APIENTRY printMultiTexCoord1dvARB(GLenum texture, const GLdouble * t)
{
    fprintf(print_spu.fp, "MultiTexCoord1dvARB( %s, [%f] )\n", printspuEnumToStr(texture), (float)t[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1dvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord1fARB(GLenum texture, GLfloat s)
{
    fprintf(print_spu.fp, "MultiTexCoord1fARB( %s, %f )\n", printspuEnumToStr(texture), (float)s);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1fARB(texture, s);
}

static void PRINT_APIENTRY printMultiTexCoord1fvARB(GLenum texture, const GLfloat * t)
{
    fprintf(print_spu.fp, "MultiTexCoord1fvARB( %s, [%f] )\n", printspuEnumToStr(texture), (float)t[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1fvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord1iARB(GLenum texture, GLint s)
{
    fprintf(print_spu.fp, "MultiTexCoord1iARB( %s, %d )\n", printspuEnumToStr(texture), (int)s);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1iARB(texture, s);
}

static void PRINT_APIENTRY printMultiTexCoord1ivARB(GLenum texture, const GLint * t)
{
    fprintf(print_spu.fp, "MultiTexCoord1ivARB( %s, [%d] )\n", printspuEnumToStr(texture), (int)t[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1ivARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord1sARB(GLenum texture, GLshort s)
{
    fprintf(print_spu.fp, "MultiTexCoord1sARB( %s, %hd )\n", printspuEnumToStr(texture), (short)s);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1sARB(texture, s);
}

static void PRINT_APIENTRY printMultiTexCoord1svARB(GLenum texture, const GLshort * t)
{
    fprintf(print_spu.fp, "MultiTexCoord1svARB( %s, [%hd] )\n", printspuEnumToStr(texture), (short)t[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord1svARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord2dARB(GLenum texture, GLdouble s, GLdouble t)
{
    fprintf(print_spu.fp, "MultiTexCoord2dARB( %s, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2dARB(texture, s, t);
}

static void PRINT_APIENTRY printMultiTexCoord2dvARB(GLenum texture, const GLdouble * t)
{
    fprintf(print_spu.fp, "MultiTexCoord2dvARB( %s, [%f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2dvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord2fARB(GLenum texture, GLfloat s, GLfloat t)
{
    fprintf(print_spu.fp, "MultiTexCoord2fARB( %s, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2fARB(texture, s, t);
}

static void PRINT_APIENTRY printMultiTexCoord2fvARB(GLenum texture, const GLfloat * t)
{
    fprintf(print_spu.fp, "MultiTexCoord2fvARB( %s, [%f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2fvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord2iARB(GLenum texture, GLint s, GLint t)
{
    fprintf(print_spu.fp, "MultiTexCoord2iARB( %s, %d, %d )\n", printspuEnumToStr(texture), (int)s, (int)t);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2iARB(texture, s, t);
}

static void PRINT_APIENTRY printMultiTexCoord2ivARB(GLenum texture, const GLint * t)
{
    fprintf(print_spu.fp, "MultiTexCoord2ivARB( %s, [%d, %d] )\n", printspuEnumToStr(texture), (int)t[0], (int)t[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2ivARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord2sARB(GLenum texture, GLshort s, GLshort t)
{
    fprintf(print_spu.fp, "MultiTexCoord2sARB( %s, %hd, %hd )\n", printspuEnumToStr(texture), (short)s, (short)t);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2sARB(texture, s, t);
}

static void PRINT_APIENTRY printMultiTexCoord2svARB(GLenum texture, const GLshort * t)
{
    fprintf(print_spu.fp, "MultiTexCoord2svARB( %s, [%hd, %hd] )\n", printspuEnumToStr(texture), (short)t[0], (short)t[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord2svARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord3dARB(GLenum texture, GLdouble s, GLdouble t, GLdouble r)
{
    fprintf(print_spu.fp, "MultiTexCoord3dARB( %s, %f, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t, (float)r);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3dARB(texture, s, t, r);
}

static void PRINT_APIENTRY printMultiTexCoord3dvARB(GLenum texture, const GLdouble * t)
{
    fprintf(print_spu.fp, "MultiTexCoord3dvARB( %s, [%f, %f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1], (float)t[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3dvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord3fARB(GLenum texture, GLfloat s, GLfloat t, GLfloat r)
{
    fprintf(print_spu.fp, "MultiTexCoord3fARB( %s, %f, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t, (float)r);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3fARB(texture, s, t, r);
}

static void PRINT_APIENTRY printMultiTexCoord3fvARB(GLenum texture, const GLfloat * t)
{
    fprintf(print_spu.fp, "MultiTexCoord3fvARB( %s, [%f, %f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1], (float)t[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3fvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord3iARB(GLenum texture, GLint s, GLint t, GLint r)
{
    fprintf(print_spu.fp, "MultiTexCoord3iARB( %s, %d, %d, %d )\n", printspuEnumToStr(texture), (int)s, (int)t, (int)r);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3iARB(texture, s, t, r);
}

static void PRINT_APIENTRY printMultiTexCoord3ivARB(GLenum texture, const GLint * t)
{
    fprintf(print_spu.fp, "MultiTexCoord3ivARB( %s, [%d, %d, %d] )\n", printspuEnumToStr(texture), (int)t[0], (int)t[1], (int)t[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3ivARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord3sARB(GLenum texture, GLshort s, GLshort t, GLshort r)
{
    fprintf(print_spu.fp, "MultiTexCoord3sARB( %s, %hd, %hd, %hd )\n", printspuEnumToStr(texture), (short)s, (short)t, (short)r);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3sARB(texture, s, t, r);
}

static void PRINT_APIENTRY printMultiTexCoord3svARB(GLenum texture, const GLshort * t)
{
    fprintf(print_spu.fp, "MultiTexCoord3svARB( %s, [%hd, %hd, %hd] )\n", printspuEnumToStr(texture), (short)t[0], (short)t[1], (short)t[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord3svARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord4dARB(GLenum texture, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    fprintf(print_spu.fp, "MultiTexCoord4dARB( %s, %f, %f, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t, (float)r, (float)q);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4dARB(texture, s, t, r, q);
}

static void PRINT_APIENTRY printMultiTexCoord4dvARB(GLenum texture, const GLdouble * t)
{
    fprintf(print_spu.fp, "MultiTexCoord4dvARB( %s, [%f, %f, %f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1], (float)t[2], (float)t[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4dvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord4fARB(GLenum texture, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    fprintf(print_spu.fp, "MultiTexCoord4fARB( %s, %f, %f, %f, %f )\n", printspuEnumToStr(texture), (float)s, (float)t, (float)r, (float)q);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4fARB(texture, s, t, r, q);
}

static void PRINT_APIENTRY printMultiTexCoord4fvARB(GLenum texture, const GLfloat * t)
{
    fprintf(print_spu.fp, "MultiTexCoord4fvARB( %s, [%f, %f, %f, %f] )\n", printspuEnumToStr(texture), (float)t[0], (float)t[1], (float)t[2], (float)t[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4fvARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord4iARB(GLenum texture, GLint s, GLint t, GLint r, GLint q)
{
    fprintf(print_spu.fp, "MultiTexCoord4iARB( %s, %d, %d, %d, %d )\n", printspuEnumToStr(texture), (int)s, (int)t, (int)r, (int)q);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4iARB(texture, s, t, r, q);
}

static void PRINT_APIENTRY printMultiTexCoord4ivARB(GLenum texture, const GLint * t)
{
    fprintf(print_spu.fp, "MultiTexCoord4ivARB( %s, [%d, %d, %d, %d] )\n", printspuEnumToStr(texture), (int)t[0], (int)t[1], (int)t[2], (int)t[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4ivARB(texture, t);
}

static void PRINT_APIENTRY printMultiTexCoord4sARB(GLenum texture, GLshort s, GLshort t, GLshort r, GLshort q)
{
    fprintf(print_spu.fp, "MultiTexCoord4sARB( %s, %hd, %hd, %hd, %hd )\n", printspuEnumToStr(texture), (short)s, (short)t, (short)r, (short)q);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4sARB(texture, s, t, r, q);
}

static void PRINT_APIENTRY printMultiTexCoord4svARB(GLenum texture, const GLshort * t)
{
    fprintf(print_spu.fp, "MultiTexCoord4svARB( %s, [%hd, %hd, %hd, %hd] )\n", printspuEnumToStr(texture), (short)t[0], (short)t[1], (short)t[2], (short)t[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.MultiTexCoord4svARB(texture, t);
}

static void PRINT_APIENTRY printNewList(GLuint list, GLenum mode)
{
    fprintf(print_spu.fp, "NewList( %u, %s )\n", (unsigned)list, printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.NewList(list, mode);

    //// initialize vertex array;
    //vertexArray = new osg::Vec3Array();

    //// initialize normal array;
    //normalArray = new osg::Vec3Array();

    //// initialize material array
    //colorArray = new osg::Vec4Array();

    geode = new osg::Geode();
}

static void PRINT_APIENTRY printNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
    fprintf(print_spu.fp, "Normal3b( %d, %d, %d )\n", (int)nx, (int)ny, (int)nz);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3b(nx, ny, nz);
    if (normalArray){
        normalArray->push_back(osg::Vec3(nx, ny, nz));
    }
}

static void PRINT_APIENTRY printNormal3bv(const GLbyte * v)
{
    fprintf(print_spu.fp, "Normal3bv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3bv(v);

    if (normalArray){
        normalArray->push_back(osg::Vec3(v[0], v[1], v[2]));
    }
}

static void PRINT_APIENTRY printNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
    fprintf(print_spu.fp, "Normal3d( %f, %f, %f )\n", (float)nx, (float)ny, (float)nz);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3d(nx, ny, nz);
    if (normalArray){
        normalArray->push_back(osg::Vec3(nx, ny, nz));
    }
}

static void PRINT_APIENTRY printNormal3dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Normal3dv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3dv(v);
    if (normalArray){
        normalArray->push_back(osg::Vec3(v[0], v[1], v[2]));
    }
}

static void PRINT_APIENTRY printNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
    fprintf(print_spu.fp, "Normal3f( %f, %f, %f )\n", (float)nx, (float)ny, (float)nz);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3f(nx, ny, nz);
    if (normalArray){
        normalArray->push_back(osg::Vec3(nx, ny, nz));
    }
}

static void PRINT_APIENTRY printNormal3fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Normal3fv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3fv(v);
    if (normalArray){
        normalArray->push_back(osg::Vec3(v[0], v[1], v[2]));
    }
}

static void PRINT_APIENTRY printNormal3i(GLint nx, GLint ny, GLint nz)
{
    fprintf(print_spu.fp, "Normal3i( %d, %d, %d )\n", (int)nx, (int)ny, (int)nz);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3i(nx, ny, nz);
    if (normalArray){
        normalArray->push_back(osg::Vec3(nx, ny, nz));
    }
}

static void PRINT_APIENTRY printNormal3iv(const GLint * v)
{
    fprintf(print_spu.fp, "Normal3iv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3iv(v);
    if (normalArray){
        normalArray->push_back(osg::Vec3(v[0], v[1], v[2]));
    }
}

static void PRINT_APIENTRY printNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
    fprintf(print_spu.fp, "Normal3s( %hd, %hd, %hd )\n", (short)nx, (short)ny, (short)nz);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3s(nx, ny, nz);

    if (normalArray){
        normalArray->push_back(osg::Vec3(nx, ny, nz));
    }
}

static void PRINT_APIENTRY printNormal3sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Normal3sv( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Normal3sv(v);
    if (normalArray){
        normalArray->push_back(osg::Vec3(v[0], v[1], v[2]));
    }
}

static void PRINT_APIENTRY printNormalPointer(GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "NormalPointer( %s, %u, %p )\n", printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.NormalPointer(type, stride, pointer);
}

static void PRINT_APIENTRY printOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    fprintf(print_spu.fp, "Ortho( %f, %f, %f, %f, %f, %f )\n", (float)left, (float)right, (float)bottom, (float)top, (float)zNear, (float)zFar);
    fflush(print_spu.fp);
    print_spu.passthrough.Ortho(left, right, bottom, top, zNear, zFar);
}

static void PRINT_APIENTRY printPassThrough(GLfloat token)
{
    fprintf(print_spu.fp, "PassThrough( %f )\n", (float)token);
    fflush(print_spu.fp);
    print_spu.passthrough.PassThrough(token);
}

static void PRINT_APIENTRY printPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values)
{
    fprintf(print_spu.fp, "PixelMapfv( %s, %u, %p )\n", printspuEnumToStr(map), (unsigned)mapsize, (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelMapfv(map, mapsize, values);
}

static void PRINT_APIENTRY printPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values)
{
    fprintf(print_spu.fp, "PixelMapuiv( %s, %u, %p )\n", printspuEnumToStr(map), (unsigned)mapsize, (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelMapuiv(map, mapsize, values);
}

static void PRINT_APIENTRY printPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values)
{
    fprintf(print_spu.fp, "PixelMapusv( %s, %u, %p )\n", printspuEnumToStr(map), (unsigned)mapsize, (void *)values);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelMapusv(map, mapsize, values);
}

static void PRINT_APIENTRY printPixelStoref(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "PixelStoref( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelStoref(pname, param);
}

static void PRINT_APIENTRY printPixelStorei(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "PixelStorei( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelStorei(pname, param);
}

static void PRINT_APIENTRY printPixelTransferf(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "PixelTransferf( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelTransferf(pname, param);
}

static void PRINT_APIENTRY printPixelTransferi(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "PixelTransferi( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelTransferi(pname, param);
}

static void PRINT_APIENTRY printPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
    fprintf(print_spu.fp, "PixelZoom( %f, %f )\n", (float)xfactor, (float)yfactor);
    fflush(print_spu.fp);
    print_spu.passthrough.PixelZoom(xfactor, yfactor);
}

static void PRINT_APIENTRY printPointParameterfARB(GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "PointParameterfARB( %s, %f )\n", printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PointParameterfARB(pname, param);
}

static void PRINT_APIENTRY printPointParameterfvARB(GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "PointParameterfvARB( %s, %p )\n", printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.PointParameterfvARB(pname, params);
}

static void PRINT_APIENTRY printPointParameteri(GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "PointParameteri( %s, %d )\n", printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PointParameteri(pname, param);
}

static void PRINT_APIENTRY printPointParameteriv(GLenum pname, const GLint * param)
{
    fprintf(print_spu.fp, "PointParameteriv( %s, %p )\n", printspuEnumToStr(pname), (void *)param);
    fflush(print_spu.fp);
    print_spu.passthrough.PointParameteriv(pname, param);
}

static void PRINT_APIENTRY printPointSize(GLfloat size)
{
    fprintf(print_spu.fp, "PointSize( %f )\n", (float)size);
    fflush(print_spu.fp);
    print_spu.passthrough.PointSize(size);
}

static void PRINT_APIENTRY printPolygonMode(GLenum face, GLenum mode)
{
    fprintf(print_spu.fp, "PolygonMode( %s, %s )\n", printspuEnumToStr(face), printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.PolygonMode(face, mode);
}

static void PRINT_APIENTRY printPolygonOffset(GLfloat factor, GLfloat units)
{
    fprintf(print_spu.fp, "PolygonOffset( %f, %f )\n", (float)factor, (float)units);
    fflush(print_spu.fp);
    print_spu.passthrough.PolygonOffset(factor, units);
}

static void PRINT_APIENTRY printPolygonStipple(const GLubyte * mask)
{
    fprintf(print_spu.fp, "PolygonStipple( [%u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u] )\n", (unsigned)mask[0], (unsigned)mask[1], (unsigned)mask[2], (unsigned)mask[3], (unsigned)mask[4], (unsigned)mask[5], (unsigned)mask[6], (unsigned)mask[7], (unsigned)mask[8], (unsigned)mask[9], (unsigned)mask[10], (unsigned)mask[11], (unsigned)mask[12], (unsigned)mask[13], (unsigned)mask[14], (unsigned)mask[15], (unsigned)mask[16], (unsigned)mask[17], (unsigned)mask[18], (unsigned)mask[19], (unsigned)mask[20], (unsigned)mask[21], (unsigned)mask[22], (unsigned)mask[23], (unsigned)mask[24], (unsigned)mask[25], (unsigned)mask[26], (unsigned)mask[27], (unsigned)mask[28], (unsigned)mask[29], (unsigned)mask[30], (unsigned)mask[31], (unsigned)mask[32], (unsigned)mask[33], (unsigned)mask[34], (unsigned)mask[35], (unsigned)mask[36], (unsigned)mask[37], (unsigned)mask[38], (unsigned)mask[39], (unsigned)mask[40], (unsigned)mask[41], (unsigned)mask[42], (unsigned)mask[43], (unsigned)mask[44], (unsigned)mask[45], (unsigned)mask[46], (unsigned)mask[47], (unsigned)mask[48], (unsigned)mask[49], (unsigned)mask[50], (unsigned)mask[51], (unsigned)mask[52], (unsigned)mask[53], (unsigned)mask[54], (unsigned)mask[55], (unsigned)mask[56], (unsigned)mask[57], (unsigned)mask[58], (unsigned)mask[59], (unsigned)mask[60], (unsigned)mask[61], (unsigned)mask[62], (unsigned)mask[63], (unsigned)mask[64], (unsigned)mask[65], (unsigned)mask[66], (unsigned)mask[67], (unsigned)mask[68], (unsigned)mask[69], (unsigned)mask[70], (unsigned)mask[71], (unsigned)mask[72], (unsigned)mask[73], (unsigned)mask[74], (unsigned)mask[75], (unsigned)mask[76], (unsigned)mask[77], (unsigned)mask[78], (unsigned)mask[79], (unsigned)mask[80], (unsigned)mask[81], (unsigned)mask[82], (unsigned)mask[83], (unsigned)mask[84], (unsigned)mask[85], (unsigned)mask[86], (unsigned)mask[87], (unsigned)mask[88], (unsigned)mask[89], (unsigned)mask[90], (unsigned)mask[91], (unsigned)mask[92], (unsigned)mask[93], (unsigned)mask[94], (unsigned)mask[95], (unsigned)mask[96], (unsigned)mask[97], (unsigned)mask[98], (unsigned)mask[99], (unsigned)mask[100], (unsigned)mask[101], (unsigned)mask[102], (unsigned)mask[103], (unsigned)mask[104], (unsigned)mask[105], (unsigned)mask[106], (unsigned)mask[107], (unsigned)mask[108], (unsigned)mask[109], (unsigned)mask[110], (unsigned)mask[111], (unsigned)mask[112], (unsigned)mask[113], (unsigned)mask[114], (unsigned)mask[115], (unsigned)mask[116], (unsigned)mask[117], (unsigned)mask[118], (unsigned)mask[119], (unsigned)mask[120], (unsigned)mask[121], (unsigned)mask[122], (unsigned)mask[123], (unsigned)mask[124], (unsigned)mask[125], (unsigned)mask[126], (unsigned)mask[127]);
    fflush(print_spu.fp);
    print_spu.passthrough.PolygonStipple(mask);
}

static void PRINT_APIENTRY printPopAttrib(void)
{
    fprintf(print_spu.fp, "PopAttrib(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.PopAttrib();
}

static void PRINT_APIENTRY printPopClientAttrib(void)
{
    fprintf(print_spu.fp, "PopClientAttrib(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.PopClientAttrib();
}

static void PRINT_APIENTRY printPopMatrix(void)
{
    fprintf(print_spu.fp, "PopMatrix(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.PopMatrix();
    startReading = false;
    transformationLock.release();
}

static void PRINT_APIENTRY printPopName(void)
{
    fprintf(print_spu.fp, "PopName(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.PopName();
}

static void PRINT_APIENTRY printPrioritizeTextures(GLsizei n, const GLuint * textures, const GLclampf * priorities)
{
    fprintf(print_spu.fp, "PrioritizeTextures( %u, %p, %p )\n", (unsigned)n, (void *)textures, (void *)priorities);
    fflush(print_spu.fp);
    print_spu.passthrough.PrioritizeTextures(n, textures, priorities);
}

static void PRINT_APIENTRY printProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "ProgramEnvParameter4dARB( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramEnvParameter4dARB(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params)
{
    fprintf(print_spu.fp, "ProgramEnvParameter4dvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramEnvParameter4dvARB(target, index, params);
}

static void PRINT_APIENTRY printProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "ProgramEnvParameter4fARB( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramEnvParameter4fARB(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params)
{
    fprintf(print_spu.fp, "ProgramEnvParameter4fvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramEnvParameter4fvARB(target, index, params);
}

static void PRINT_APIENTRY printProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "ProgramLocalParameter4dARB( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramLocalParameter4dARB(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params)
{
    fprintf(print_spu.fp, "ProgramLocalParameter4dvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramLocalParameter4dvARB(target, index, params);
}

static void PRINT_APIENTRY printProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "ProgramLocalParameter4fARB( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramLocalParameter4fARB(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params)
{
    fprintf(print_spu.fp, "ProgramLocalParameter4fvARB( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramLocalParameter4fvARB(target, index, params);
}

static void PRINT_APIENTRY printProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "ProgramNamedParameter4dNV( %u, %u, %p, %f, %f, %f, %f )\n", (unsigned)id, (unsigned)len, (void *)name, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

static void PRINT_APIENTRY printProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v)
{
    fprintf(print_spu.fp, "ProgramNamedParameter4dvNV( %u, %u, %p, [%f, %f, %f, %f] )\n", (unsigned)id, (unsigned)len, (void *)name, (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramNamedParameter4dvNV(id, len, name, v);
}

static void PRINT_APIENTRY printProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "ProgramNamedParameter4fNV( %u, %u, %p, %f, %f, %f, %f )\n", (unsigned)id, (unsigned)len, (void *)name, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

static void PRINT_APIENTRY printProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v)
{
    fprintf(print_spu.fp, "ProgramNamedParameter4fvNV( %u, %u, %p, %p )\n", (unsigned)id, (unsigned)len, (void *)name, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramNamedParameter4fvNV(id, len, name, v);
}

static void PRINT_APIENTRY printProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "ProgramParameter4dNV( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameter4dNV(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * params)
{
    fprintf(print_spu.fp, "ProgramParameter4dvNV( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameter4dvNV(target, index, params);
}

static void PRINT_APIENTRY printProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "ProgramParameter4fNV( %s, %u, %f, %f, %f, %f )\n", printspuEnumToStr(target), (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameter4fNV(target, index, x, y, z, w);
}

static void PRINT_APIENTRY printProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * params)
{
    fprintf(print_spu.fp, "ProgramParameter4fvNV( %s, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameter4fvNV(target, index, params);
}

static void PRINT_APIENTRY printProgramParameters4dvNV(GLenum target, GLuint index, GLuint num, const GLdouble * params)
{
    fprintf(print_spu.fp, "ProgramParameters4dvNV( %s, %u, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (unsigned)num, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameters4dvNV(target, index, num, params);
}

static void PRINT_APIENTRY printProgramParameters4fvNV(GLenum target, GLuint index, GLuint num, const GLfloat * params)
{
    fprintf(print_spu.fp, "ProgramParameters4fvNV( %s, %u, %u, [%f, %f, %f, %f] )\n", printspuEnumToStr(target), (unsigned)index, (unsigned)num, (float)params[0], (float)params[1], (float)params[2], (float)params[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramParameters4fvNV(target, index, num, params);
}

static void PRINT_APIENTRY printProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid * string)
{
    fprintf(print_spu.fp, "ProgramStringARB( %s, %s, %u, %p )\n", printspuEnumToStr(target), printspuEnumToStr(format), (unsigned)len, (void *)string);
    fflush(print_spu.fp);
    print_spu.passthrough.ProgramStringARB(target, format, len, string);
}

static void PRINT_APIENTRY printPushAttrib(GLbitfield mask)
{
    fprintf(print_spu.fp, "PushAttrib( 0x%x )\n", (int)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.PushAttrib(mask);
}

static void PRINT_APIENTRY printPushClientAttrib(GLbitfield mask)
{
    fprintf(print_spu.fp, "PushClientAttrib( 0x%x )\n", (int)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.PushClientAttrib(mask);
}

static void PRINT_APIENTRY printPushMatrix(void)
{
    fprintf(print_spu.fp, "PushMatrix(  )\n");
    fflush(print_spu.fp);
    print_spu.passthrough.PushMatrix();
    startReading = true;
}

static void PRINT_APIENTRY printPushName(GLuint name)
{
    fprintf(print_spu.fp, "PushName( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.PushName(name);
}

static void PRINT_APIENTRY printRasterPos2d(GLdouble x, GLdouble y)
{
    fprintf(print_spu.fp, "RasterPos2d( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2d(x, y);
}

static void PRINT_APIENTRY printRasterPos2dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "RasterPos2dv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2dv(v);
}

static void PRINT_APIENTRY printRasterPos2f(GLfloat x, GLfloat y)
{
    fprintf(print_spu.fp, "RasterPos2f( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2f(x, y);
}

static void PRINT_APIENTRY printRasterPos2fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "RasterPos2fv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2fv(v);
}

static void PRINT_APIENTRY printRasterPos2i(GLint x, GLint y)
{
    fprintf(print_spu.fp, "RasterPos2i( %d, %d )\n", (int)x, (int)y);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2i(x, y);
}

static void PRINT_APIENTRY printRasterPos2iv(const GLint * v)
{
    fprintf(print_spu.fp, "RasterPos2iv( [%d, %d] )\n", (int)v[0], (int)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2iv(v);
}

static void PRINT_APIENTRY printRasterPos2s(GLshort x, GLshort y)
{
    fprintf(print_spu.fp, "RasterPos2s( %hd, %hd )\n", (short)x, (short)y);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2s(x, y);
}

static void PRINT_APIENTRY printRasterPos2sv(const GLshort * v)
{
    fprintf(print_spu.fp, "RasterPos2sv( [%hd, %hd] )\n", (short)v[0], (short)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos2sv(v);
}

static void PRINT_APIENTRY printRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "RasterPos3d( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3d(x, y, z);
}

static void PRINT_APIENTRY printRasterPos3dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "RasterPos3dv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3dv(v);
}

static void PRINT_APIENTRY printRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "RasterPos3f( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3f(x, y, z);
}

static void PRINT_APIENTRY printRasterPos3fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "RasterPos3fv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3fv(v);
}

static void PRINT_APIENTRY printRasterPos3i(GLint x, GLint y, GLint z)
{
    fprintf(print_spu.fp, "RasterPos3i( %d, %d, %d )\n", (int)x, (int)y, (int)z);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3i(x, y, z);
}

static void PRINT_APIENTRY printRasterPos3iv(const GLint * v)
{
    fprintf(print_spu.fp, "RasterPos3iv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3iv(v);
}

static void PRINT_APIENTRY printRasterPos3s(GLshort x, GLshort y, GLshort z)
{
    fprintf(print_spu.fp, "RasterPos3s( %hd, %hd, %hd )\n", (short)x, (short)y, (short)z);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3s(x, y, z);
}

static void PRINT_APIENTRY printRasterPos3sv(const GLshort * v)
{
    fprintf(print_spu.fp, "RasterPos3sv( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos3sv(v);
}

static void PRINT_APIENTRY printRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "RasterPos4d( %f, %f, %f, %f )\n", (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4d(x, y, z, w);
}

static void PRINT_APIENTRY printRasterPos4dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "RasterPos4dv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4dv(v);
}

static void PRINT_APIENTRY printRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "RasterPos4f( %f, %f, %f, %f )\n", (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4f(x, y, z, w);
}

static void PRINT_APIENTRY printRasterPos4fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "RasterPos4fv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4fv(v);
}

static void PRINT_APIENTRY printRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
    fprintf(print_spu.fp, "RasterPos4i( %d, %d, %d, %d )\n", (int)x, (int)y, (int)z, (int)w);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4i(x, y, z, w);
}

static void PRINT_APIENTRY printRasterPos4iv(const GLint * v)
{
    fprintf(print_spu.fp, "RasterPos4iv( [%d, %d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4iv(v);
}

static void PRINT_APIENTRY printRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    fprintf(print_spu.fp, "RasterPos4s( %hd, %hd, %hd, %hd )\n", (short)x, (short)y, (short)z, (short)w);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4s(x, y, z, w);
}

static void PRINT_APIENTRY printRasterPos4sv(const GLshort * v)
{
    fprintf(print_spu.fp, "RasterPos4sv( [%hd, %hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.RasterPos4sv(v);
}

static void PRINT_APIENTRY printReadBuffer(GLenum mode)
{
    fprintf(print_spu.fp, "ReadBuffer( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.ReadBuffer(mode);
}

static void PRINT_APIENTRY printReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels)
{
    fprintf(print_spu.fp, "ReadPixels( %d, %d, %u, %u, %s, %s, %p )\n", (int)x, (int)y, (unsigned)width, (unsigned)height, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.ReadPixels(x, y, width, height, format, type, pixels);
}

static void PRINT_APIENTRY printRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
    fprintf(print_spu.fp, "Rectd( %f, %f, %f, %f )\n", (float)x1, (float)y1, (float)x2, (float)y2);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectd(x1, y1, x2, y2);
}

static void PRINT_APIENTRY printRectdv(const GLdouble * v1, const GLdouble * v2)
{
    fprintf(print_spu.fp, "Rectdv( [%f, %f], [%f, %f] )\n", (float)v1[0], (float)v1[1], (float)v2[0], (float)v2[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectdv(v1, v2);
}

static void PRINT_APIENTRY printRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
    fprintf(print_spu.fp, "Rectf( %f, %f, %f, %f )\n", (float)x1, (float)y1, (float)x2, (float)y2);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectf(x1, y1, x2, y2);
}

static void PRINT_APIENTRY printRectfv(const GLfloat * v1, const GLfloat * v2)
{
    fprintf(print_spu.fp, "Rectfv( [%f, %f], [%f, %f] )\n", (float)v1[0], (float)v1[1], (float)v2[0], (float)v2[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectfv(v1, v2);
}

static void PRINT_APIENTRY printRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
    fprintf(print_spu.fp, "Recti( %d, %d, %d, %d )\n", (int)x1, (int)y1, (int)x2, (int)y2);
    fflush(print_spu.fp);
    print_spu.passthrough.Recti(x1, y1, x2, y2);
}

static void PRINT_APIENTRY printRectiv(const GLint * v1, const GLint * v2)
{
    fprintf(print_spu.fp, "Rectiv( [%d, %d], [%d, %d] )\n", (int)v1[0], (int)v1[1], (int)v2[0], (int)v2[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectiv(v1, v2);
}

static void PRINT_APIENTRY printRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
    fprintf(print_spu.fp, "Rects( %hd, %hd, %hd, %hd )\n", (short)x1, (short)y1, (short)x2, (short)y2);
    fflush(print_spu.fp);
    print_spu.passthrough.Rects(x1, y1, x2, y2);
}

static void PRINT_APIENTRY printRectsv(const GLshort * v1, const GLshort * v2)
{
    fprintf(print_spu.fp, "Rectsv( [%hd, %hd], [%hd, %hd] )\n", (short)v1[0], (short)v1[1], (short)v2[0], (short)v2[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Rectsv(v1, v2);
}

static GLint PRINT_APIENTRY printRenderMode(GLenum mode)
{
    fprintf(print_spu.fp, "RenderMode( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    {
        int res = print_spu.passthrough.RenderMode(mode);
        fprintf(print_spu.fp, "= %d\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printRequestResidentProgramsNV(GLsizei n, const GLuint * ids)
{
    fprintf(print_spu.fp, "RequestResidentProgramsNV( %u, %p )\n", (unsigned)n, (void *)ids);
    fflush(print_spu.fp);
    print_spu.passthrough.RequestResidentProgramsNV(n, ids);
}

static void PRINT_APIENTRY printRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "Rotated( %f, %f, %f, %f )\n", (float)angle, (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Rotated(angle, x, y, z);
}

static void PRINT_APIENTRY printRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "Rotatef( %f, %f, %f, %f )\n", (float)angle, (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Rotatef(angle, x, y, z);

    // store the value for the rotation
    rotateData.set(angle, x, y, z);

    dirtyRotation = true;
    //transformationLock.block();
}

static void PRINT_APIENTRY printSampleCoverageARB(GLclampf value, GLboolean invert)
{
    fprintf(print_spu.fp, "SampleCoverageARB( %f, %s )\n", (float)value, invert ? "GL_TRUE" : "GL_FALSE");
    fflush(print_spu.fp);
    print_spu.passthrough.SampleCoverageARB(value, invert);
}

static void PRINT_APIENTRY printScaled(GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "Scaled( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Scaled(x, y, z);
}

static void PRINT_APIENTRY printScalef(GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "Scalef( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Scalef(x, y, z);
}

static void PRINT_APIENTRY printScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
    fprintf(print_spu.fp, "Scissor( %d, %d, %u, %u )\n", (int)x, (int)y, (unsigned)width, (unsigned)height);
    fflush(print_spu.fp);
    print_spu.passthrough.Scissor(x, y, width, height);
}

static void PRINT_APIENTRY printSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
    fprintf(print_spu.fp, "SecondaryColor3bEXT( %d, %d, %d )\n", (int)red, (int)green, (int)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3bEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3bvEXT(const GLbyte * v)
{
    fprintf(print_spu.fp, "SecondaryColor3bvEXT( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3bvEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
    fprintf(print_spu.fp, "SecondaryColor3dEXT( %f, %f, %f )\n", (float)red, (float)green, (float)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3dEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3dvEXT(const GLdouble * v)
{
    fprintf(print_spu.fp, "SecondaryColor3dvEXT( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3dvEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
    fprintf(print_spu.fp, "SecondaryColor3fEXT( %f, %f, %f )\n", (float)red, (float)green, (float)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3fEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3fvEXT(const GLfloat * v)
{
    fprintf(print_spu.fp, "SecondaryColor3fvEXT( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3fvEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
    fprintf(print_spu.fp, "SecondaryColor3iEXT( %d, %d, %d )\n", (int)red, (int)green, (int)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3iEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3ivEXT(const GLint * v)
{
    fprintf(print_spu.fp, "SecondaryColor3ivEXT( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3ivEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
    fprintf(print_spu.fp, "SecondaryColor3sEXT( %hd, %hd, %hd )\n", (short)red, (short)green, (short)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3sEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3svEXT(const GLshort * v)
{
    fprintf(print_spu.fp, "SecondaryColor3svEXT( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3svEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
    fprintf(print_spu.fp, "SecondaryColor3ubEXT( %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3ubEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3ubvEXT(const GLubyte * v)
{
    fprintf(print_spu.fp, "SecondaryColor3ubvEXT( [%u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3ubvEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
    fprintf(print_spu.fp, "SecondaryColor3uiEXT( %u, %u, %u )\n", (unsigned)red, (unsigned)green, (unsigned)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3uiEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3uivEXT(const GLuint * v)
{
    fprintf(print_spu.fp, "SecondaryColor3uivEXT( [%u, %u, %u] )\n", (unsigned)v[0], (unsigned)v[1], (unsigned)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3uivEXT(v);
}

static void PRINT_APIENTRY printSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
    fprintf(print_spu.fp, "SecondaryColor3usEXT( %hu, %hu, %hu )\n", (unsigned short)red, (unsigned short)green, (unsigned short)blue);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3usEXT(red, green, blue);
}

static void PRINT_APIENTRY printSecondaryColor3usvEXT(const GLushort * v)
{
    fprintf(print_spu.fp, "SecondaryColor3usvEXT( [%hu, %hu, %hu] )\n", (unsigned short)v[0], (unsigned short)v[1], (unsigned short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColor3usvEXT(v);
}

static void PRINT_APIENTRY printSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "SecondaryColorPointerEXT( %d, %s, %u, %p )\n", (int)size, printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.SecondaryColorPointerEXT(size, type, stride, pointer);
}

static void PRINT_APIENTRY printSelectBuffer(GLsizei size, GLuint * buffer)
{
    fprintf(print_spu.fp, "SelectBuffer( %u, %p )\n", (unsigned)size, (void *)buffer);
    fflush(print_spu.fp);
    print_spu.passthrough.SelectBuffer(size, buffer);
}

static void PRINT_APIENTRY printSemaphoreCreateCR(GLuint name, GLuint count)
{
    fprintf(print_spu.fp, "SemaphoreCreateCR( %u, %u )\n", (unsigned)name, (unsigned)count);
    fflush(print_spu.fp);
    print_spu.passthrough.SemaphoreCreateCR(name, count);
}

static void PRINT_APIENTRY printSemaphoreDestroyCR(GLuint name)
{
    fprintf(print_spu.fp, "SemaphoreDestroyCR( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.SemaphoreDestroyCR(name);
}

static void PRINT_APIENTRY printSemaphorePCR(GLuint name)
{
    fprintf(print_spu.fp, "SemaphorePCR( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.SemaphorePCR(name);
}

static void PRINT_APIENTRY printSemaphoreVCR(GLuint name)
{
    fprintf(print_spu.fp, "SemaphoreVCR( %u )\n", (unsigned)name);
    fflush(print_spu.fp);
    print_spu.passthrough.SemaphoreVCR(name);
}

static void PRINT_APIENTRY printSetFenceNV(GLuint fence, GLenum condition)
{
    fprintf(print_spu.fp, "SetFenceNV( %u, %s )\n", (unsigned)fence, printspuEnumToStr(condition));
    fflush(print_spu.fp);
    print_spu.passthrough.SetFenceNV(fence, condition);
}

static void PRINT_APIENTRY printShadeModel(GLenum mode)
{
    fprintf(print_spu.fp, "ShadeModel( %s )\n", printspuEnumToStr(mode));
    fflush(print_spu.fp);
    print_spu.passthrough.ShadeModel(mode);
}

static void PRINT_APIENTRY printStencilFunc(GLenum func, GLint ref, GLuint mask)
{
    fprintf(print_spu.fp, "StencilFunc( %s, %d, %u )\n", printspuEnumToStr(func), (int)ref, (unsigned)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.StencilFunc(func, ref, mask);
}

static void PRINT_APIENTRY printStencilMask(GLuint mask)
{
    fprintf(print_spu.fp, "StencilMask( %u )\n", (unsigned)mask);
    fflush(print_spu.fp);
    print_spu.passthrough.StencilMask(mask);
}

static void PRINT_APIENTRY printStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
    fprintf(print_spu.fp, "StencilOp( %s, %s, %s )\n", printspuEnumToStr(fail), printspuEnumToStr(zfail), printspuEnumToStr(zpass));
    fflush(print_spu.fp);
    print_spu.passthrough.StencilOp(fail, zfail, zpass);
}

static void PRINT_APIENTRY printSwapBuffers(GLint window, GLint flags)
{
    fprintf(print_spu.fp, "SwapBuffers( %d, %d )\n", (int)window, (int)flags);
    fflush(print_spu.fp);
    print_spu.passthrough.SwapBuffers(window, flags);
    // call frame on Viewer
    /*if (group){
        viewer->setSceneData(group);
        }
        if (viewer){
        viewer->frame();
        }*/
}

static GLboolean PRINT_APIENTRY printTestFenceNV(GLuint fence)
{
    fprintf(print_spu.fp, "TestFenceNV( %u )\n", (unsigned)fence);
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.TestFenceNV(fence);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printTexCoord1d(GLdouble s)
{
    fprintf(print_spu.fp, "TexCoord1d( %f )\n", (float)s);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1d(s);
}

static void PRINT_APIENTRY printTexCoord1dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "TexCoord1dv( [%f] )\n", (float)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1dv(v);
}

static void PRINT_APIENTRY printTexCoord1f(GLfloat s)
{
    fprintf(print_spu.fp, "TexCoord1f( %f )\n", (float)s);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1f(s);
}

static void PRINT_APIENTRY printTexCoord1fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "TexCoord1fv( [%f] )\n", (float)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1fv(v);
}

static void PRINT_APIENTRY printTexCoord1i(GLint s)
{
    fprintf(print_spu.fp, "TexCoord1i( %d )\n", (int)s);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1i(s);
}

static void PRINT_APIENTRY printTexCoord1iv(const GLint * v)
{
    fprintf(print_spu.fp, "TexCoord1iv( [%d] )\n", (int)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1iv(v);
}

static void PRINT_APIENTRY printTexCoord1s(GLshort s)
{
    fprintf(print_spu.fp, "TexCoord1s( %hd )\n", (short)s);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1s(s);
}

static void PRINT_APIENTRY printTexCoord1sv(const GLshort * v)
{
    fprintf(print_spu.fp, "TexCoord1sv( [%hd] )\n", (short)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord1sv(v);
}

static void PRINT_APIENTRY printTexCoord2d(GLdouble s, GLdouble t)
{
    fprintf(print_spu.fp, "TexCoord2d( %f, %f )\n", (float)s, (float)t);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2d(s, t);
}

static void PRINT_APIENTRY printTexCoord2dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "TexCoord2dv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2dv(v);
}

static void PRINT_APIENTRY printTexCoord2f(GLfloat s, GLfloat t)
{
    fprintf(print_spu.fp, "TexCoord2f( %f, %f )\n", (float)s, (float)t);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2f(s, t);
}

static void PRINT_APIENTRY printTexCoord2fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "TexCoord2fv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2fv(v);
}

static void PRINT_APIENTRY printTexCoord2i(GLint s, GLint t)
{
    fprintf(print_spu.fp, "TexCoord2i( %d, %d )\n", (int)s, (int)t);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2i(s, t);
}

static void PRINT_APIENTRY printTexCoord2iv(const GLint * v)
{
    fprintf(print_spu.fp, "TexCoord2iv( [%d, %d] )\n", (int)v[0], (int)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2iv(v);
}

static void PRINT_APIENTRY printTexCoord2s(GLshort s, GLshort t)
{
    fprintf(print_spu.fp, "TexCoord2s( %hd, %hd )\n", (short)s, (short)t);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2s(s, t);
}

static void PRINT_APIENTRY printTexCoord2sv(const GLshort * v)
{
    fprintf(print_spu.fp, "TexCoord2sv( [%hd, %hd] )\n", (short)v[0], (short)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord2sv(v);
}

static void PRINT_APIENTRY printTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
    fprintf(print_spu.fp, "TexCoord3d( %f, %f, %f )\n", (float)s, (float)t, (float)r);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3d(s, t, r);
}

static void PRINT_APIENTRY printTexCoord3dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "TexCoord3dv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3dv(v);
}

static void PRINT_APIENTRY printTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
    fprintf(print_spu.fp, "TexCoord3f( %f, %f, %f )\n", (float)s, (float)t, (float)r);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3f(s, t, r);
}

static void PRINT_APIENTRY printTexCoord3fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "TexCoord3fv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3fv(v);
}

static void PRINT_APIENTRY printTexCoord3i(GLint s, GLint t, GLint r)
{
    fprintf(print_spu.fp, "TexCoord3i( %d, %d, %d )\n", (int)s, (int)t, (int)r);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3i(s, t, r);
}

static void PRINT_APIENTRY printTexCoord3iv(const GLint * v)
{
    fprintf(print_spu.fp, "TexCoord3iv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3iv(v);
}

static void PRINT_APIENTRY printTexCoord3s(GLshort s, GLshort t, GLshort r)
{
    fprintf(print_spu.fp, "TexCoord3s( %hd, %hd, %hd )\n", (short)s, (short)t, (short)r);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3s(s, t, r);
}

static void PRINT_APIENTRY printTexCoord3sv(const GLshort * v)
{
    fprintf(print_spu.fp, "TexCoord3sv( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord3sv(v);
}

static void PRINT_APIENTRY printTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    fprintf(print_spu.fp, "TexCoord4d( %f, %f, %f, %f )\n", (float)s, (float)t, (float)r, (float)q);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4d(s, t, r, q);
}

static void PRINT_APIENTRY printTexCoord4dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "TexCoord4dv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4dv(v);
}

static void PRINT_APIENTRY printTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    fprintf(print_spu.fp, "TexCoord4f( %f, %f, %f, %f )\n", (float)s, (float)t, (float)r, (float)q);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4f(s, t, r, q);
}

static void PRINT_APIENTRY printTexCoord4fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "TexCoord4fv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4fv(v);
}

static void PRINT_APIENTRY printTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
    fprintf(print_spu.fp, "TexCoord4i( %d, %d, %d, %d )\n", (int)s, (int)t, (int)r, (int)q);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4i(s, t, r, q);
}

static void PRINT_APIENTRY printTexCoord4iv(const GLint * v)
{
    fprintf(print_spu.fp, "TexCoord4iv( [%d, %d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4iv(v);
}

static void PRINT_APIENTRY printTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
    fprintf(print_spu.fp, "TexCoord4s( %hd, %hd, %hd, %hd )\n", (short)s, (short)t, (short)r, (short)q);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4s(s, t, r, q);
}

static void PRINT_APIENTRY printTexCoord4sv(const GLshort * v)
{
    fprintf(print_spu.fp, "TexCoord4sv( [%hd, %hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoord4sv(v);
}

static void PRINT_APIENTRY printTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "TexCoordPointer( %d, %s, %u, %p )\n", (int)size, printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.TexCoordPointer(size, type, stride, pointer);
}

static void PRINT_APIENTRY printTexGend(GLenum coord, GLenum pname, GLdouble param)
{
    fprintf(print_spu.fp, "TexGend( %s, %s, %f )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGend(coord, pname, param);
}

static void PRINT_APIENTRY printTexGendv(GLenum coord, GLenum pname, const GLdouble * params)
{
    fprintf(print_spu.fp, "TexGendv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGendv(coord, pname, params);
}

static void PRINT_APIENTRY printTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "TexGenf( %s, %s, %f )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGenf(coord, pname, param);
}

static void PRINT_APIENTRY printTexGenfv(GLenum coord, GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "TexGenfv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGenfv(coord, pname, params);
}

static void PRINT_APIENTRY printTexGeni(GLenum coord, GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "TexGeni( %s, %s, %d )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGeni(coord, pname, param);
}

static void PRINT_APIENTRY printTexGeniv(GLenum coord, GLenum pname, const GLint * params)
{
    fprintf(print_spu.fp, "TexGeniv( %s, %s, %p )\n", printspuEnumToStr(coord), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.TexGeniv(coord, pname, params);
}

static void PRINT_APIENTRY printTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexImage1D( %s, %d, %d, %u, %d, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)internalFormat, (unsigned)width, (int)border, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexImage1D(target, level, internalFormat, width, border, format, type, pixels);
}

static void PRINT_APIENTRY printTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexImage2D( %s, %d, %d, %u, %u, %d, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)internalFormat, (unsigned)width, (unsigned)height, (int)border, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
}

static void PRINT_APIENTRY printTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexImage3D( %s, %d, %d, %u, %u, %u, %d, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)internalFormat, (unsigned)width, (unsigned)height, (unsigned)depth, (int)border, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

static void PRINT_APIENTRY printTexImage3DEXT(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexImage3DEXT( %s, %d, %s, %u, %u, %u, %d, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, printspuEnumToStr(internalFormat), (unsigned)width, (unsigned)height, (unsigned)depth, (int)border, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexImage3DEXT(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

static void PRINT_APIENTRY printTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
    fprintf(print_spu.fp, "TexParameterf( %s, %s, %f )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (float)param);
    fflush(print_spu.fp);
    print_spu.passthrough.TexParameterf(target, pname, param);
}

static void PRINT_APIENTRY printTexParameterfv(GLenum target, GLenum pname, const GLfloat * params)
{
    fprintf(print_spu.fp, "TexParameterfv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.TexParameterfv(target, pname, params);
}

static void PRINT_APIENTRY printTexParameteri(GLenum target, GLenum pname, GLint param)
{
    fprintf(print_spu.fp, "TexParameteri( %s, %s, %d )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (int)param);
    fflush(print_spu.fp);
    print_spu.passthrough.TexParameteri(target, pname, param);
}

static void PRINT_APIENTRY printTexParameteriv(GLenum target, GLenum pname, const GLint * params)
{
    fprintf(print_spu.fp, "TexParameteriv( %s, %s, %p )\n", printspuEnumToStr(target), printspuEnumToStr(pname), (void *)params);
    fflush(print_spu.fp);
    print_spu.passthrough.TexParameteriv(target, pname, params);
}

static void PRINT_APIENTRY printTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexSubImage1D( %s, %d, %d, %u, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (unsigned)width, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexSubImage1D(target, level, xoffset, width, format, type, pixels);
}

static void PRINT_APIENTRY printTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexSubImage2D( %s, %d, %d, %d, %u, %u, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (unsigned)width, (unsigned)height, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void PRINT_APIENTRY printTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "TexSubImage3D( %s, %d, %d, %d, %d, %u, %u, %u, %s, %s, %p )\n", printspuEnumToStr(target), (int)level, (int)xoffset, (int)yoffset, (int)zoffset, (unsigned)width, (unsigned)height, (unsigned)depth, printspuEnumToStr(format), printspuEnumToStr(type), (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static void PRINT_APIENTRY printTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
    fprintf(print_spu.fp, "TrackMatrixNV( %s, %u, %s, %s )\n", printspuEnumToStr(target), (unsigned)address, printspuEnumToStr(matrix), printspuEnumToStr(transform));
    fflush(print_spu.fp);
    print_spu.passthrough.TrackMatrixNV(target, address, matrix, transform);
}

static void PRINT_APIENTRY printTranslated(GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "Translated( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Translated(x, y, z);
}

static void PRINT_APIENTRY printTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "Translatef( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Translatef(x, y, z);

    // store the translation for the pat

    translateData.set(x, y, z);
    dirtyTranslation = true;

    //transformationLock.block();
}

static GLboolean PRINT_APIENTRY printUnmapBufferARB(GLenum target)
{
    fprintf(print_spu.fp, "UnmapBufferARB( %s )\n", printspuEnumToStr(target));
    fflush(print_spu.fp);
    {
        char res = print_spu.passthrough.UnmapBufferARB(target);
        fprintf(print_spu.fp, "= %hhd\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printVertex2d(GLdouble x, GLdouble y)
{
    fprintf(print_spu.fp, "Vertex2d( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2d(x, y);
}

static void PRINT_APIENTRY printVertex2dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Vertex2dv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2dv(v);
}

static void PRINT_APIENTRY printVertex2f(GLfloat x, GLfloat y)
{
    fprintf(print_spu.fp, "Vertex2f( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2f(x, y);
}

static void PRINT_APIENTRY printVertex2fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Vertex2fv( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2fv(v);
}

static void PRINT_APIENTRY printVertex2i(GLint x, GLint y)
{
    fprintf(print_spu.fp, "Vertex2i( %d, %d )\n", (int)x, (int)y);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2i(x, y);
}

static void PRINT_APIENTRY printVertex2iv(const GLint * v)
{
    fprintf(print_spu.fp, "Vertex2iv( [%d, %d] )\n", (int)v[0], (int)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2iv(v);
}

static void PRINT_APIENTRY printVertex2s(GLshort x, GLshort y)
{
    fprintf(print_spu.fp, "Vertex2s( %hd, %hd )\n", (short)x, (short)y);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2s(x, y);
}

static void PRINT_APIENTRY printVertex2sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Vertex2sv( [%hd, %hd] )\n", (short)v[0], (short)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex2sv(v);
}

static void PRINT_APIENTRY printVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "Vertex3d( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3d(x, y, z);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(x, z, y));
    }
}

static void PRINT_APIENTRY printVertex3dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Vertex3dv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3dv(v);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(v[0], v[2], v[1]));
    }
}

static void PRINT_APIENTRY printVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "Vertex3f( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3f(x, y, z);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(x, z, y));
    }
}

static void PRINT_APIENTRY printVertex3fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Vertex3fv( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3fv(v);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(v[0], v[2], v[1]));
    }
}

static void PRINT_APIENTRY printVertex3i(GLint x, GLint y, GLint z)
{
    fprintf(print_spu.fp, "Vertex3i( %d, %d, %d )\n", (int)x, (int)y, (int)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3i(x, y, z);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(x, z, y));
    }
}

static void PRINT_APIENTRY printVertex3iv(const GLint * v)
{
    fprintf(print_spu.fp, "Vertex3iv( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3iv(v);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(v[0], v[2], v[1]));
    }
}

static void PRINT_APIENTRY printVertex3s(GLshort x, GLshort y, GLshort z)
{
    fprintf(print_spu.fp, "Vertex3s( %hd, %hd, %hd )\n", (short)x, (short)y, (short)z);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3s(x, y, z);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(x, z, y));
    }
}

static void PRINT_APIENTRY printVertex3sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Vertex3sv( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex3sv(v);
    if (vertexArray){
        vertexArray->push_back(osg::Vec3(v[0], v[2], v[1]));
    }
}

static void PRINT_APIENTRY printVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "Vertex4d( %f, %f, %f, %f )\n", (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4d(x, y, z, w);
}

static void PRINT_APIENTRY printVertex4dv(const GLdouble * v)
{
    fprintf(print_spu.fp, "Vertex4dv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4dv(v);
}

static void PRINT_APIENTRY printVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "Vertex4f( %f, %f, %f, %f )\n", (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4f(x, y, z, w);
}

static void PRINT_APIENTRY printVertex4fv(const GLfloat * v)
{
    fprintf(print_spu.fp, "Vertex4fv( [%f, %f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4fv(v);
}

static void PRINT_APIENTRY printVertex4i(GLint x, GLint y, GLint z, GLint w)
{
    fprintf(print_spu.fp, "Vertex4i( %d, %d, %d, %d )\n", (int)x, (int)y, (int)z, (int)w);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4i(x, y, z, w);
}

static void PRINT_APIENTRY printVertex4iv(const GLint * v)
{
    fprintf(print_spu.fp, "Vertex4iv( [%d, %d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4iv(v);
}

static void PRINT_APIENTRY printVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    fprintf(print_spu.fp, "Vertex4s( %hd, %hd, %hd, %hd )\n", (short)x, (short)y, (short)z, (short)w);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4s(x, y, z, w);
}

static void PRINT_APIENTRY printVertex4sv(const GLshort * v)
{
    fprintf(print_spu.fp, "Vertex4sv( [%hd, %hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.Vertex4sv(v);
}

static void PRINT_APIENTRY printVertexArrayRangeNV(GLsizei length, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "VertexArrayRangeNV( %u, %p )\n", (unsigned)length, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexArrayRangeNV(length, pointer);
}

static void PRINT_APIENTRY printVertexAttrib1dARB(GLuint index, GLdouble x)
{
    fprintf(print_spu.fp, "VertexAttrib1dARB( %u, %f )\n", (unsigned)index, (float)x);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1dARB(index, x);
}

static void PRINT_APIENTRY printVertexAttrib1dvARB(GLuint index, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttrib1dvARB( %u, [%f] )\n", (unsigned)index, (float)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1dvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib1fARB(GLuint index, GLfloat x)
{
    fprintf(print_spu.fp, "VertexAttrib1fARB( %u, %f )\n", (unsigned)index, (float)x);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1fARB(index, x);
}

static void PRINT_APIENTRY printVertexAttrib1fvARB(GLuint index, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttrib1fvARB( %u, [%f] )\n", (unsigned)index, (float)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1fvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib1sARB(GLuint index, GLshort x)
{
    fprintf(print_spu.fp, "VertexAttrib1sARB( %u, %hd )\n", (unsigned)index, (short)x);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1sARB(index, x);
}

static void PRINT_APIENTRY printVertexAttrib1svARB(GLuint index, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttrib1svARB( %u, [%hd] )\n", (unsigned)index, (short)v[0]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib1svARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
    fprintf(print_spu.fp, "VertexAttrib2dARB( %u, %f, %f )\n", (unsigned)index, (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2dARB(index, x, y);
}

static void PRINT_APIENTRY printVertexAttrib2dvARB(GLuint index, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttrib2dvARB( %u, [%f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2dvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
    fprintf(print_spu.fp, "VertexAttrib2fARB( %u, %f, %f )\n", (unsigned)index, (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2fARB(index, x, y);
}

static void PRINT_APIENTRY printVertexAttrib2fvARB(GLuint index, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttrib2fvARB( %u, [%f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2fvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
    fprintf(print_spu.fp, "VertexAttrib2sARB( %u, %hd, %hd )\n", (unsigned)index, (short)x, (short)y);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2sARB(index, x, y);
}

static void PRINT_APIENTRY printVertexAttrib2svARB(GLuint index, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttrib2svARB( %u, [%hd, %hd] )\n", (unsigned)index, (short)v[0], (short)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib2svARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "VertexAttrib3dARB( %u, %f, %f, %f )\n", (unsigned)index, (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3dARB(index, x, y, z);
}

static void PRINT_APIENTRY printVertexAttrib3dvARB(GLuint index, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttrib3dvARB( %u, [%f, %f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3dvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "VertexAttrib3fARB( %u, %f, %f, %f )\n", (unsigned)index, (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3fARB(index, x, y, z);
}

static void PRINT_APIENTRY printVertexAttrib3fvARB(GLuint index, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttrib3fvARB( %u, [%f, %f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3fvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
    fprintf(print_spu.fp, "VertexAttrib3sARB( %u, %hd, %hd, %hd )\n", (unsigned)index, (short)x, (short)y, (short)z);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3sARB(index, x, y, z);
}

static void PRINT_APIENTRY printVertexAttrib3svARB(GLuint index, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttrib3svARB( %u, [%hd, %hd, %hd] )\n", (unsigned)index, (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib3svARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NbvARB(GLuint index, const GLbyte * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NbvARB( %u, [%d, %d, %d, %d] )\n", (unsigned)index, (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NbvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NivARB(GLuint index, const GLint * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NivARB( %u, [%d, %d, %d, %d] )\n", (unsigned)index, (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NivARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NsvARB(GLuint index, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NsvARB( %u, [%hd, %hd, %hd, %hd] )\n", (unsigned)index, (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NsvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    fprintf(print_spu.fp, "VertexAttrib4NubARB( %u, %u, %u, %u, %u )\n", (unsigned)index, (unsigned)x, (unsigned)y, (unsigned)z, (unsigned)w);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NubARB(index, x, y, z, w);
}

static void PRINT_APIENTRY printVertexAttrib4NubvARB(GLuint index, const GLubyte * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NubvARB( %u, [%u, %u, %u, %u] )\n", (unsigned)index, (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NubvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NuivARB(GLuint index, const GLuint * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NuivARB( %u, [%u, %u, %u, %u] )\n", (unsigned)index, (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NuivARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4NusvARB(GLuint index, const GLushort * v)
{
    fprintf(print_spu.fp, "VertexAttrib4NusvARB( %u, [%hu, %hu, %hu, %hu] )\n", (unsigned)index, (unsigned short)v[0], (unsigned short)v[1], (unsigned short)v[2], (unsigned short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4NusvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4bvARB(GLuint index, const GLbyte * v)
{
    fprintf(print_spu.fp, "VertexAttrib4bvARB( %u, [%d, %d, %d, %d] )\n", (unsigned)index, (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4bvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    fprintf(print_spu.fp, "VertexAttrib4dARB( %u, %f, %f, %f, %f )\n", (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4dARB(index, x, y, z, w);
}

static void PRINT_APIENTRY printVertexAttrib4dvARB(GLuint index, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttrib4dvARB( %u, [%f, %f, %f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4dvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    fprintf(print_spu.fp, "VertexAttrib4fARB( %u, %f, %f, %f, %f )\n", (unsigned)index, (float)x, (float)y, (float)z, (float)w);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4fARB(index, x, y, z, w);
}

static void PRINT_APIENTRY printVertexAttrib4fvARB(GLuint index, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttrib4fvARB( %u, [%f, %f, %f, %f] )\n", (unsigned)index, (float)v[0], (float)v[1], (float)v[2], (float)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4fvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4ivARB(GLuint index, const GLint * v)
{
    fprintf(print_spu.fp, "VertexAttrib4ivARB( %u, [%d, %d, %d, %d] )\n", (unsigned)index, (int)v[0], (int)v[1], (int)v[2], (int)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4ivARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    fprintf(print_spu.fp, "VertexAttrib4sARB( %u, %hd, %hd, %hd, %hd )\n", (unsigned)index, (short)x, (short)y, (short)z, (short)w);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4sARB(index, x, y, z, w);
}

static void PRINT_APIENTRY printVertexAttrib4svARB(GLuint index, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttrib4svARB( %u, [%hd, %hd, %hd, %hd] )\n", (unsigned)index, (short)v[0], (short)v[1], (short)v[2], (short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4svARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4ubvARB(GLuint index, const GLubyte * v)
{
    fprintf(print_spu.fp, "VertexAttrib4ubvARB( %u, [%u, %u, %u, %u] )\n", (unsigned)index, (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4ubvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4uivARB(GLuint index, const GLuint * v)
{
    fprintf(print_spu.fp, "VertexAttrib4uivARB( %u, [%u, %u, %u, %u] )\n", (unsigned)index, (unsigned)v[0], (unsigned)v[1], (unsigned)v[2], (unsigned)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4uivARB(index, v);
}

static void PRINT_APIENTRY printVertexAttrib4usvARB(GLuint index, const GLushort * v)
{
    fprintf(print_spu.fp, "VertexAttrib4usvARB( %u, [%hu, %hu, %hu, %hu] )\n", (unsigned)index, (unsigned short)v[0], (unsigned short)v[1], (unsigned short)v[2], (unsigned short)v[3]);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttrib4usvARB(index, v);
}

static void PRINT_APIENTRY printVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "VertexAttribPointerARB( %u, %d, %s, %s, %u, %p )\n", (unsigned)index, (int)size, printspuEnumToStr(type), normalized ? "GL_TRUE" : "GL_FALSE", (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}

static void PRINT_APIENTRY printVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "VertexAttribPointerNV( %u, %d, %s, %u, %p )\n", (unsigned)index, (int)size, printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribPointerNV(index, size, type, stride, pointer);
}

static void PRINT_APIENTRY printVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttribs1dvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs1dvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttribs1fvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs1fvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttribs1svNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs1svNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttribs2dvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs2dvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttribs2fvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs2fvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttribs2svNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs2svNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttribs3dvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs3dvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttribs3fvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs3fvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttribs3svNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs3svNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble * v)
{
    fprintf(print_spu.fp, "VertexAttribs4dvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs4dvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat * v)
{
    fprintf(print_spu.fp, "VertexAttribs4fvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs4fvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort * v)
{
    fprintf(print_spu.fp, "VertexAttribs4svNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs4svNV(index, n, v);
}

static void PRINT_APIENTRY printVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte * v)
{
    fprintf(print_spu.fp, "VertexAttribs4ubvNV( %u, %u, %p )\n", (unsigned)index, (unsigned)n, (void *)v);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexAttribs4ubvNV(index, n, v);
}

static void PRINT_APIENTRY printVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
{
    fprintf(print_spu.fp, "VertexPointer( %d, %s, %u, %p )\n", (int)size, printspuEnumToStr(type), (unsigned)stride, (void *)pointer);
    fflush(print_spu.fp);
    print_spu.passthrough.VertexPointer(size, type, stride, pointer);
}

static void PRINT_APIENTRY printViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
    fprintf(print_spu.fp, "Viewport( %d, %d, %u, %u )\n", (int)x, (int)y, (unsigned)width, (unsigned)height);
    fflush(print_spu.fp);
    print_spu.passthrough.Viewport(x, y, width, height);

    // create a osg::Viewer here and set the window size
    /*viewer = new osgViewer::Viewer();
    viewer->setUpViewInWindow(x, y, width, height);*/
}

static GLint PRINT_APIENTRY printWindowCreate(const char * dpyName, GLint visBits)
{
    fprintf(print_spu.fp, "WindowCreate( %p, %d )\n", (void *)dpyName, (int)visBits);
    fflush(print_spu.fp);
    {
        int res = print_spu.passthrough.WindowCreate(dpyName, visBits);
        fprintf(print_spu.fp, "= %d\n", res);
        fflush(print_spu.fp);
        return res;
    }
}

static void PRINT_APIENTRY printWindowDestroy(GLint window)
{
    fprintf(print_spu.fp, "WindowDestroy( %d )\n", (int)window);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowDestroy(window);
}

static void PRINT_APIENTRY printWindowPos2dARB(GLdouble x, GLdouble y)
{
    fprintf(print_spu.fp, "WindowPos2dARB( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2dARB(x, y);
}

static void PRINT_APIENTRY printWindowPos2dvARB(const GLdouble * v)
{
    fprintf(print_spu.fp, "WindowPos2dvARB( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2dvARB(v);
}

static void PRINT_APIENTRY printWindowPos2fARB(GLfloat x, GLfloat y)
{
    fprintf(print_spu.fp, "WindowPos2fARB( %f, %f )\n", (float)x, (float)y);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2fARB(x, y);
}

static void PRINT_APIENTRY printWindowPos2fvARB(const GLfloat * v)
{
    fprintf(print_spu.fp, "WindowPos2fvARB( [%f, %f] )\n", (float)v[0], (float)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2fvARB(v);
}

static void PRINT_APIENTRY printWindowPos2iARB(GLint x, GLint y)
{
    fprintf(print_spu.fp, "WindowPos2iARB( %d, %d )\n", (int)x, (int)y);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2iARB(x, y);
}

static void PRINT_APIENTRY printWindowPos2ivARB(const GLint * v)
{
    fprintf(print_spu.fp, "WindowPos2ivARB( [%d, %d] )\n", (int)v[0], (int)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2ivARB(v);
}

static void PRINT_APIENTRY printWindowPos2sARB(GLshort x, GLshort y)
{
    fprintf(print_spu.fp, "WindowPos2sARB( %hd, %hd )\n", (short)x, (short)y);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2sARB(x, y);
}

static void PRINT_APIENTRY printWindowPos2svARB(const GLshort * v)
{
    fprintf(print_spu.fp, "WindowPos2svARB( [%hd, %hd] )\n", (short)v[0], (short)v[1]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos2svARB(v);
}

static void PRINT_APIENTRY printWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
    fprintf(print_spu.fp, "WindowPos3dARB( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3dARB(x, y, z);
}

static void PRINT_APIENTRY printWindowPos3dvARB(const GLdouble * v)
{
    fprintf(print_spu.fp, "WindowPos3dvARB( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3dvARB(v);
}

static void PRINT_APIENTRY printWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
    fprintf(print_spu.fp, "WindowPos3fARB( %f, %f, %f )\n", (float)x, (float)y, (float)z);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3fARB(x, y, z);
}

static void PRINT_APIENTRY printWindowPos3fvARB(const GLfloat * v)
{
    fprintf(print_spu.fp, "WindowPos3fvARB( [%f, %f, %f] )\n", (float)v[0], (float)v[1], (float)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3fvARB(v);
}

static void PRINT_APIENTRY printWindowPos3iARB(GLint x, GLint y, GLint z)
{
    fprintf(print_spu.fp, "WindowPos3iARB( %d, %d, %d )\n", (int)x, (int)y, (int)z);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3iARB(x, y, z);
}

static void PRINT_APIENTRY printWindowPos3ivARB(const GLint * v)
{
    fprintf(print_spu.fp, "WindowPos3ivARB( [%d, %d, %d] )\n", (int)v[0], (int)v[1], (int)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3ivARB(v);
}

static void PRINT_APIENTRY printWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
    fprintf(print_spu.fp, "WindowPos3sARB( %hd, %hd, %hd )\n", (short)x, (short)y, (short)z);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3sARB(x, y, z);
}

static void PRINT_APIENTRY printWindowPos3svARB(const GLshort * v)
{
    fprintf(print_spu.fp, "WindowPos3svARB( [%hd, %hd, %hd] )\n", (short)v[0], (short)v[1], (short)v[2]);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPos3svARB(v);
}

static void PRINT_APIENTRY printWindowPosition(GLint window, GLint x, GLint y)
{
    fprintf(print_spu.fp, "WindowPosition( %d, %d, %d )\n", (int)window, (int)x, (int)y);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowPosition(window, x, y);
}

static void PRINT_APIENTRY printWindowShow(GLint window, GLint flag)
{
    fprintf(print_spu.fp, "WindowShow( %d, %d )\n", (int)window, (int)flag);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowShow(window, flag);
}

static void PRINT_APIENTRY printWindowSize(GLint window, GLint w, GLint h)
{
    fprintf(print_spu.fp, "WindowSize( %d, %d, %d )\n", (int)window, (int)w, (int)h);
    fflush(print_spu.fp);
    print_spu.passthrough.WindowSize(window, w, h);
}

static void PRINT_APIENTRY printWriteback(GLint * writeback)
{
    fprintf(print_spu.fp, "Writeback( %p )\n", (void *)writeback);
    fflush(print_spu.fp);
    print_spu.passthrough.Writeback(writeback);
}

static void PRINT_APIENTRY printZPixCR(GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels)
{
    fprintf(print_spu.fp, "ZPixCR( %u, %u, %s, %s, %s, %d, %d, %p )\n", (unsigned)width, (unsigned)height, printspuEnumToStr(format), printspuEnumToStr(type), printspuEnumToStr(ztype), (int)zparm, (int)length, (void *)pixels);
    fflush(print_spu.fp);
    print_spu.passthrough.ZPixCR(width, height, format, type, ztype, zparm, length, pixels);
}

// material function copied here for color
void PRINT_APIENTRY printMaterialfv( GLenum face, GLenum mode, const GLfloat *params )
{
	int i;
	int num_params = 4;
	fprintf( print_spu.fp, "Materialfv( %s, %s, [ ", printspuEnumToStr( face ), printspuEnumToStr( mode ) );

	if (mode == GL_SHININESS)
	{
		num_params = 1;
	}

	for (i = 0 ; i < num_params ; i++)
	{
		fprintf( print_spu.fp, "%f", params[i] );
		if (i != num_params -1)
		{
			fprintf( print_spu.fp, ", " );
		}
	}
	fprintf( print_spu.fp, " ] )\n" );
	fflush( print_spu.fp );
	print_spu.passthrough.Materialfv( face, mode, params );

    colorArray = new osg::Vec4Array();
    colorArray->push_back(osg::Vec4f(params[0], params[1], params[2], params[3]));
}

SPUNamedFunctionTable _cr_print_table[] = {
    { "Accum", (SPUGenericFunction)printAccum },
    { "ActiveTextureARB", (SPUGenericFunction)printActiveTextureARB },
    { "AlphaFunc", (SPUGenericFunction)printAlphaFunc },
    { "AreProgramsResidentNV", (SPUGenericFunction)printAreProgramsResidentNV },
    { "AreTexturesResident", (SPUGenericFunction)printAreTexturesResident },
    { "ArrayElement", (SPUGenericFunction)printArrayElement },
    { "BarrierCreateCR", (SPUGenericFunction)printBarrierCreateCR },
    { "BarrierDestroyCR", (SPUGenericFunction)printBarrierDestroyCR },
    { "BarrierExecCR", (SPUGenericFunction)printBarrierExecCR },
    { "Begin", (SPUGenericFunction)printBegin },
    { "BeginQueryARB", (SPUGenericFunction)printBeginQueryARB },
    { "BindBufferARB", (SPUGenericFunction)printBindBufferARB },
    { "BindProgramARB", (SPUGenericFunction)printBindProgramARB },
    { "BindProgramNV", (SPUGenericFunction)printBindProgramNV },
    { "BindTexture", (SPUGenericFunction)printBindTexture },
    { "Bitmap", (SPUGenericFunction)printBitmap },
    { "BlendColorEXT", (SPUGenericFunction)printBlendColorEXT },
    { "BlendEquationEXT", (SPUGenericFunction)printBlendEquationEXT },
    { "BlendFunc", (SPUGenericFunction)printBlendFunc },
    { "BlendFuncSeparateEXT", (SPUGenericFunction)printBlendFuncSeparateEXT },
    { "BoundsInfoCR", (SPUGenericFunction)printBoundsInfoCR },
    { "BufferDataARB", (SPUGenericFunction)printBufferDataARB },
    { "BufferSubDataARB", (SPUGenericFunction)printBufferSubDataARB },
    { "CallList", (SPUGenericFunction)printCallList },
    { "CallLists", (SPUGenericFunction)printCallLists },
    { "ChromiumParameterfCR", (SPUGenericFunction)printChromiumParameterfCR },
    { "ChromiumParameteriCR", (SPUGenericFunction)printChromiumParameteriCR },
    { "ChromiumParametervCR", (SPUGenericFunction)printChromiumParametervCR },
    { "Clear", (SPUGenericFunction)printClear },
    { "ClearAccum", (SPUGenericFunction)printClearAccum },
    { "ClearColor", (SPUGenericFunction)printClearColor },
    { "ClearDepth", (SPUGenericFunction)printClearDepth },
    { "ClearIndex", (SPUGenericFunction)printClearIndex },
    { "ClearStencil", (SPUGenericFunction)printClearStencil },
    { "ClientActiveTextureARB", (SPUGenericFunction)printClientActiveTextureARB },
    { "ClipPlane", (SPUGenericFunction)printClipPlane },
    { "Color3b", (SPUGenericFunction)printColor3b },
    { "Color3bv", (SPUGenericFunction)printColor3bv },
    { "Color3d", (SPUGenericFunction)printColor3d },
    { "Color3dv", (SPUGenericFunction)printColor3dv },
    { "Color3f", (SPUGenericFunction)printColor3f },
    { "Color3fv", (SPUGenericFunction)printColor3fv },
    { "Color3i", (SPUGenericFunction)printColor3i },
    { "Color3iv", (SPUGenericFunction)printColor3iv },
    { "Color3s", (SPUGenericFunction)printColor3s },
    { "Color3sv", (SPUGenericFunction)printColor3sv },
    { "Color3ub", (SPUGenericFunction)printColor3ub },
    { "Color3ubv", (SPUGenericFunction)printColor3ubv },
    { "Color3ui", (SPUGenericFunction)printColor3ui },
    { "Color3uiv", (SPUGenericFunction)printColor3uiv },
    { "Color3us", (SPUGenericFunction)printColor3us },
    { "Color3usv", (SPUGenericFunction)printColor3usv },
    { "Color4b", (SPUGenericFunction)printColor4b },
    { "Color4bv", (SPUGenericFunction)printColor4bv },
    { "Color4d", (SPUGenericFunction)printColor4d },
    { "Color4dv", (SPUGenericFunction)printColor4dv },
    { "Color4f", (SPUGenericFunction)printColor4f },
    { "Color4fv", (SPUGenericFunction)printColor4fv },
    { "Color4i", (SPUGenericFunction)printColor4i },
    { "Color4iv", (SPUGenericFunction)printColor4iv },
    { "Color4s", (SPUGenericFunction)printColor4s },
    { "Color4sv", (SPUGenericFunction)printColor4sv },
    { "Color4ub", (SPUGenericFunction)printColor4ub },
    { "Color4ubv", (SPUGenericFunction)printColor4ubv },
    { "Color4ui", (SPUGenericFunction)printColor4ui },
    { "Color4uiv", (SPUGenericFunction)printColor4uiv },
    { "Color4us", (SPUGenericFunction)printColor4us },
    { "Color4usv", (SPUGenericFunction)printColor4usv },
    { "ColorMask", (SPUGenericFunction)printColorMask },
    { "ColorMaterial", (SPUGenericFunction)printColorMaterial },
    { "ColorPointer", (SPUGenericFunction)printColorPointer },
    { "CombinerInputNV", (SPUGenericFunction)printCombinerInputNV },
    { "CombinerOutputNV", (SPUGenericFunction)printCombinerOutputNV },
    { "CombinerParameterfNV", (SPUGenericFunction)printCombinerParameterfNV },
    { "CombinerParameterfvNV", (SPUGenericFunction)printCombinerParameterfvNV },
    { "CombinerParameteriNV", (SPUGenericFunction)printCombinerParameteriNV },
    { "CombinerParameterivNV", (SPUGenericFunction)printCombinerParameterivNV },
    { "CombinerStageParameterfvNV", (SPUGenericFunction)printCombinerStageParameterfvNV },
    { "CompressedTexImage1DARB", (SPUGenericFunction)printCompressedTexImage1DARB },
    { "CompressedTexImage2DARB", (SPUGenericFunction)printCompressedTexImage2DARB },
    { "CompressedTexImage3DARB", (SPUGenericFunction)printCompressedTexImage3DARB },
    { "CompressedTexSubImage1DARB", (SPUGenericFunction)printCompressedTexSubImage1DARB },
    { "CompressedTexSubImage2DARB", (SPUGenericFunction)printCompressedTexSubImage2DARB },
    { "CompressedTexSubImage3DARB", (SPUGenericFunction)printCompressedTexSubImage3DARB },
    { "CopyPixels", (SPUGenericFunction)printCopyPixels },
    { "CopyTexImage1D", (SPUGenericFunction)printCopyTexImage1D },
    { "CopyTexImage2D", (SPUGenericFunction)printCopyTexImage2D },
    { "CopyTexSubImage1D", (SPUGenericFunction)printCopyTexSubImage1D },
    { "CopyTexSubImage2D", (SPUGenericFunction)printCopyTexSubImage2D },
    { "CopyTexSubImage3D", (SPUGenericFunction)printCopyTexSubImage3D },
    { "CreateContext", (SPUGenericFunction)printCreateContext },
    { "CullFace", (SPUGenericFunction)printCullFace },
    { "DeleteBuffersARB", (SPUGenericFunction)printDeleteBuffersARB },
    { "DeleteFencesNV", (SPUGenericFunction)printDeleteFencesNV },
    { "DeleteLists", (SPUGenericFunction)printDeleteLists },
    { "DeleteProgramsARB", (SPUGenericFunction)printDeleteProgramsARB },
    { "DeleteQueriesARB", (SPUGenericFunction)printDeleteQueriesARB },
    { "DeleteTextures", (SPUGenericFunction)printDeleteTextures },
    { "DepthFunc", (SPUGenericFunction)printDepthFunc },
    { "DepthMask", (SPUGenericFunction)printDepthMask },
    { "DepthRange", (SPUGenericFunction)printDepthRange },
    { "DestroyContext", (SPUGenericFunction)printDestroyContext },
    { "Disable", (SPUGenericFunction)printDisable },
    { "DisableClientState", (SPUGenericFunction)printDisableClientState },
    { "DisableVertexAttribArrayARB", (SPUGenericFunction)printDisableVertexAttribArrayARB },
    { "DrawArrays", (SPUGenericFunction)printDrawArrays },
    { "DrawBuffer", (SPUGenericFunction)printDrawBuffer },
    { "DrawElements", (SPUGenericFunction)printDrawElements },
    { "DrawPixels", (SPUGenericFunction)printDrawPixels },
    { "DrawRangeElements", (SPUGenericFunction)printDrawRangeElements },
    { "EdgeFlag", (SPUGenericFunction)printEdgeFlag },
    { "EdgeFlagPointer", (SPUGenericFunction)printEdgeFlagPointer },
    { "EdgeFlagv", (SPUGenericFunction)printEdgeFlagv },
    { "Enable", (SPUGenericFunction)printEnable },
    { "EnableClientState", (SPUGenericFunction)printEnableClientState },
    { "EnableVertexAttribArrayARB", (SPUGenericFunction)printEnableVertexAttribArrayARB },
    { "End", (SPUGenericFunction)printEnd },
    { "EndList", (SPUGenericFunction)printEndList },
    { "EndQueryARB", (SPUGenericFunction)printEndQueryARB },
    { "EvalCoord1d", (SPUGenericFunction)printEvalCoord1d },
    { "EvalCoord1dv", (SPUGenericFunction)printEvalCoord1dv },
    { "EvalCoord1f", (SPUGenericFunction)printEvalCoord1f },
    { "EvalCoord1fv", (SPUGenericFunction)printEvalCoord1fv },
    { "EvalCoord2d", (SPUGenericFunction)printEvalCoord2d },
    { "EvalCoord2dv", (SPUGenericFunction)printEvalCoord2dv },
    { "EvalCoord2f", (SPUGenericFunction)printEvalCoord2f },
    { "EvalCoord2fv", (SPUGenericFunction)printEvalCoord2fv },
    { "EvalMesh1", (SPUGenericFunction)printEvalMesh1 },
    { "EvalMesh2", (SPUGenericFunction)printEvalMesh2 },
    { "EvalPoint1", (SPUGenericFunction)printEvalPoint1 },
    { "EvalPoint2", (SPUGenericFunction)printEvalPoint2 },
    { "ExecuteProgramNV", (SPUGenericFunction)printExecuteProgramNV },
    { "FeedbackBuffer", (SPUGenericFunction)printFeedbackBuffer },
    { "FinalCombinerInputNV", (SPUGenericFunction)printFinalCombinerInputNV },
    { "Finish", (SPUGenericFunction)printFinish },
    { "FinishFenceNV", (SPUGenericFunction)printFinishFenceNV },
    { "Flush", (SPUGenericFunction)printFlush },
    { "FlushVertexArrayRangeNV", (SPUGenericFunction)printFlushVertexArrayRangeNV },
    { "FogCoordPointerEXT", (SPUGenericFunction)printFogCoordPointerEXT },
    { "FogCoorddEXT", (SPUGenericFunction)printFogCoorddEXT },
    { "FogCoorddvEXT", (SPUGenericFunction)printFogCoorddvEXT },
    { "FogCoordfEXT", (SPUGenericFunction)printFogCoordfEXT },
    { "FogCoordfvEXT", (SPUGenericFunction)printFogCoordfvEXT },
    { "Fogf", (SPUGenericFunction)printFogf },
    { "Fogfv", (SPUGenericFunction)printFogfv },
    { "Fogi", (SPUGenericFunction)printFogi },
    { "Fogiv", (SPUGenericFunction)printFogiv },
    { "FrontFace", (SPUGenericFunction)printFrontFace },
    { "Frustum", (SPUGenericFunction)printFrustum },
    { "GenBuffersARB", (SPUGenericFunction)printGenBuffersARB },
    { "GenFencesNV", (SPUGenericFunction)printGenFencesNV },
    { "GenLists", (SPUGenericFunction)printGenLists },
    { "GenProgramsARB", (SPUGenericFunction)printGenProgramsARB },
    { "GenProgramsNV", (SPUGenericFunction)printGenProgramsNV },
    { "GenQueriesARB", (SPUGenericFunction)printGenQueriesARB },
    { "GenTextures", (SPUGenericFunction)printGenTextures },
    { "GetBooleanv", (SPUGenericFunction)printGetBooleanv },
    { "GetBufferParameterivARB", (SPUGenericFunction)printGetBufferParameterivARB },
    { "GetBufferPointervARB", (SPUGenericFunction)printGetBufferPointervARB },
    { "GetBufferSubDataARB", (SPUGenericFunction)printGetBufferSubDataARB },
    { "GetChromiumParametervCR", (SPUGenericFunction)printGetChromiumParametervCR },
    { "GetClipPlane", (SPUGenericFunction)printGetClipPlane },
    { "GetCombinerInputParameterfvNV", (SPUGenericFunction)printGetCombinerInputParameterfvNV },
    { "GetCombinerInputParameterivNV", (SPUGenericFunction)printGetCombinerInputParameterivNV },
    { "GetCombinerOutputParameterfvNV", (SPUGenericFunction)printGetCombinerOutputParameterfvNV },
    { "GetCombinerOutputParameterivNV", (SPUGenericFunction)printGetCombinerOutputParameterivNV },
    { "GetCombinerStageParameterfvNV", (SPUGenericFunction)printGetCombinerStageParameterfvNV },
    { "GetCompressedTexImageARB", (SPUGenericFunction)printGetCompressedTexImageARB },
    { "GetDoublev", (SPUGenericFunction)printGetDoublev },
    { "GetError", (SPUGenericFunction)printGetError },
    { "GetFenceivNV", (SPUGenericFunction)printGetFenceivNV },
    { "GetFinalCombinerInputParameterfvNV", (SPUGenericFunction)printGetFinalCombinerInputParameterfvNV },
    { "GetFinalCombinerInputParameterivNV", (SPUGenericFunction)printGetFinalCombinerInputParameterivNV },
    { "GetFloatv", (SPUGenericFunction)printGetFloatv },
    { "GetIntegerv", (SPUGenericFunction)printGetIntegerv },
    { "GetLightfv", (SPUGenericFunction)printGetLightfv },
    { "GetLightiv", (SPUGenericFunction)printGetLightiv },
    { "GetMapdv", (SPUGenericFunction)printGetMapdv },
    { "GetMapfv", (SPUGenericFunction)printGetMapfv },
    { "GetMapiv", (SPUGenericFunction)printGetMapiv },
    { "GetMaterialfv", (SPUGenericFunction)printGetMaterialfv },
    { "GetMaterialiv", (SPUGenericFunction)printGetMaterialiv },
    { "GetPixelMapfv", (SPUGenericFunction)printGetPixelMapfv },
    { "GetPixelMapuiv", (SPUGenericFunction)printGetPixelMapuiv },
    { "GetPixelMapusv", (SPUGenericFunction)printGetPixelMapusv },
    { "GetPointerv", (SPUGenericFunction)printGetPointerv },
    { "GetPolygonStipple", (SPUGenericFunction)printGetPolygonStipple },
    { "GetProgramEnvParameterdvARB", (SPUGenericFunction)printGetProgramEnvParameterdvARB },
    { "GetProgramEnvParameterfvARB", (SPUGenericFunction)printGetProgramEnvParameterfvARB },
    { "GetProgramLocalParameterdvARB", (SPUGenericFunction)printGetProgramLocalParameterdvARB },
    { "GetProgramLocalParameterfvARB", (SPUGenericFunction)printGetProgramLocalParameterfvARB },
    { "GetProgramNamedParameterdvNV", (SPUGenericFunction)printGetProgramNamedParameterdvNV },
    { "GetProgramNamedParameterfvNV", (SPUGenericFunction)printGetProgramNamedParameterfvNV },
    { "GetProgramParameterdvNV", (SPUGenericFunction)printGetProgramParameterdvNV },
    { "GetProgramParameterfvNV", (SPUGenericFunction)printGetProgramParameterfvNV },
    { "GetProgramStringARB", (SPUGenericFunction)printGetProgramStringARB },
    { "GetProgramStringNV", (SPUGenericFunction)printGetProgramStringNV },
    { "GetProgramivARB", (SPUGenericFunction)printGetProgramivARB },
    { "GetProgramivNV", (SPUGenericFunction)printGetProgramivNV },
    { "GetQueryObjectivARB", (SPUGenericFunction)printGetQueryObjectivARB },
    { "GetQueryObjectuivARB", (SPUGenericFunction)printGetQueryObjectuivARB },
    { "GetQueryivARB", (SPUGenericFunction)printGetQueryivARB },
    { "GetString", (SPUGenericFunction)printGetString },
    { "GetTexEnvfv", (SPUGenericFunction)printGetTexEnvfv },
    { "GetTexEnviv", (SPUGenericFunction)printGetTexEnviv },
    { "GetTexGendv", (SPUGenericFunction)printGetTexGendv },
    { "GetTexGenfv", (SPUGenericFunction)printGetTexGenfv },
    { "GetTexGeniv", (SPUGenericFunction)printGetTexGeniv },
    { "GetTexImage", (SPUGenericFunction)printGetTexImage },
    { "GetTexLevelParameterfv", (SPUGenericFunction)printGetTexLevelParameterfv },
    { "GetTexLevelParameteriv", (SPUGenericFunction)printGetTexLevelParameteriv },
    { "GetTexParameterfv", (SPUGenericFunction)printGetTexParameterfv },
    { "GetTexParameteriv", (SPUGenericFunction)printGetTexParameteriv },
    { "GetTrackMatrixivNV", (SPUGenericFunction)printGetTrackMatrixivNV },
    { "GetVertexAttribPointervARB", (SPUGenericFunction)printGetVertexAttribPointervARB },
    { "GetVertexAttribPointervNV", (SPUGenericFunction)printGetVertexAttribPointervNV },
    { "GetVertexAttribdvARB", (SPUGenericFunction)printGetVertexAttribdvARB },
    { "GetVertexAttribdvNV", (SPUGenericFunction)printGetVertexAttribdvNV },
    { "GetVertexAttribfvARB", (SPUGenericFunction)printGetVertexAttribfvARB },
    { "GetVertexAttribfvNV", (SPUGenericFunction)printGetVertexAttribfvNV },
    { "GetVertexAttribivARB", (SPUGenericFunction)printGetVertexAttribivARB },
    { "GetVertexAttribivNV", (SPUGenericFunction)printGetVertexAttribivNV },
    { "Hint", (SPUGenericFunction)printHint },
    { "IndexMask", (SPUGenericFunction)printIndexMask },
    { "IndexPointer", (SPUGenericFunction)printIndexPointer },
    { "Indexd", (SPUGenericFunction)printIndexd },
    { "Indexdv", (SPUGenericFunction)printIndexdv },
    { "Indexf", (SPUGenericFunction)printIndexf },
    { "Indexfv", (SPUGenericFunction)printIndexfv },
    { "Indexi", (SPUGenericFunction)printIndexi },
    { "Indexiv", (SPUGenericFunction)printIndexiv },
    { "Indexs", (SPUGenericFunction)printIndexs },
    { "Indexsv", (SPUGenericFunction)printIndexsv },
    { "Indexub", (SPUGenericFunction)printIndexub },
    { "Indexubv", (SPUGenericFunction)printIndexubv },
    { "InitNames", (SPUGenericFunction)printInitNames },
    { "InterleavedArrays", (SPUGenericFunction)printInterleavedArrays },
    { "IsBufferARB", (SPUGenericFunction)printIsBufferARB },
    { "IsEnabled", (SPUGenericFunction)printIsEnabled },
    { "IsFenceNV", (SPUGenericFunction)printIsFenceNV },
    { "IsList", (SPUGenericFunction)printIsList },
    { "IsProgramARB", (SPUGenericFunction)printIsProgramARB },
    { "IsQueryARB", (SPUGenericFunction)printIsQueryARB },
    { "IsTexture", (SPUGenericFunction)printIsTexture },
    { "LightModelf", (SPUGenericFunction)printLightModelf },
    { "LightModelfv", (SPUGenericFunction)printLightModelfv },
    { "LightModeli", (SPUGenericFunction)printLightModeli },
    { "LightModeliv", (SPUGenericFunction)printLightModeliv },
    { "Lightf", (SPUGenericFunction)printLightf },
    { "Lightfv", (SPUGenericFunction)printLightfv },
    { "Lighti", (SPUGenericFunction)printLighti },
    { "Lightiv", (SPUGenericFunction)printLightiv },
    { "LineStipple", (SPUGenericFunction)printLineStipple },
    { "LineWidth", (SPUGenericFunction)printLineWidth },
    { "ListBase", (SPUGenericFunction)printListBase },
    { "LoadIdentity", (SPUGenericFunction)printLoadIdentity },
    { "LoadMatrixd", (SPUGenericFunction)printLoadMatrixd },
    { "LoadMatrixf", (SPUGenericFunction)printLoadMatrixf },
    { "LoadName", (SPUGenericFunction)printLoadName },
    { "LoadProgramNV", (SPUGenericFunction)printLoadProgramNV },
    { "LoadTransposeMatrixdARB", (SPUGenericFunction)printLoadTransposeMatrixdARB },
    { "LoadTransposeMatrixfARB", (SPUGenericFunction)printLoadTransposeMatrixfARB },
    { "LogicOp", (SPUGenericFunction)printLogicOp },
    { "MakeCurrent", (SPUGenericFunction)printMakeCurrent },
    { "Map1d", (SPUGenericFunction)printMap1d },
    { "Map1f", (SPUGenericFunction)printMap1f },
    { "Map2d", (SPUGenericFunction)printMap2d },
    { "Map2f", (SPUGenericFunction)printMap2f },
    { "MapBufferARB", (SPUGenericFunction)printMapBufferARB },
    { "MapGrid1d", (SPUGenericFunction)printMapGrid1d },
    { "MapGrid1f", (SPUGenericFunction)printMapGrid1f },
    { "MapGrid2d", (SPUGenericFunction)printMapGrid2d },
    { "MapGrid2f", (SPUGenericFunction)printMapGrid2f },
    { "Materialf", (SPUGenericFunction)printMaterialf },
    { "Materialfv", (SPUGenericFunction)printMaterialfv },
    { "Materiali", (SPUGenericFunction)printMateriali },
    { "Materialiv", (SPUGenericFunction)printMaterialiv },
    { "MatrixMode", (SPUGenericFunction)printMatrixMode },
    { "MultMatrixd", (SPUGenericFunction)printMultMatrixd },
    { "MultMatrixf", (SPUGenericFunction)printMultMatrixf },
    { "MultTransposeMatrixdARB", (SPUGenericFunction)printMultTransposeMatrixdARB },
    { "MultTransposeMatrixfARB", (SPUGenericFunction)printMultTransposeMatrixfARB },
    { "MultiDrawArraysEXT", (SPUGenericFunction)printMultiDrawArraysEXT },
    { "MultiDrawElementsEXT", (SPUGenericFunction)printMultiDrawElementsEXT },
    { "MultiTexCoord1dARB", (SPUGenericFunction)printMultiTexCoord1dARB },
    { "MultiTexCoord1dvARB", (SPUGenericFunction)printMultiTexCoord1dvARB },
    { "MultiTexCoord1fARB", (SPUGenericFunction)printMultiTexCoord1fARB },
    { "MultiTexCoord1fvARB", (SPUGenericFunction)printMultiTexCoord1fvARB },
    { "MultiTexCoord1iARB", (SPUGenericFunction)printMultiTexCoord1iARB },
    { "MultiTexCoord1ivARB", (SPUGenericFunction)printMultiTexCoord1ivARB },
    { "MultiTexCoord1sARB", (SPUGenericFunction)printMultiTexCoord1sARB },
    { "MultiTexCoord1svARB", (SPUGenericFunction)printMultiTexCoord1svARB },
    { "MultiTexCoord2dARB", (SPUGenericFunction)printMultiTexCoord2dARB },
    { "MultiTexCoord2dvARB", (SPUGenericFunction)printMultiTexCoord2dvARB },
    { "MultiTexCoord2fARB", (SPUGenericFunction)printMultiTexCoord2fARB },
    { "MultiTexCoord2fvARB", (SPUGenericFunction)printMultiTexCoord2fvARB },
    { "MultiTexCoord2iARB", (SPUGenericFunction)printMultiTexCoord2iARB },
    { "MultiTexCoord2ivARB", (SPUGenericFunction)printMultiTexCoord2ivARB },
    { "MultiTexCoord2sARB", (SPUGenericFunction)printMultiTexCoord2sARB },
    { "MultiTexCoord2svARB", (SPUGenericFunction)printMultiTexCoord2svARB },
    { "MultiTexCoord3dARB", (SPUGenericFunction)printMultiTexCoord3dARB },
    { "MultiTexCoord3dvARB", (SPUGenericFunction)printMultiTexCoord3dvARB },
    { "MultiTexCoord3fARB", (SPUGenericFunction)printMultiTexCoord3fARB },
    { "MultiTexCoord3fvARB", (SPUGenericFunction)printMultiTexCoord3fvARB },
    { "MultiTexCoord3iARB", (SPUGenericFunction)printMultiTexCoord3iARB },
    { "MultiTexCoord3ivARB", (SPUGenericFunction)printMultiTexCoord3ivARB },
    { "MultiTexCoord3sARB", (SPUGenericFunction)printMultiTexCoord3sARB },
    { "MultiTexCoord3svARB", (SPUGenericFunction)printMultiTexCoord3svARB },
    { "MultiTexCoord4dARB", (SPUGenericFunction)printMultiTexCoord4dARB },
    { "MultiTexCoord4dvARB", (SPUGenericFunction)printMultiTexCoord4dvARB },
    { "MultiTexCoord4fARB", (SPUGenericFunction)printMultiTexCoord4fARB },
    { "MultiTexCoord4fvARB", (SPUGenericFunction)printMultiTexCoord4fvARB },
    { "MultiTexCoord4iARB", (SPUGenericFunction)printMultiTexCoord4iARB },
    { "MultiTexCoord4ivARB", (SPUGenericFunction)printMultiTexCoord4ivARB },
    { "MultiTexCoord4sARB", (SPUGenericFunction)printMultiTexCoord4sARB },
    { "MultiTexCoord4svARB", (SPUGenericFunction)printMultiTexCoord4svARB },
    { "NewList", (SPUGenericFunction)printNewList },
    { "Normal3b", (SPUGenericFunction)printNormal3b },
    { "Normal3bv", (SPUGenericFunction)printNormal3bv },
    { "Normal3d", (SPUGenericFunction)printNormal3d },
    { "Normal3dv", (SPUGenericFunction)printNormal3dv },
    { "Normal3f", (SPUGenericFunction)printNormal3f },
    { "Normal3fv", (SPUGenericFunction)printNormal3fv },
    { "Normal3i", (SPUGenericFunction)printNormal3i },
    { "Normal3iv", (SPUGenericFunction)printNormal3iv },
    { "Normal3s", (SPUGenericFunction)printNormal3s },
    { "Normal3sv", (SPUGenericFunction)printNormal3sv },
    { "NormalPointer", (SPUGenericFunction)printNormalPointer },
    { "Ortho", (SPUGenericFunction)printOrtho },
    { "PassThrough", (SPUGenericFunction)printPassThrough },
    { "PixelMapfv", (SPUGenericFunction)printPixelMapfv },
    { "PixelMapuiv", (SPUGenericFunction)printPixelMapuiv },
    { "PixelMapusv", (SPUGenericFunction)printPixelMapusv },
    { "PixelStoref", (SPUGenericFunction)printPixelStoref },
    { "PixelStorei", (SPUGenericFunction)printPixelStorei },
    { "PixelTransferf", (SPUGenericFunction)printPixelTransferf },
    { "PixelTransferi", (SPUGenericFunction)printPixelTransferi },
    { "PixelZoom", (SPUGenericFunction)printPixelZoom },
    { "PointParameterfARB", (SPUGenericFunction)printPointParameterfARB },
    { "PointParameterfvARB", (SPUGenericFunction)printPointParameterfvARB },
    { "PointParameteri", (SPUGenericFunction)printPointParameteri },
    { "PointParameteriv", (SPUGenericFunction)printPointParameteriv },
    { "PointSize", (SPUGenericFunction)printPointSize },
    { "PolygonMode", (SPUGenericFunction)printPolygonMode },
    { "PolygonOffset", (SPUGenericFunction)printPolygonOffset },
    { "PolygonStipple", (SPUGenericFunction)printPolygonStipple },
    { "PopAttrib", (SPUGenericFunction)printPopAttrib },
    { "PopClientAttrib", (SPUGenericFunction)printPopClientAttrib },
    { "PopMatrix", (SPUGenericFunction)printPopMatrix },
    { "PopName", (SPUGenericFunction)printPopName },
    { "PrioritizeTextures", (SPUGenericFunction)printPrioritizeTextures },
    { "ProgramEnvParameter4dARB", (SPUGenericFunction)printProgramEnvParameter4dARB },
    { "ProgramEnvParameter4dvARB", (SPUGenericFunction)printProgramEnvParameter4dvARB },
    { "ProgramEnvParameter4fARB", (SPUGenericFunction)printProgramEnvParameter4fARB },
    { "ProgramEnvParameter4fvARB", (SPUGenericFunction)printProgramEnvParameter4fvARB },
    { "ProgramLocalParameter4dARB", (SPUGenericFunction)printProgramLocalParameter4dARB },
    { "ProgramLocalParameter4dvARB", (SPUGenericFunction)printProgramLocalParameter4dvARB },
    { "ProgramLocalParameter4fARB", (SPUGenericFunction)printProgramLocalParameter4fARB },
    { "ProgramLocalParameter4fvARB", (SPUGenericFunction)printProgramLocalParameter4fvARB },
    { "ProgramNamedParameter4dNV", (SPUGenericFunction)printProgramNamedParameter4dNV },
    { "ProgramNamedParameter4dvNV", (SPUGenericFunction)printProgramNamedParameter4dvNV },
    { "ProgramNamedParameter4fNV", (SPUGenericFunction)printProgramNamedParameter4fNV },
    { "ProgramNamedParameter4fvNV", (SPUGenericFunction)printProgramNamedParameter4fvNV },
    { "ProgramParameter4dNV", (SPUGenericFunction)printProgramParameter4dNV },
    { "ProgramParameter4dvNV", (SPUGenericFunction)printProgramParameter4dvNV },
    { "ProgramParameter4fNV", (SPUGenericFunction)printProgramParameter4fNV },
    { "ProgramParameter4fvNV", (SPUGenericFunction)printProgramParameter4fvNV },
    { "ProgramParameters4dvNV", (SPUGenericFunction)printProgramParameters4dvNV },
    { "ProgramParameters4fvNV", (SPUGenericFunction)printProgramParameters4fvNV },
    { "ProgramStringARB", (SPUGenericFunction)printProgramStringARB },
    { "PushAttrib", (SPUGenericFunction)printPushAttrib },
    { "PushClientAttrib", (SPUGenericFunction)printPushClientAttrib },
    { "PushMatrix", (SPUGenericFunction)printPushMatrix },
    { "PushName", (SPUGenericFunction)printPushName },
    { "RasterPos2d", (SPUGenericFunction)printRasterPos2d },
    { "RasterPos2dv", (SPUGenericFunction)printRasterPos2dv },
    { "RasterPos2f", (SPUGenericFunction)printRasterPos2f },
    { "RasterPos2fv", (SPUGenericFunction)printRasterPos2fv },
    { "RasterPos2i", (SPUGenericFunction)printRasterPos2i },
    { "RasterPos2iv", (SPUGenericFunction)printRasterPos2iv },
    { "RasterPos2s", (SPUGenericFunction)printRasterPos2s },
    { "RasterPos2sv", (SPUGenericFunction)printRasterPos2sv },
    { "RasterPos3d", (SPUGenericFunction)printRasterPos3d },
    { "RasterPos3dv", (SPUGenericFunction)printRasterPos3dv },
    { "RasterPos3f", (SPUGenericFunction)printRasterPos3f },
    { "RasterPos3fv", (SPUGenericFunction)printRasterPos3fv },
    { "RasterPos3i", (SPUGenericFunction)printRasterPos3i },
    { "RasterPos3iv", (SPUGenericFunction)printRasterPos3iv },
    { "RasterPos3s", (SPUGenericFunction)printRasterPos3s },
    { "RasterPos3sv", (SPUGenericFunction)printRasterPos3sv },
    { "RasterPos4d", (SPUGenericFunction)printRasterPos4d },
    { "RasterPos4dv", (SPUGenericFunction)printRasterPos4dv },
    { "RasterPos4f", (SPUGenericFunction)printRasterPos4f },
    { "RasterPos4fv", (SPUGenericFunction)printRasterPos4fv },
    { "RasterPos4i", (SPUGenericFunction)printRasterPos4i },
    { "RasterPos4iv", (SPUGenericFunction)printRasterPos4iv },
    { "RasterPos4s", (SPUGenericFunction)printRasterPos4s },
    { "RasterPos4sv", (SPUGenericFunction)printRasterPos4sv },
    { "ReadBuffer", (SPUGenericFunction)printReadBuffer },
    { "ReadPixels", (SPUGenericFunction)printReadPixels },
    { "Rectd", (SPUGenericFunction)printRectd },
    { "Rectdv", (SPUGenericFunction)printRectdv },
    { "Rectf", (SPUGenericFunction)printRectf },
    { "Rectfv", (SPUGenericFunction)printRectfv },
    { "Recti", (SPUGenericFunction)printRecti },
    { "Rectiv", (SPUGenericFunction)printRectiv },
    { "Rects", (SPUGenericFunction)printRects },
    { "Rectsv", (SPUGenericFunction)printRectsv },
    { "RenderMode", (SPUGenericFunction)printRenderMode },
    { "RequestResidentProgramsNV", (SPUGenericFunction)printRequestResidentProgramsNV },
    { "Rotated", (SPUGenericFunction)printRotated },
    { "Rotatef", (SPUGenericFunction)printRotatef },
    { "SampleCoverageARB", (SPUGenericFunction)printSampleCoverageARB },
    { "Scaled", (SPUGenericFunction)printScaled },
    { "Scalef", (SPUGenericFunction)printScalef },
    { "Scissor", (SPUGenericFunction)printScissor },
    { "SecondaryColor3bEXT", (SPUGenericFunction)printSecondaryColor3bEXT },
    { "SecondaryColor3bvEXT", (SPUGenericFunction)printSecondaryColor3bvEXT },
    { "SecondaryColor3dEXT", (SPUGenericFunction)printSecondaryColor3dEXT },
    { "SecondaryColor3dvEXT", (SPUGenericFunction)printSecondaryColor3dvEXT },
    { "SecondaryColor3fEXT", (SPUGenericFunction)printSecondaryColor3fEXT },
    { "SecondaryColor3fvEXT", (SPUGenericFunction)printSecondaryColor3fvEXT },
    { "SecondaryColor3iEXT", (SPUGenericFunction)printSecondaryColor3iEXT },
    { "SecondaryColor3ivEXT", (SPUGenericFunction)printSecondaryColor3ivEXT },
    { "SecondaryColor3sEXT", (SPUGenericFunction)printSecondaryColor3sEXT },
    { "SecondaryColor3svEXT", (SPUGenericFunction)printSecondaryColor3svEXT },
    { "SecondaryColor3ubEXT", (SPUGenericFunction)printSecondaryColor3ubEXT },
    { "SecondaryColor3ubvEXT", (SPUGenericFunction)printSecondaryColor3ubvEXT },
    { "SecondaryColor3uiEXT", (SPUGenericFunction)printSecondaryColor3uiEXT },
    { "SecondaryColor3uivEXT", (SPUGenericFunction)printSecondaryColor3uivEXT },
    { "SecondaryColor3usEXT", (SPUGenericFunction)printSecondaryColor3usEXT },
    { "SecondaryColor3usvEXT", (SPUGenericFunction)printSecondaryColor3usvEXT },
    { "SecondaryColorPointerEXT", (SPUGenericFunction)printSecondaryColorPointerEXT },
    { "SelectBuffer", (SPUGenericFunction)printSelectBuffer },
    { "SemaphoreCreateCR", (SPUGenericFunction)printSemaphoreCreateCR },
    { "SemaphoreDestroyCR", (SPUGenericFunction)printSemaphoreDestroyCR },
    { "SemaphorePCR", (SPUGenericFunction)printSemaphorePCR },
    { "SemaphoreVCR", (SPUGenericFunction)printSemaphoreVCR },
    { "SetFenceNV", (SPUGenericFunction)printSetFenceNV },
    { "ShadeModel", (SPUGenericFunction)printShadeModel },
    { "StencilFunc", (SPUGenericFunction)printStencilFunc },
    { "StencilMask", (SPUGenericFunction)printStencilMask },
    { "StencilOp", (SPUGenericFunction)printStencilOp },
    { "SwapBuffers", (SPUGenericFunction)printSwapBuffers },
    { "TestFenceNV", (SPUGenericFunction)printTestFenceNV },
    { "TexCoord1d", (SPUGenericFunction)printTexCoord1d },
    { "TexCoord1dv", (SPUGenericFunction)printTexCoord1dv },
    { "TexCoord1f", (SPUGenericFunction)printTexCoord1f },
    { "TexCoord1fv", (SPUGenericFunction)printTexCoord1fv },
    { "TexCoord1i", (SPUGenericFunction)printTexCoord1i },
    { "TexCoord1iv", (SPUGenericFunction)printTexCoord1iv },
    { "TexCoord1s", (SPUGenericFunction)printTexCoord1s },
    { "TexCoord1sv", (SPUGenericFunction)printTexCoord1sv },
    { "TexCoord2d", (SPUGenericFunction)printTexCoord2d },
    { "TexCoord2dv", (SPUGenericFunction)printTexCoord2dv },
    { "TexCoord2f", (SPUGenericFunction)printTexCoord2f },
    { "TexCoord2fv", (SPUGenericFunction)printTexCoord2fv },
    { "TexCoord2i", (SPUGenericFunction)printTexCoord2i },
    { "TexCoord2iv", (SPUGenericFunction)printTexCoord2iv },
    { "TexCoord2s", (SPUGenericFunction)printTexCoord2s },
    { "TexCoord2sv", (SPUGenericFunction)printTexCoord2sv },
    { "TexCoord3d", (SPUGenericFunction)printTexCoord3d },
    { "TexCoord3dv", (SPUGenericFunction)printTexCoord3dv },
    { "TexCoord3f", (SPUGenericFunction)printTexCoord3f },
    { "TexCoord3fv", (SPUGenericFunction)printTexCoord3fv },
    { "TexCoord3i", (SPUGenericFunction)printTexCoord3i },
    { "TexCoord3iv", (SPUGenericFunction)printTexCoord3iv },
    { "TexCoord3s", (SPUGenericFunction)printTexCoord3s },
    { "TexCoord3sv", (SPUGenericFunction)printTexCoord3sv },
    { "TexCoord4d", (SPUGenericFunction)printTexCoord4d },
    { "TexCoord4dv", (SPUGenericFunction)printTexCoord4dv },
    { "TexCoord4f", (SPUGenericFunction)printTexCoord4f },
    { "TexCoord4fv", (SPUGenericFunction)printTexCoord4fv },
    { "TexCoord4i", (SPUGenericFunction)printTexCoord4i },
    { "TexCoord4iv", (SPUGenericFunction)printTexCoord4iv },
    { "TexCoord4s", (SPUGenericFunction)printTexCoord4s },
    { "TexCoord4sv", (SPUGenericFunction)printTexCoord4sv },
    { "TexCoordPointer", (SPUGenericFunction)printTexCoordPointer },
    { "TexEnvf", (SPUGenericFunction)printTexEnvf },
    { "TexEnvfv", (SPUGenericFunction)printTexEnvfv },
    { "TexEnvi", (SPUGenericFunction)printTexEnvi },
    { "TexEnviv", (SPUGenericFunction)printTexEnviv },
    { "TexGend", (SPUGenericFunction)printTexGend },
    { "TexGendv", (SPUGenericFunction)printTexGendv },
    { "TexGenf", (SPUGenericFunction)printTexGenf },
    { "TexGenfv", (SPUGenericFunction)printTexGenfv },
    { "TexGeni", (SPUGenericFunction)printTexGeni },
    { "TexGeniv", (SPUGenericFunction)printTexGeniv },
    { "TexImage1D", (SPUGenericFunction)printTexImage1D },
    { "TexImage2D", (SPUGenericFunction)printTexImage2D },
    { "TexImage3D", (SPUGenericFunction)printTexImage3D },
    { "TexImage3DEXT", (SPUGenericFunction)printTexImage3DEXT },
    { "TexParameterf", (SPUGenericFunction)printTexParameterf },
    { "TexParameterfv", (SPUGenericFunction)printTexParameterfv },
    { "TexParameteri", (SPUGenericFunction)printTexParameteri },
    { "TexParameteriv", (SPUGenericFunction)printTexParameteriv },
    { "TexSubImage1D", (SPUGenericFunction)printTexSubImage1D },
    { "TexSubImage2D", (SPUGenericFunction)printTexSubImage2D },
    { "TexSubImage3D", (SPUGenericFunction)printTexSubImage3D },
    { "TrackMatrixNV", (SPUGenericFunction)printTrackMatrixNV },
    { "Translated", (SPUGenericFunction)printTranslated },
    { "Translatef", (SPUGenericFunction)printTranslatef },
    { "UnmapBufferARB", (SPUGenericFunction)printUnmapBufferARB },
    { "Vertex2d", (SPUGenericFunction)printVertex2d },
    { "Vertex2dv", (SPUGenericFunction)printVertex2dv },
    { "Vertex2f", (SPUGenericFunction)printVertex2f },
    { "Vertex2fv", (SPUGenericFunction)printVertex2fv },
    { "Vertex2i", (SPUGenericFunction)printVertex2i },
    { "Vertex2iv", (SPUGenericFunction)printVertex2iv },
    { "Vertex2s", (SPUGenericFunction)printVertex2s },
    { "Vertex2sv", (SPUGenericFunction)printVertex2sv },
    { "Vertex3d", (SPUGenericFunction)printVertex3d },
    { "Vertex3dv", (SPUGenericFunction)printVertex3dv },
    { "Vertex3f", (SPUGenericFunction)printVertex3f },
    { "Vertex3fv", (SPUGenericFunction)printVertex3fv },
    { "Vertex3i", (SPUGenericFunction)printVertex3i },
    { "Vertex3iv", (SPUGenericFunction)printVertex3iv },
    { "Vertex3s", (SPUGenericFunction)printVertex3s },
    { "Vertex3sv", (SPUGenericFunction)printVertex3sv },
    { "Vertex4d", (SPUGenericFunction)printVertex4d },
    { "Vertex4dv", (SPUGenericFunction)printVertex4dv },
    { "Vertex4f", (SPUGenericFunction)printVertex4f },
    { "Vertex4fv", (SPUGenericFunction)printVertex4fv },
    { "Vertex4i", (SPUGenericFunction)printVertex4i },
    { "Vertex4iv", (SPUGenericFunction)printVertex4iv },
    { "Vertex4s", (SPUGenericFunction)printVertex4s },
    { "Vertex4sv", (SPUGenericFunction)printVertex4sv },
    { "VertexArrayRangeNV", (SPUGenericFunction)printVertexArrayRangeNV },
    { "VertexAttrib1dARB", (SPUGenericFunction)printVertexAttrib1dARB },
    { "VertexAttrib1dvARB", (SPUGenericFunction)printVertexAttrib1dvARB },
    { "VertexAttrib1fARB", (SPUGenericFunction)printVertexAttrib1fARB },
    { "VertexAttrib1fvARB", (SPUGenericFunction)printVertexAttrib1fvARB },
    { "VertexAttrib1sARB", (SPUGenericFunction)printVertexAttrib1sARB },
    { "VertexAttrib1svARB", (SPUGenericFunction)printVertexAttrib1svARB },
    { "VertexAttrib2dARB", (SPUGenericFunction)printVertexAttrib2dARB },
    { "VertexAttrib2dvARB", (SPUGenericFunction)printVertexAttrib2dvARB },
    { "VertexAttrib2fARB", (SPUGenericFunction)printVertexAttrib2fARB },
    { "VertexAttrib2fvARB", (SPUGenericFunction)printVertexAttrib2fvARB },
    { "VertexAttrib2sARB", (SPUGenericFunction)printVertexAttrib2sARB },
    { "VertexAttrib2svARB", (SPUGenericFunction)printVertexAttrib2svARB },
    { "VertexAttrib3dARB", (SPUGenericFunction)printVertexAttrib3dARB },
    { "VertexAttrib3dvARB", (SPUGenericFunction)printVertexAttrib3dvARB },
    { "VertexAttrib3fARB", (SPUGenericFunction)printVertexAttrib3fARB },
    { "VertexAttrib3fvARB", (SPUGenericFunction)printVertexAttrib3fvARB },
    { "VertexAttrib3sARB", (SPUGenericFunction)printVertexAttrib3sARB },
    { "VertexAttrib3svARB", (SPUGenericFunction)printVertexAttrib3svARB },
    { "VertexAttrib4NbvARB", (SPUGenericFunction)printVertexAttrib4NbvARB },
    { "VertexAttrib4NivARB", (SPUGenericFunction)printVertexAttrib4NivARB },
    { "VertexAttrib4NsvARB", (SPUGenericFunction)printVertexAttrib4NsvARB },
    { "VertexAttrib4NubARB", (SPUGenericFunction)printVertexAttrib4NubARB },
    { "VertexAttrib4NubvARB", (SPUGenericFunction)printVertexAttrib4NubvARB },
    { "VertexAttrib4NuivARB", (SPUGenericFunction)printVertexAttrib4NuivARB },
    { "VertexAttrib4NusvARB", (SPUGenericFunction)printVertexAttrib4NusvARB },
    { "VertexAttrib4bvARB", (SPUGenericFunction)printVertexAttrib4bvARB },
    { "VertexAttrib4dARB", (SPUGenericFunction)printVertexAttrib4dARB },
    { "VertexAttrib4dvARB", (SPUGenericFunction)printVertexAttrib4dvARB },
    { "VertexAttrib4fARB", (SPUGenericFunction)printVertexAttrib4fARB },
    { "VertexAttrib4fvARB", (SPUGenericFunction)printVertexAttrib4fvARB },
    { "VertexAttrib4ivARB", (SPUGenericFunction)printVertexAttrib4ivARB },
    { "VertexAttrib4sARB", (SPUGenericFunction)printVertexAttrib4sARB },
    { "VertexAttrib4svARB", (SPUGenericFunction)printVertexAttrib4svARB },
    { "VertexAttrib4ubvARB", (SPUGenericFunction)printVertexAttrib4ubvARB },
    { "VertexAttrib4uivARB", (SPUGenericFunction)printVertexAttrib4uivARB },
    { "VertexAttrib4usvARB", (SPUGenericFunction)printVertexAttrib4usvARB },
    { "VertexAttribPointerARB", (SPUGenericFunction)printVertexAttribPointerARB },
    { "VertexAttribPointerNV", (SPUGenericFunction)printVertexAttribPointerNV },
    { "VertexAttribs1dvNV", (SPUGenericFunction)printVertexAttribs1dvNV },
    { "VertexAttribs1fvNV", (SPUGenericFunction)printVertexAttribs1fvNV },
    { "VertexAttribs1svNV", (SPUGenericFunction)printVertexAttribs1svNV },
    { "VertexAttribs2dvNV", (SPUGenericFunction)printVertexAttribs2dvNV },
    { "VertexAttribs2fvNV", (SPUGenericFunction)printVertexAttribs2fvNV },
    { "VertexAttribs2svNV", (SPUGenericFunction)printVertexAttribs2svNV },
    { "VertexAttribs3dvNV", (SPUGenericFunction)printVertexAttribs3dvNV },
    { "VertexAttribs3fvNV", (SPUGenericFunction)printVertexAttribs3fvNV },
    { "VertexAttribs3svNV", (SPUGenericFunction)printVertexAttribs3svNV },
    { "VertexAttribs4dvNV", (SPUGenericFunction)printVertexAttribs4dvNV },
    { "VertexAttribs4fvNV", (SPUGenericFunction)printVertexAttribs4fvNV },
    { "VertexAttribs4svNV", (SPUGenericFunction)printVertexAttribs4svNV },
    { "VertexAttribs4ubvNV", (SPUGenericFunction)printVertexAttribs4ubvNV },
    { "VertexPointer", (SPUGenericFunction)printVertexPointer },
    { "Viewport", (SPUGenericFunction)printViewport },
    { "WindowCreate", (SPUGenericFunction)printWindowCreate },
    { "WindowDestroy", (SPUGenericFunction)printWindowDestroy },
    { "WindowPos2dARB", (SPUGenericFunction)printWindowPos2dARB },
    { "WindowPos2dvARB", (SPUGenericFunction)printWindowPos2dvARB },
    { "WindowPos2fARB", (SPUGenericFunction)printWindowPos2fARB },
    { "WindowPos2fvARB", (SPUGenericFunction)printWindowPos2fvARB },
    { "WindowPos2iARB", (SPUGenericFunction)printWindowPos2iARB },
    { "WindowPos2ivARB", (SPUGenericFunction)printWindowPos2ivARB },
    { "WindowPos2sARB", (SPUGenericFunction)printWindowPos2sARB },
    { "WindowPos2svARB", (SPUGenericFunction)printWindowPos2svARB },
    { "WindowPos3dARB", (SPUGenericFunction)printWindowPos3dARB },
    { "WindowPos3dvARB", (SPUGenericFunction)printWindowPos3dvARB },
    { "WindowPos3fARB", (SPUGenericFunction)printWindowPos3fARB },
    { "WindowPos3fvARB", (SPUGenericFunction)printWindowPos3fvARB },
    { "WindowPos3iARB", (SPUGenericFunction)printWindowPos3iARB },
    { "WindowPos3ivARB", (SPUGenericFunction)printWindowPos3ivARB },
    { "WindowPos3sARB", (SPUGenericFunction)printWindowPos3sARB },
    { "WindowPos3svARB", (SPUGenericFunction)printWindowPos3svARB },
    { "WindowPosition", (SPUGenericFunction)printWindowPosition },
    { "WindowShow", (SPUGenericFunction)printWindowShow },
    { "WindowSize", (SPUGenericFunction)printWindowSize },
    { "Writeback", (SPUGenericFunction)printWriteback },
    { "ZPixCR", (SPUGenericFunction)printZPixCR },
    { NULL, NULL }
};
